Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst"], "titles": ["Index", "Extending the API", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL Interface", "Testing"], "terms": {"python": [0, 38, 39, 81, 109, 120, 121, 126, 128, 142, 143, 145, 161, 211, 217, 243, 244, 265, 297, 311, 326, 396, 401, 405, 469, 554, 556, 558, 665, 742, 759, 760, 762, 763, 805, 806, 808, 818, 824, 844, 919, 931, 943, 1018, 1022, 1034, 1035, 1036, 1042, 1176, 1250, 1310, 1331], "api": [0, 109, 140, 161, 217, 297, 311, 558, 781, 818, 919, 1176, 1331], "refer": [0, 37, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 169, 172, 311, 314, 396, 436, 439, 607, 663, 680, 681, 697, 699, 700, 704, 818, 844, 931, 1057, 1060, 1196, 1265, 1266, 1282, 1284, 1285, 1289, 1331, 1335], "datafram": [0, 1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 79, 94, 96, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 137, 138, 139, 143, 144, 147, 148, 159, 309, 310, 314, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 814, 818, 830, 839, 840, 843, 845, 849, 850, 854, 857, 865, 866, 867, 868, 870, 871, 875, 876, 880, 883, 893, 895, 901, 902, 903, 908, 911, 912, 913, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 936, 1012, 1013, 1053, 1078, 1097, 1176, 1194, 1255, 1273, 1274, 1298, 1306, 1307, 1319, 1331, 1339, 1340], "lazyfram": [0, 1, 47, 48, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 134, 135, 136, 137, 138, 139, 140, 143, 144, 150, 215, 231, 232, 257, 311, 465, 546, 818, 830, 930, 936, 1339, 1340], "seri": [0, 1, 12, 26, 53, 55, 56, 57, 58, 62, 63, 72, 83, 91, 92, 97, 108, 110, 113, 115, 143, 145, 146, 150, 174, 183, 186, 189, 191, 194, 199, 202, 203, 204, 206, 208, 210, 218, 219, 220, 221, 225, 226, 237, 238, 239, 241, 245, 259, 260, 264, 267, 269, 271, 272, 290, 311, 325, 326, 337, 360, 364, 372, 373, 375, 432, 462, 465, 468, 472, 473, 482, 487, 490, 491, 494, 496, 497, 498, 510, 517, 519, 544, 546, 552, 554, 556, 558, 607, 608, 609, 610, 611, 612, 616, 617, 618, 629, 640, 643, 667, 697, 698, 699, 700, 704, 708, 716, 717, 721, 726, 735, 737, 741, 750, 751, 754, 755, 759, 760, 762, 763, 768, 770, 774, 775, 778, 779, 780, 781, 791, 793, 794, 797, 800, 805, 806, 809, 818, 830, 853, 857, 884, 912, 931, 935, 1323, 1325, 1327, 1330, 1332, 1335, 1336, 1337, 1338, 1340], "express": [0, 9, 43, 44, 45, 46, 60, 61, 147, 150, 154, 164, 179, 181, 183, 193, 196, 217, 228, 232, 242, 247, 248, 252, 256, 268, 273, 274, 284, 285, 287, 289, 297, 311, 319, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 336, 337, 341, 342, 343, 344, 345, 348, 359, 364, 365, 366, 367, 368, 370, 376, 379, 380, 381, 382, 393, 394, 395, 396, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 459, 461, 462, 464, 465, 469, 471, 472, 474, 475, 476, 477, 482, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 500, 503, 504, 508, 509, 511, 512, 513, 516, 517, 523, 525, 545, 546, 552, 553, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 575, 577, 579, 580, 582, 584, 586, 587, 590, 591, 593, 595, 596, 600, 601, 602, 603, 604, 606, 610, 611, 612, 614, 615, 638, 639, 640, 642, 644, 646, 647, 649, 651, 654, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 680, 681, 686, 687, 688, 689, 698, 702, 711, 712, 713, 716, 718, 719, 722, 723, 724, 726, 727, 729, 730, 731, 732, 734, 735, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 750, 751, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 788, 790, 791, 793, 794, 795, 796, 797, 798, 800, 802, 804, 805, 806, 808, 809, 814, 817, 830, 834, 839, 840, 848, 849, 850, 853, 856, 859, 880, 886, 887, 890, 891, 892, 894, 900, 906, 907, 908, 910, 911, 919, 931, 935, 936, 960, 995, 1011, 1018, 1021, 1022, 1039, 1078, 1084, 1102, 1134, 1135, 1138, 1176, 1200, 1220, 1226, 1227, 1240, 1242, 1243, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1265, 1266, 1283, 1287, 1331], "selector": [0, 37, 165, 173, 175, 179, 223, 230, 232, 266, 268, 273, 276, 278, 311, 459, 465, 564, 818, 830, 836, 845, 846, 849, 875, 901, 931], "function": [0, 37, 38, 40, 53, 54, 55, 56, 57, 58, 61, 70, 72, 91, 92, 109, 113, 115, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 140, 143, 144, 145, 146, 148, 157, 159, 161, 162, 169, 172, 178, 186, 217, 223, 231, 232, 236, 257, 268, 269, 270, 273, 275, 278, 279, 291, 297, 311, 322, 326, 360, 393, 394, 396, 433, 455, 457, 458, 480, 546, 554, 555, 556, 558, 570, 580, 581, 596, 600, 604, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 648, 720, 731, 735, 736, 747, 749, 750, 751, 754, 755, 756, 757, 767, 768, 770, 772, 773, 776, 779, 780, 781, 784, 786, 789, 790, 791, 793, 795, 796, 799, 803, 807, 809, 814, 818, 830, 840, 844, 850, 870, 871, 875, 879, 882, 888, 895, 903, 910, 913, 919, 931, 935, 943, 976, 990, 1011, 1012, 1054, 1076, 1077, 1079, 1080, 1097, 1168, 1176, 1194, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1219, 1222, 1229, 1234, 1309, 1310, 1312, 1314, 1331, 1340], "data": [0, 1, 2, 11, 19, 20, 22, 29, 32, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 53, 54, 55, 57, 60, 61, 62, 67, 68, 69, 71, 80, 81, 83, 84, 92, 97, 98, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 161, 167, 176, 179, 180, 192, 193, 194, 195, 196, 197, 198, 211, 212, 213, 215, 217, 230, 231, 235, 241, 242, 243, 244, 246, 254, 263, 268, 269, 270, 273, 275, 284, 288, 309, 311, 322, 323, 324, 328, 329, 330, 331, 332, 333, 336, 339, 340, 341, 342, 343, 345, 348, 350, 351, 352, 357, 358, 359, 361, 362, 364, 365, 366, 367, 368, 371, 372, 376, 379, 380, 381, 382, 394, 395, 396, 401, 402, 403, 404, 407, 408, 409, 411, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 433, 434, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 461, 472, 474, 475, 476, 480, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 503, 504, 508, 509, 511, 517, 523, 525, 533, 545, 547, 553, 558, 590, 591, 595, 596, 604, 606, 607, 610, 611, 612, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 646, 647, 648, 654, 657, 658, 659, 660, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 686, 687, 688, 689, 697, 698, 699, 700, 702, 704, 707, 718, 719, 720, 723, 724, 727, 730, 735, 737, 747, 758, 759, 760, 761, 762, 763, 764, 774, 775, 777, 778, 779, 780, 781, 791, 794, 804, 805, 806, 809, 814, 818, 830, 837, 838, 839, 840, 844, 847, 849, 850, 856, 857, 858, 859, 860, 861, 879, 884, 885, 906, 931, 940, 941, 953, 955, 956, 957, 958, 959, 961, 963, 964, 975, 977, 979, 980, 981, 985, 986, 988, 994, 995, 998, 1012, 1013, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1028, 1030, 1032, 1033, 1037, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1058, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1078, 1082, 1083, 1097, 1104, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1122, 1128, 1129, 1130, 1131, 1133, 1139, 1145, 1147, 1155, 1167, 1169, 1176, 1188, 1194, 1196, 1200, 1201, 1203, 1204, 1216, 1218, 1229, 1234, 1239, 1240, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1271, 1272, 1273, 1274, 1282, 1283, 1284, 1285, 1287, 1289, 1292, 1310, 1311, 1312, 1313, 1316, 1321, 1330, 1331, 1339], "type": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 43, 44, 45, 46, 47, 55, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 108, 110, 111, 112, 113, 114, 116, 120, 121, 122, 124, 125, 129, 130, 131, 132, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 162, 176, 179, 186, 192, 194, 195, 197, 198, 199, 212, 213, 217, 241, 246, 263, 268, 269, 272, 273, 276, 287, 311, 322, 324, 328, 329, 330, 331, 332, 333, 336, 341, 342, 343, 345, 348, 359, 360, 364, 365, 366, 367, 368, 371, 372, 373, 376, 379, 380, 381, 382, 394, 395, 401, 402, 404, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 459, 461, 472, 475, 478, 485, 486, 487, 488, 489, 490, 491, 492, 493, 504, 508, 509, 511, 517, 523, 525, 545, 546, 556, 558, 604, 606, 610, 611, 612, 614, 615, 616, 646, 647, 654, 657, 658, 659, 660, 662, 663, 664, 665, 667, 670, 671, 672, 686, 687, 688, 689, 697, 698, 702, 718, 719, 720, 727, 735, 737, 747, 758, 759, 760, 761, 762, 763, 764, 766, 774, 775, 777, 778, 779, 780, 781, 791, 794, 804, 805, 806, 809, 814, 818, 830, 839, 840, 847, 848, 849, 850, 857, 858, 860, 861, 865, 880, 884, 885, 892, 901, 910, 931, 940, 941, 953, 955, 956, 957, 958, 959, 961, 963, 964, 975, 976, 977, 979, 980, 981, 985, 986, 988, 995, 1012, 1013, 1018, 1019, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1078, 1082, 1095, 1104, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1122, 1128, 1129, 1130, 1131, 1133, 1139, 1145, 1147, 1167, 1168, 1188, 1194, 1200, 1201, 1203, 1204, 1229, 1239, 1240, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1252, 1255, 1256, 1257, 1271, 1272, 1273, 1274, 1282, 1283, 1287, 1310, 1311, 1313, 1322, 1331, 1339], "input": [0, 54, 60, 111, 113, 120, 121, 164, 173, 193, 196, 217, 221, 230, 236, 247, 248, 252, 256, 260, 274, 284, 285, 289, 311, 319, 370, 376, 456, 459, 471, 485, 550, 556, 557, 558, 568, 596, 611, 651, 667, 686, 693, 694, 695, 696, 698, 711, 722, 730, 732, 734, 735, 737, 740, 743, 744, 745, 753, 757, 764, 766, 774, 775, 778, 779, 780, 781, 783, 785, 788, 797, 800, 802, 808, 818, 830, 834, 845, 856, 859, 882, 886, 887, 888, 890, 894, 900, 906, 907, 911, 931, 935, 995, 1078, 1102, 1172, 1173, 1176, 1200, 1226, 1252, 1271, 1283, 1331], "output": [0, 9, 31, 34, 37, 38, 39, 40, 41, 43, 162, 164, 171, 194, 195, 197, 198, 211, 217, 221, 224, 230, 232, 241, 243, 247, 249, 260, 274, 280, 284, 311, 322, 324, 326, 348, 369, 370, 394, 456, 523, 546, 554, 555, 556, 558, 567, 570, 580, 604, 616, 623, 627, 630, 634, 654, 672, 721, 722, 727, 731, 732, 733, 734, 735, 745, 746, 759, 760, 779, 780, 781, 818, 830, 834, 843, 848, 857, 858, 860, 861, 870, 871, 875, 876, 884, 886, 888, 900, 906, 913, 919, 931, 940, 941, 943, 964, 1012, 1078, 1145, 1176, 1194, 1239, 1257, 1319, 1331], "config": [0, 54, 171, 247, 268, 284, 311, 656, 682, 760, 763, 764, 830, 839, 843, 886, 906, 931, 1241, 1267], "extend": [0, 111, 282, 311, 462, 818, 830, 935, 942, 1084, 1331], "plugin": [0, 818, 830], "sql": [0, 35, 47, 51, 122, 123, 213, 252, 311, 355, 538, 641, 777, 798, 818, 830, 890, 931, 971, 1160, 1226, 1331], "interfac": [0, 830], "except": [0, 143, 200, 214, 216, 261, 311, 667, 698, 766, 830, 866, 931, 936, 1096, 1127, 1252, 1283, 1300, 1311, 1321, 1331], "test": [0, 2, 35, 122, 123, 125, 131, 311, 830, 862, 869, 931], "metadata": [0, 136, 194, 195, 197, 198, 241, 311, 830, 857, 858, 860, 861, 884, 931], "These": [1, 37, 117, 122, 123, 159, 275, 311, 447, 817, 818, 935, 1054, 1068], "allow": [1, 9, 36, 37, 43, 44, 45, 46, 53, 92, 97, 109, 122, 125, 134, 137, 138, 139, 140, 147, 150, 151, 154, 161, 211, 214, 215, 242, 243, 245, 269, 270, 273, 276, 288, 311, 429, 436, 439, 533, 556, 558, 564, 609, 638, 697, 699, 700, 818, 865, 866, 870, 871, 875, 901, 908, 931, 935, 936, 1050, 1057, 1060, 1155, 1176, 1198, 1218, 1221, 1282, 1284, 1285, 1311, 1312, 1331, 1340], "you": [1, 11, 15, 37, 42, 46, 52, 54, 61, 62, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 125, 126, 129, 130, 134, 138, 140, 159, 180, 194, 195, 197, 198, 210, 211, 217, 228, 232, 241, 242, 243, 244, 257, 265, 268, 275, 297, 311, 314, 401, 425, 426, 429, 432, 433, 436, 439, 447, 456, 459, 465, 485, 516, 546, 556, 558, 609, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 656, 671, 680, 681, 682, 708, 742, 750, 759, 764, 768, 781, 791, 794, 809, 818, 840, 846, 857, 858, 860, 861, 862, 869, 884, 892, 895, 919, 931, 935, 936, 1018, 1046, 1047, 1053, 1054, 1057, 1060, 1068, 1083, 1102, 1138, 1176, 1198, 1241, 1256, 1265, 1266, 1267, 1285, 1309, 1321, 1331, 1335, 1340], "regist": [1, 47, 49, 50, 51, 52, 55, 56, 57, 58, 153, 155, 257, 311, 818, 895, 931, 935, 1339], "custom": [1, 28, 36, 37, 55, 56, 57, 58, 153, 155, 162, 171, 217, 232, 291, 297, 311, 326, 360, 401, 436, 439, 546, 554, 556, 558, 617, 618, 727, 735, 742, 779, 780, 781, 818, 843, 870, 871, 913, 919, 931, 943, 976, 1018, 1057, 1060, 1168, 1176, 1205, 1206, 1319, 1331, 1340], "dedic": [1, 109, 211, 243, 311, 936], "namespac": [1, 122, 310, 311, 708, 817, 830, 930, 1331, 1340], "underli": [1, 53, 68, 69, 71, 84, 92, 95, 101, 108, 110, 111, 112, 114, 122, 123, 125, 129, 130, 132, 138, 147, 150, 154, 179, 180, 211, 212, 243, 263, 269, 311, 365, 403, 404, 405, 409, 413, 415, 416, 417, 419, 420, 422, 424, 427, 430, 431, 432, 434, 448, 449, 450, 451, 609, 636, 655, 659, 666, 818, 849, 931, 936, 980, 989, 1020, 1021, 1022, 1026, 1030, 1032, 1033, 1037, 1039, 1040, 1043, 1045, 1048, 1051, 1052, 1053, 1055, 1069, 1070, 1071, 1072, 1083, 1198, 1216, 1229, 1240, 1244, 1251, 1305, 1311, 1331], "polar": [1, 311, 314, 817, 818, 824, 830, 931, 935, 936, 1331, 1335, 1339], "class": [1, 18, 53, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 147, 148, 244, 311, 805, 814, 818, 824, 830, 931, 1310, 1331, 1339], "without": [1, 38, 43, 44, 45, 46, 59, 60, 61, 70, 72, 115, 124, 127, 132, 133, 135, 136, 139, 140, 257, 268, 269, 273, 278, 279, 311, 326, 393, 394, 433, 480, 558, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 656, 682, 747, 795, 796, 797, 818, 839, 840, 895, 903, 931, 987, 990, 1011, 1012, 1054, 1097, 1194, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1241, 1267, 1309, 1310, 1311, 1314, 1331], "requir": [1, 36, 37, 54, 113, 122, 123, 143, 144, 145, 146, 164, 169, 242, 268, 269, 270, 273, 274, 311, 361, 455, 457, 458, 547, 558, 596, 620, 622, 624, 626, 628, 631, 633, 635, 643, 697, 699, 700, 724, 794, 818, 834, 841, 847, 894, 900, 905, 931, 977, 1075, 1077, 1079, 1080, 1169, 1228, 1282, 1284, 1285, 1311, 1312, 1316, 1331, 1335], "subclass": [1, 311], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 179, 181, 182, 213, 214, 228, 232, 242, 247, 248, 268, 273, 284, 285, 311, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 813, 814, 818, 819, 820, 823, 824, 825, 826, 827, 849, 851, 852, 865, 866, 881, 886, 887, 891, 906, 907, 931, 935, 936, 1011, 1018, 1021, 1022, 1039, 1050, 1068, 1078, 1085, 1086, 1090, 1134, 1138, 1144, 1161, 1165, 1227, 1240, 1246, 1251, 1275, 1301, 1331], "ar": [1, 11, 12, 18, 21, 31, 34, 36, 37, 43, 44, 45, 46, 52, 53, 54, 61, 62, 91, 92, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 148, 150, 151, 152, 154, 159, 161, 164, 169, 171, 175, 178, 181, 183, 185, 186, 192, 193, 194, 195, 196, 197, 198, 211, 213, 214, 215, 217, 223, 224, 230, 232, 241, 242, 243, 244, 247, 248, 250, 252, 256, 264, 268, 269, 270, 273, 274, 279, 280, 284, 285, 288, 289, 311, 322, 324, 339, 355, 360, 369, 370, 376, 384, 386, 387, 401, 433, 447, 452, 454, 455, 456, 457, 458, 463, 465, 485, 487, 490, 491, 494, 496, 497, 498, 501, 506, 538, 546, 556, 557, 591, 596, 604, 607, 610, 611, 612, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 641, 645, 648, 650, 651, 665, 667, 668, 670, 677, 678, 679, 680, 681, 686, 698, 702, 707, 711, 714, 721, 722, 731, 732, 734, 740, 743, 744, 745, 746, 749, 753, 757, 759, 760, 762, 763, 783, 785, 788, 797, 800, 802, 805, 806, 808, 810, 811, 813, 817, 818, 819, 820, 823, 824, 825, 826, 827, 830, 834, 839, 840, 843, 846, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 871, 875, 876, 880, 882, 884, 886, 887, 889, 890, 894, 900, 903, 906, 907, 908, 911, 931, 935, 936, 940, 941, 955, 971, 976, 987, 995, 1005, 1006, 1018, 1054, 1068, 1074, 1076, 1077, 1078, 1079, 1080, 1085, 1087, 1088, 1094, 1102, 1106, 1110, 1111, 1115, 1116, 1117, 1118, 1125, 1128, 1160, 1168, 1194, 1196, 1200, 1201, 1212, 1226, 1231, 1234, 1250, 1252, 1253, 1262, 1263, 1264, 1265, 1266, 1271, 1283, 1285, 1287, 1292, 1299, 1309, 1311, 1312, 1321, 1323, 1325, 1327, 1331, 1332, 1336, 1337, 1338, 1340], "all": [1, 5, 9, 14, 18, 21, 26, 31, 34, 36, 37, 43, 49, 54, 60, 67, 100, 108, 113, 120, 121, 124, 125, 126, 128, 131, 132, 134, 137, 138, 147, 148, 151, 154, 159, 163, 165, 171, 175, 182, 200, 206, 208, 210, 211, 212, 213, 215, 216, 221, 223, 227, 228, 232, 235, 242, 243, 244, 248, 255, 256, 260, 261, 266, 268, 269, 273, 276, 278, 279, 280, 285, 287, 311, 323, 325, 348, 363, 370, 382, 393, 399, 400, 401, 402, 459, 464, 470, 477, 478, 481, 483, 487, 491, 497, 498, 500, 504, 515, 516, 523, 542, 546, 555, 556, 576, 579, 580, 582, 583, 584, 585, 586, 587, 594, 602, 607, 611, 613, 618, 643, 649, 651, 657, 658, 664, 665, 667, 670, 675, 681, 685, 691, 692, 693, 694, 698, 713, 722, 732, 742, 750, 751, 752, 753, 756, 757, 759, 766, 768, 773, 774, 777, 785, 793, 800, 801, 802, 808, 818, 824, 830, 833, 836, 839, 840, 843, 846, 848, 850, 852, 865, 870, 871, 875, 880, 887, 892, 893, 894, 901, 903, 907, 908, 910, 931, 936, 964, 1011, 1013, 1016, 1017, 1018, 1019, 1096, 1104, 1122, 1127, 1137, 1138, 1145, 1164, 1168, 1196, 1200, 1206, 1235, 1242, 1243, 1249, 1250, 1252, 1255, 1260, 1266, 1270, 1276, 1277, 1278, 1279, 1283, 1300, 1311, 1331, 1339, 1340], "support": [1, 35, 36, 37, 42, 62, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 139, 147, 151, 154, 159, 211, 212, 213, 214, 218, 220, 225, 243, 244, 255, 256, 259, 265, 270, 273, 311, 456, 539, 596, 611, 612, 649, 651, 667, 680, 681, 682, 686, 698, 814, 818, 824, 865, 866, 893, 894, 931, 936, 1078, 1161, 1200, 1201, 1235, 1252, 1265, 1266, 1267, 1271, 1283, 1312, 1314, 1331, 1339], "target": [1, 35, 36, 37, 59, 125, 273, 311, 663, 697, 699, 700, 936, 1248, 1282, 1284, 1285], "thi": [1, 2, 5, 11, 13, 15, 31, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 60, 61, 62, 68, 69, 70, 71, 72, 84, 92, 108, 110, 111, 112, 113, 114, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 161, 162, 163, 164, 167, 169, 171, 175, 178, 180, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 217, 218, 220, 222, 223, 224, 225, 227, 228, 230, 233, 234, 235, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 255, 257, 258, 259, 262, 263, 265, 268, 269, 270, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 291, 292, 297, 310, 311, 322, 325, 326, 327, 336, 348, 354, 355, 356, 361, 369, 370, 372, 373, 376, 388, 389, 390, 391, 392, 393, 394, 396, 402, 403, 416, 425, 426, 429, 432, 433, 436, 439, 447, 450, 454, 456, 461, 471, 478, 480, 482, 483, 485, 488, 490, 492, 495, 500, 512, 516, 517, 523, 526, 533, 534, 535, 536, 537, 538, 540, 544, 546, 547, 551, 552, 554, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 570, 573, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 596, 602, 604, 607, 608, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 641, 642, 643, 644, 649, 650, 651, 654, 656, 657, 663, 668, 669, 673, 674, 675, 676, 677, 678, 679, 682, 684, 685, 691, 692, 693, 694, 695, 696, 701, 707, 709, 711, 713, 716, 717, 721, 722, 724, 725, 726, 727, 731, 735, 736, 744, 747, 749, 750, 754, 755, 756, 757, 767, 768, 770, 772, 773, 776, 777, 779, 781, 784, 786, 789, 790, 791, 795, 796, 797, 799, 803, 807, 808, 809, 814, 818, 830, 833, 834, 835, 838, 839, 840, 841, 843, 844, 846, 847, 848, 850, 856, 857, 858, 859, 860, 861, 863, 865, 866, 870, 871, 875, 876, 880, 882, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 899, 900, 901, 903, 905, 906, 907, 908, 909, 910, 913, 914, 919, 930, 931, 935, 936, 942, 943, 952, 964, 970, 971, 972, 977, 984, 986, 988, 989, 990, 995, 998, 1007, 1008, 1009, 1010, 1011, 1012, 1019, 1020, 1022, 1033, 1046, 1047, 1050, 1053, 1054, 1057, 1060, 1068, 1071, 1073, 1076, 1078, 1082, 1083, 1091, 1092, 1095, 1097, 1103, 1107, 1109, 1110, 1112, 1113, 1119, 1121, 1123, 1124, 1134, 1138, 1139, 1145, 1148, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1166, 1169, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1189, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1218, 1219, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1235, 1236, 1238, 1239, 1241, 1242, 1248, 1253, 1254, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1267, 1269, 1270, 1276, 1277, 1278, 1279, 1285, 1286, 1292, 1293, 1295, 1298, 1299, 1301, 1302, 1305, 1307, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1331, 1335, 1339, 1340], "featur": [1, 42, 59, 70, 72, 268, 273, 311], "i": [1, 2, 13, 15, 18, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 59, 60, 61, 62, 68, 69, 70, 71, 72, 84, 92, 94, 96, 97, 99, 104, 106, 108, 109, 110, 111, 112, 113, 114, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 156, 158, 159, 163, 164, 167, 171, 175, 177, 178, 180, 183, 187, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 209, 211, 212, 213, 214, 215, 216, 217, 220, 223, 224, 228, 230, 231, 232, 239, 241, 242, 243, 244, 245, 248, 249, 252, 255, 256, 257, 258, 259, 261, 263, 268, 269, 270, 273, 274, 275, 276, 278, 279, 280, 281, 285, 287, 288, 297, 310, 311, 319, 322, 324, 325, 326, 327, 337, 340, 347, 348, 355, 360, 369, 393, 394, 399, 400, 401, 402, 405, 415, 425, 426, 429, 433, 436, 447, 455, 456, 457, 458, 461, 465, 469, 478, 480, 482, 485, 501, 507, 515, 516, 519, 521, 523, 533, 538, 539, 541, 544, 546, 548, 551, 556, 558, 562, 564, 566, 567, 568, 570, 578, 596, 604, 607, 609, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 644, 645, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 675, 677, 678, 679, 680, 681, 682, 685, 686, 689, 691, 692, 693, 694, 697, 698, 699, 700, 702, 704, 707, 711, 721, 722, 727, 728, 731, 732, 733, 734, 736, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 759, 760, 762, 763, 768, 772, 773, 774, 775, 777, 778, 781, 784, 786, 789, 791, 794, 795, 796, 797, 799, 803, 805, 806, 807, 808, 809, 814, 818, 833, 834, 835, 838, 839, 840, 843, 846, 848, 850, 853, 856, 857, 858, 859, 860, 861, 864, 865, 866, 868, 870, 871, 875, 876, 880, 884, 887, 888, 890, 892, 893, 894, 895, 896, 900, 901, 903, 904, 907, 910, 913, 919, 931, 935, 936, 940, 941, 942, 943, 956, 963, 964, 971, 976, 987, 990, 995, 998, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1022, 1032, 1050, 1054, 1057, 1068, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1087, 1094, 1095, 1096, 1097, 1102, 1103, 1105, 1112, 1119, 1120, 1121, 1123, 1124, 1125, 1127, 1129, 1137, 1138, 1141, 1143, 1145, 1155, 1160, 1161, 1166, 1168, 1176, 1194, 1196, 1198, 1200, 1201, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1218, 1219, 1220, 1221, 1222, 1224, 1226, 1230, 1231, 1234, 1235, 1238, 1239, 1240, 1241, 1242, 1243, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1271, 1274, 1276, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1287, 1289, 1292, 1300, 1305, 1309, 1311, 1312, 1314, 1319, 1320, 1321, 1331, 1339, 1340], "primarili": 1, "intend": [1, 125, 143, 144, 145, 146, 707, 988, 1292], "us": [1, 8, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 36, 37, 40, 42, 43, 46, 47, 48, 49, 50, 52, 53, 54, 60, 61, 62, 69, 83, 91, 92, 109, 111, 112, 114, 116, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 162, 163, 164, 165, 171, 173, 175, 181, 182, 183, 186, 193, 194, 195, 196, 197, 198, 206, 208, 210, 211, 212, 214, 217, 218, 220, 223, 225, 227, 228, 230, 231, 232, 237, 241, 242, 243, 244, 245, 247, 248, 253, 256, 257, 258, 259, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 278, 279, 280, 281, 284, 285, 286, 287, 289, 297, 311, 314, 320, 322, 324, 326, 327, 336, 337, 360, 365, 366, 369, 370, 373, 377, 378, 393, 396, 399, 400, 408, 410, 414, 418, 421, 423, 428, 432, 433, 435, 436, 439, 447, 450, 452, 455, 456, 457, 458, 459, 463, 464, 465, 469, 480, 483, 484, 485, 501, 516, 533, 541, 546, 548, 556, 557, 558, 561, 579, 582, 584, 586, 587, 596, 604, 607, 609, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 640, 642, 643, 648, 650, 651, 653, 655, 656, 659, 660, 661, 662, 663, 664, 666, 671, 672, 680, 681, 682, 686, 688, 690, 693, 694, 695, 696, 697, 699, 700, 704, 707, 708, 711, 721, 722, 728, 729, 731, 732, 733, 734, 736, 740, 745, 746, 747, 748, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 768, 770, 774, 775, 777, 778, 781, 782, 783, 785, 787, 788, 791, 794, 795, 796, 797, 799, 800, 801, 802, 805, 806, 807, 808, 809, 814, 817, 818, 829, 830, 833, 834, 835, 836, 839, 840, 843, 844, 845, 846, 848, 850, 851, 852, 853, 856, 857, 858, 860, 861, 862, 866, 868, 869, 875, 884, 886, 887, 891, 894, 895, 896, 900, 901, 903, 904, 906, 907, 909, 910, 911, 919, 931, 936, 940, 941, 943, 972, 976, 980, 981, 988, 990, 996, 997, 1011, 1012, 1013, 1016, 1017, 1025, 1027, 1031, 1038, 1041, 1044, 1049, 1053, 1054, 1056, 1057, 1060, 1068, 1071, 1074, 1077, 1078, 1079, 1080, 1085, 1086, 1090, 1094, 1097, 1100, 1101, 1102, 1103, 1109, 1112, 1119, 1121, 1123, 1125, 1138, 1155, 1162, 1168, 1175, 1176, 1194, 1196, 1198, 1201, 1203, 1204, 1206, 1218, 1219, 1222, 1224, 1227, 1228, 1234, 1236, 1238, 1240, 1241, 1244, 1245, 1247, 1248, 1249, 1251, 1256, 1257, 1265, 1266, 1267, 1271, 1273, 1282, 1284, 1285, 1289, 1292, 1301, 1306, 1308, 1310, 1311, 1312, 1320, 1321, 1331, 1335, 1339, 1340], "librari": [1, 101, 122, 125, 556, 818, 935, 1340], "author": 1, "domain": [1, 664, 1249], "specif": [1, 31, 36, 37, 108, 110, 112, 114, 120, 123, 124, 125, 129, 130, 131, 135, 165, 211, 213, 268, 311, 436, 439, 697, 699, 700, 704, 727, 818, 836, 865, 931, 936, 1057, 1060, 1282, 1284, 1285, 1289, 1309, 1319, 1331, 1340], "capabl": [1, 37, 311], "which": [1, 7, 11, 21, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 56, 57, 58, 111, 113, 120, 121, 122, 123, 124, 125, 131, 132, 134, 135, 136, 139, 143, 144, 150, 153, 155, 164, 165, 171, 175, 180, 181, 193, 194, 195, 196, 197, 198, 204, 214, 241, 249, 268, 269, 274, 276, 280, 311, 322, 360, 401, 429, 433, 436, 447, 456, 462, 485, 487, 491, 494, 496, 497, 498, 546, 556, 558, 568, 570, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 679, 702, 742, 759, 760, 762, 763, 764, 805, 806, 808, 818, 834, 836, 843, 846, 848, 857, 858, 860, 861, 866, 884, 888, 900, 901, 931, 936, 976, 1018, 1050, 1054, 1057, 1068, 1078, 1083, 1084, 1102, 1106, 1111, 1115, 1116, 1117, 1118, 1168, 1222, 1264, 1287, 1309, 1311, 1331, 1339, 1340], "mai": [1, 36, 38, 43, 44, 45, 46, 60, 61, 62, 70, 72, 108, 110, 111, 112, 114, 120, 121, 122, 124, 126, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 143, 145, 171, 178, 180, 194, 214, 217, 241, 253, 257, 268, 270, 273, 278, 279, 280, 311, 326, 393, 394, 401, 402, 403, 416, 429, 433, 436, 439, 447, 459, 480, 519, 544, 546, 556, 558, 567, 604, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 642, 668, 669, 671, 742, 750, 751, 754, 755, 759, 760, 762, 763, 768, 793, 795, 796, 805, 806, 818, 839, 840, 843, 850, 857, 866, 870, 871, 884, 891, 895, 903, 909, 910, 913, 919, 931, 989, 990, 1011, 1012, 1013, 1018, 1019, 1020, 1033, 1050, 1054, 1057, 1060, 1068, 1076, 1083, 1097, 1141, 1176, 1194, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1227, 1253, 1254, 1256, 1285, 1309, 1312, 1314, 1331, 1340], "exist": [1, 35, 36, 37, 54, 96, 124, 135, 150, 275, 279, 284, 285, 311, 321, 364, 367, 368, 405, 432, 557, 818, 882, 903, 906, 907, 931, 936, 1022, 1053, 1175, 1331], "belong": [1, 194, 311, 857, 931], "core": [1, 311, 1340], "cannot": [1, 97, 98, 120, 121, 125, 126, 128, 131, 132, 156, 217, 244, 245, 269, 287, 297, 311, 365, 459, 533, 558, 638, 659, 688, 710, 781, 818, 892, 910, 919, 931, 936, 980, 1155, 1176, 1218, 1244, 1273, 1311, 1331], "overrid": [1, 37, 108, 110, 111, 112, 113, 114, 120, 122, 123, 125, 129, 130, 131, 147, 148, 154, 156, 311, 557, 818, 931, 1175, 1331], "str": [1, 3, 4, 6, 7, 10, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 69, 72, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 147, 148, 150, 153, 154, 155, 159, 164, 165, 168, 171, 172, 173, 174, 175, 176, 178, 179, 183, 184, 185, 186, 189, 190, 192, 193, 194, 195, 197, 198, 200, 202, 206, 208, 209, 211, 213, 214, 218, 220, 222, 223, 224, 225, 227, 228, 230, 232, 234, 236, 237, 239, 240, 241, 242, 243, 245, 246, 249, 250, 253, 255, 256, 257, 258, 259, 261, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 319, 320, 321, 343, 348, 360, 364, 365, 366, 367, 368, 370, 372, 383, 394, 396, 398, 406, 429, 432, 433, 436, 439, 447, 456, 459, 465, 467, 471, 472, 475, 482, 485, 510, 511, 521, 522, 523, 539, 543, 546, 555, 558, 567, 569, 570, 571, 573, 580, 581, 582, 583, 584, 585, 586, 587, 593, 596, 600, 602, 604, 610, 611, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 643, 650, 651, 708, 709, 710, 713, 722, 727, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 814, 818, 825, 834, 836, 839, 840, 841, 843, 844, 845, 846, 848, 849, 850, 853, 856, 857, 858, 860, 861, 863, 865, 866, 875, 876, 880, 882, 883, 884, 885, 888, 889, 891, 892, 893, 894, 895, 900, 901, 902, 903, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 935, 936, 939, 959, 964, 976, 981, 985, 986, 1012, 1013, 1023, 1050, 1053, 1054, 1057, 1060, 1068, 1078, 1086, 1132, 1133, 1134, 1145, 1168, 1185, 1186, 1194, 1199, 1200, 1222, 1223, 1293, 1295, 1296, 1306, 1307, 1308, 1309, 1319, 1331, 1336, 1339, 1340], "dt": [1, 54, 125, 131, 241, 280, 311, 616, 764, 818, 827, 884, 931, 936, 1338], "attempt": [1, 396, 818, 844, 931], "do": [1, 37, 43, 44, 45, 46, 54, 60, 61, 110, 111, 114, 120, 134, 143, 144, 145, 146, 171, 180, 194, 195, 197, 198, 210, 213, 214, 232, 241, 263, 275, 278, 311, 393, 401, 516, 556, 616, 692, 693, 694, 791, 794, 809, 818, 835, 839, 840, 843, 848, 857, 858, 860, 861, 866, 870, 871, 880, 884, 892, 931, 936, 1011, 1018, 1083, 1138, 1277, 1278, 1279, 1314, 1321, 1331], "so": [1, 122, 123, 134, 156, 192, 194, 195, 197, 198, 232, 241, 311, 337, 347, 396, 469, 485, 521, 546, 558, 616, 680, 681, 682, 692, 693, 694, 708, 818, 844, 857, 858, 860, 861, 884, 931, 936, 963, 1143, 1265, 1266, 1267, 1277, 1278, 1279], "rais": [1, 16, 17, 21, 36, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 120, 121, 125, 131, 134, 143, 145, 161, 232, 242, 269, 311, 347, 365, 401, 432, 433, 447, 519, 521, 544, 567, 604, 655, 659, 666, 679, 697, 699, 700, 702, 704, 761, 778, 818, 963, 980, 1018, 1053, 1054, 1068, 1141, 1143, 1166, 1194, 1240, 1244, 1251, 1264, 1282, 1284, 1285, 1287, 1289, 1311, 1321, 1331], "an": [1, 31, 34, 35, 36, 37, 43, 44, 45, 55, 57, 58, 70, 71, 92, 95, 97, 98, 101, 103, 108, 110, 111, 114, 120, 121, 122, 123, 124, 125, 127, 131, 134, 136, 137, 148, 150, 154, 165, 166, 167, 178, 181, 186, 194, 195, 197, 198, 210, 211, 212, 214, 217, 228, 232, 238, 239, 241, 242, 246, 257, 263, 269, 273, 275, 278, 279, 284, 287, 297, 311, 321, 344, 347, 359, 365, 371, 377, 378, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 405, 406, 429, 432, 436, 450, 456, 464, 465, 471, 472, 475, 500, 512, 513, 516, 519, 521, 544, 545, 546, 555, 556, 558, 568, 570, 579, 580, 603, 604, 612, 616, 617, 619, 621, 623, 625, 627, 630, 632, 634, 655, 659, 664, 666, 668, 697, 699, 700, 702, 704, 716, 723, 731, 737, 741, 759, 760, 762, 763, 765, 767, 770, 774, 775, 776, 777, 778, 790, 791, 793, 794, 797, 800, 805, 806, 808, 809, 814, 818, 836, 837, 838, 840, 841, 843, 847, 848, 850, 853, 857, 858, 860, 861, 866, 871, 880, 884, 885, 892, 895, 903, 905, 906, 908, 910, 919, 931, 935, 936, 960, 963, 975, 980, 985, 994, 996, 997, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1018, 1022, 1057, 1071, 1076, 1078, 1112, 1124, 1134, 1135, 1138, 1141, 1143, 1166, 1167, 1176, 1201, 1205, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1219, 1222, 1240, 1244, 1249, 1251, 1253, 1282, 1284, 1285, 1287, 1289, 1311, 1321, 1331, 1339], "attributeerror": 1, "howev": [1, 111, 122, 178, 217, 269, 311, 1076, 1331], "can": [1, 15, 28, 37, 42, 52, 53, 54, 60, 61, 68, 69, 71, 83, 91, 92, 111, 120, 121, 122, 125, 126, 131, 132, 134, 137, 139, 140, 148, 149, 150, 154, 156, 159, 164, 166, 175, 176, 186, 193, 194, 195, 196, 197, 198, 206, 208, 210, 217, 228, 232, 241, 243, 244, 247, 256, 268, 269, 273, 274, 275, 278, 284, 287, 297, 311, 314, 322, 326, 360, 370, 384, 387, 393, 396, 401, 425, 426, 429, 432, 433, 436, 439, 447, 456, 462, 465, 485, 500, 516, 546, 556, 558, 564, 567, 570, 576, 579, 580, 582, 584, 586, 587, 596, 602, 604, 609, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 640, 643, 645, 648, 651, 656, 665, 670, 680, 681, 682, 692, 693, 694, 697, 708, 713, 722, 740, 742, 758, 761, 768, 770, 774, 775, 781, 808, 814, 817, 818, 829, 834, 835, 839, 840, 841, 844, 846, 847, 848, 850, 857, 858, 860, 861, 884, 885, 886, 888, 892, 894, 895, 900, 905, 906, 909, 910, 931, 936, 943, 976, 1011, 1012, 1018, 1046, 1047, 1050, 1053, 1054, 1057, 1060, 1068, 1078, 1084, 1102, 1138, 1168, 1176, 1181, 1194, 1198, 1200, 1219, 1222, 1224, 1228, 1231, 1234, 1241, 1242, 1243, 1250, 1255, 1265, 1266, 1267, 1277, 1278, 1279, 1282, 1285, 1309, 1310, 1311, 1331, 1335, 1339], "other": [1, 21, 33, 37, 38, 42, 52, 61, 119, 120, 121, 122, 125, 134, 143, 144, 145, 146, 175, 177, 180, 183, 187, 213, 214, 223, 224, 242, 244, 247, 248, 273, 279, 282, 284, 285, 309, 311, 319, 323, 325, 336, 337, 376, 398, 453, 454, 465, 469, 474, 476, 485, 490, 503, 510, 534, 535, 536, 537, 553, 562, 566, 575, 577, 590, 591, 595, 611, 651, 711, 712, 720, 723, 730, 732, 734, 740, 743, 744, 745, 753, 757, 759, 764, 783, 785, 788, 797, 800, 802, 818, 830, 840, 846, 853, 865, 866, 875, 876, 886, 887, 903, 906, 907, 908, 931, 936, 942, 995, 1015, 1075, 1083, 1110, 1132, 1156, 1157, 1158, 1159, 1200, 1221, 1313, 1322, 1330, 1331], "onli": [1, 11, 14, 21, 31, 34, 35, 37, 43, 47, 49, 53, 54, 59, 62, 92, 120, 121, 122, 124, 125, 126, 128, 132, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 150, 154, 159, 162, 164, 175, 180, 194, 197, 199, 211, 214, 217, 218, 220, 225, 232, 241, 243, 244, 259, 265, 267, 268, 269, 274, 279, 280, 297, 311, 320, 322, 324, 326, 337, 369, 375, 376, 396, 401, 429, 437, 459, 468, 478, 500, 556, 558, 564, 579, 580, 581, 582, 583, 584, 585, 586, 587, 596, 602, 609, 612, 619, 621, 623, 625, 627, 630, 632, 634, 656, 682, 713, 721, 722, 725, 742, 759, 760, 781, 818, 834, 839, 844, 846, 857, 858, 860, 861, 862, 866, 869, 884, 900, 903, 919, 931, 935, 936, 940, 941, 942, 992, 995, 1012, 1018, 1050, 1083, 1089, 1095, 1112, 1176, 1194, 1198, 1201, 1241, 1267, 1305, 1308, 1311, 1331, 1339, 1340], "gener": [1, 122, 123, 141, 147, 148, 149, 150, 151, 152, 154, 161, 169, 232, 245, 266, 269, 275, 311, 533, 638, 644, 737, 759, 762, 774, 775, 777, 794, 805, 806, 818, 931, 1155, 1218, 1230, 1306, 1331, 1340], "userwarn": 1, "pl": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 94, 96, 97, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 156, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 314, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 936, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1262, 1263, 1265, 1266, 1267, 1268, 1271, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1298, 1299, 1300, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1331, 1335, 1339, 1340], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 53, 55, 56, 57, 58, 122, 148, 150, 154, 159, 231, 275, 311, 319, 600, 664, 694, 730, 780, 818, 840, 879, 931, 936, 1249, 1340], "__init__": [1, 53, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 147, 1339], "self": [1, 48, 49, 50, 52, 55, 56, 57, 58, 60, 61, 166, 167, 172, 180, 200, 202, 203, 204, 216, 218, 220, 222, 223, 225, 229, 230, 232, 234, 235, 237, 238, 239, 245, 254, 255, 257, 258, 259, 261, 266, 275, 277, 280, 281, 282, 286, 287, 288, 311, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 363, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 574, 575, 576, 577, 578, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 814, 818, 833, 834, 835, 836, 838, 839, 840, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 931, 942, 943, 985, 998, 1002, 1083, 1087, 1098, 1174, 1175, 1176, 1187, 1191, 1192, 1197, 1200, 1219, 1222, 1224, 1236, 1318, 1322, 1331], "_expr": [1, 56], "hello": [1, 21, 48, 51, 692, 693, 694, 936, 1145, 1277, 1278, 1279], "return": [1, 6, 7, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 99, 102, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 156, 157, 162, 164, 166, 168, 169, 170, 174, 176, 178, 179, 180, 181, 182, 185, 186, 188, 189, 192, 193, 194, 196, 197, 200, 201, 202, 207, 209, 210, 211, 212, 213, 215, 216, 217, 219, 221, 226, 227, 228, 230, 231, 232, 236, 241, 242, 243, 244, 245, 246, 249, 257, 260, 261, 262, 268, 269, 270, 273, 274, 275, 276, 280, 283, 284, 285, 292, 294, 296, 297, 300, 305, 311, 322, 324, 328, 329, 330, 331, 332, 333, 336, 337, 341, 342, 343, 345, 347, 348, 359, 364, 365, 366, 367, 368, 369, 370, 379, 380, 381, 382, 383, 394, 395, 401, 402, 404, 407, 408, 409, 411, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 433, 434, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 456, 461, 469, 472, 473, 475, 479, 480, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 504, 505, 508, 509, 511, 517, 519, 521, 522, 523, 525, 526, 533, 543, 544, 545, 552, 556, 557, 558, 568, 570, 571, 576, 600, 604, 606, 610, 611, 612, 614, 615, 638, 639, 645, 646, 647, 654, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 670, 671, 672, 673, 674, 676, 677, 678, 683, 684, 686, 687, 688, 689, 698, 702, 707, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 730, 731, 735, 737, 738, 739, 740, 741, 742, 747, 749, 758, 759, 760, 761, 762, 763, 764, 767, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 790, 791, 794, 797, 800, 803, 804, 805, 806, 808, 809, 818, 834, 837, 839, 840, 841, 842, 843, 847, 848, 850, 855, 857, 858, 860, 861, 862, 865, 868, 869, 871, 879, 880, 882, 884, 885, 888, 892, 898, 899, 900, 901, 905, 906, 907, 914, 916, 918, 922, 927, 931, 935, 936, 940, 941, 942, 950, 951, 953, 954, 955, 956, 957, 958, 959, 961, 963, 964, 975, 977, 979, 980, 981, 984, 987, 990, 994, 1002, 1012, 1013, 1018, 1019, 1021, 1024, 1025, 1026, 1028, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1054, 1055, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1076, 1078, 1082, 1083, 1091, 1094, 1096, 1097, 1104, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1122, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1139, 1141, 1143, 1144, 1145, 1147, 1148, 1155, 1165, 1166, 1167, 1174, 1175, 1176, 1181, 1188, 1194, 1200, 1201, 1202, 1203, 1204, 1218, 1220, 1221, 1231, 1239, 1240, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1268, 1269, 1271, 1272, 1273, 1274, 1283, 1287, 1292, 1300, 1302, 1305, 1312, 1315, 1317, 1318, 1319, 1322, 1331, 1339, 1340], "lit": [1, 321, 364, 485, 500, 579, 666, 750, 754, 768, 791, 794, 809, 818, 1086, 1331], "alia": [1, 13, 54, 56, 58, 90, 194, 216, 232, 237, 241, 277, 284, 287, 311, 319, 323, 364, 365, 366, 367, 368, 369, 383, 384, 385, 386, 387, 394, 397, 402, 403, 405, 406, 407, 408, 409, 411, 412, 413, 416, 417, 420, 422, 424, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 444, 446, 447, 448, 449, 450, 453, 454, 467, 469, 474, 476, 482, 485, 489, 493, 500, 503, 505, 529, 541, 548, 553, 558, 562, 564, 566, 568, 572, 575, 577, 579, 590, 591, 595, 597, 601, 604, 607, 609, 637, 639, 655, 656, 658, 659, 661, 663, 664, 666, 667, 671, 672, 682, 683, 686, 687, 688, 689, 690, 695, 696, 698, 708, 709, 710, 712, 720, 721, 723, 729, 730, 737, 738, 739, 743, 744, 745, 759, 762, 764, 765, 768, 769, 774, 777, 780, 781, 793, 800, 805, 808, 818, 857, 863, 869, 884, 902, 906, 910, 931, 1012, 1019, 1020, 1023, 1026, 1028, 1029, 1030, 1036, 1037, 1040, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1057, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1127, 1194, 1199, 1248, 1249, 1273, 1274, 1331], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 21, 48, 51, 656, 682, 692, 693, 694, 705, 936, 1145, 1241, 1267, 1277, 1278, 1279, 1290], "select": [1, 9, 35, 47, 48, 49, 54, 55, 56, 57, 94, 118, 120, 121, 122, 123, 124, 126, 128, 132, 134, 140, 149, 163, 209, 210, 214, 217, 228, 231, 242, 248, 255, 257, 271, 277, 280, 287, 311, 318, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 345, 350, 351, 352, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 372, 374, 375, 379, 380, 381, 382, 393, 395, 397, 398, 399, 400, 403, 405, 406, 416, 425, 426, 429, 432, 440, 441, 442, 443, 444, 445, 446, 447, 450, 452, 455, 457, 458, 459, 460, 461, 462, 466, 468, 470, 473, 477, 478, 480, 481, 482, 483, 486, 487, 491, 499, 500, 501, 502, 504, 516, 517, 546, 549, 550, 551, 552, 556, 558, 559, 560, 561, 564, 574, 576, 578, 579, 581, 583, 585, 588, 589, 593, 594, 595, 596, 598, 599, 603, 605, 606, 607, 608, 609, 610, 612, 613, 614, 618, 629, 636, 638, 639, 640, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 662, 663, 664, 665, 666, 697, 708, 710, 714, 718, 719, 721, 722, 724, 725, 726, 727, 728, 731, 733, 736, 738, 739, 740, 741, 744, 746, 747, 748, 749, 752, 763, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 782, 784, 786, 787, 789, 790, 793, 794, 798, 799, 800, 801, 803, 807, 814, 818, 833, 841, 866, 879, 887, 888, 893, 895, 902, 908, 910, 931, 936, 1053, 1090, 1138, 1219, 1222, 1235, 1255, 1282, 1301, 1331, 1339], "shape": [1, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 105, 108, 109, 110, 111, 112, 113, 114, 115, 120, 129, 130, 134, 140, 147, 150, 154, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 186, 188, 189, 191, 193, 194, 199, 200, 202, 204, 205, 206, 208, 209, 210, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 245, 247, 252, 255, 256, 257, 258, 259, 260, 261, 264, 266, 267, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 574, 575, 576, 577, 578, 579, 580, 582, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 833, 834, 836, 837, 839, 840, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 886, 888, 890, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 936, 938, 939, 942, 944, 945, 946, 947, 948, 949, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 991, 992, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1036, 1037, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1106, 1108, 1110, 1111, 1114, 1115, 1116, 1117, 1118, 1122, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1181, 1187, 1188, 1190, 1191, 1192, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1226, 1228, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1262, 1263, 1265, 1266, 1267, 1268, 1271, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1298, 1300, 1303, 1304, 1306, 1307, 1308, 1313, 1315, 1316, 1317, 1318, 1319, 1322, 1331, 1339], "3": [1, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 92, 94, 97, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 125, 129, 130, 131, 134, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 183, 186, 188, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 314, 319, 320, 321, 322, 324, 336, 337, 338, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 382, 383, 384, 385, 386, 387, 393, 394, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 412, 413, 415, 416, 417, 419, 420, 422, 424, 427, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 500, 501, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 549, 550, 551, 552, 553, 555, 556, 558, 575, 576, 577, 578, 579, 580, 582, 584, 586, 587, 590, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 648, 650, 651, 652, 655, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 671, 672, 675, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 698, 699, 704, 708, 709, 710, 711, 712, 713, 715, 721, 722, 725, 726, 727, 729, 730, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 936, 938, 939, 942, 944, 946, 947, 948, 950, 951, 952, 953, 954, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 989, 991, 992, 993, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1022, 1023, 1026, 1029, 1030, 1032, 1034, 1035, 1036, 1039, 1042, 1043, 1045, 1051, 1053, 1054, 1055, 1057, 1059, 1060, 1061, 1063, 1064, 1066, 1068, 1070, 1071, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1167, 1168, 1169, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1228, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1242, 1244, 1245, 1246, 1248, 1249, 1250, 1252, 1253, 1256, 1257, 1260, 1265, 1266, 1267, 1268, 1270, 1271, 1275, 1276, 1283, 1284, 1289, 1293, 1295, 1296, 1298, 1299, 1300, 1303, 1304, 1305, 1306, 1310, 1311, 1312, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1331, 1339, 1340], "1": [1, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 62, 63, 79, 83, 94, 96, 97, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 124, 125, 126, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 150, 154, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 186, 188, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 314, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 369, 370, 371, 372, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 680, 681, 688, 689, 690, 692, 693, 694, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 814, 818, 833, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 865, 866, 867, 869, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 936, 938, 939, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 984, 985, 989, 991, 992, 993, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1130, 1131, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1248, 1250, 1251, 1253, 1255, 1256, 1257, 1265, 1266, 1273, 1274, 1292, 1293, 1295, 1296, 1298, 1299, 1300, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1331, 1335, 1339, 1340], "2": [1, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 83, 94, 97, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 129, 130, 134, 140, 141, 142, 143, 144, 145, 146, 147, 150, 152, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188, 189, 190, 191, 192, 193, 194, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 314, 318, 319, 320, 321, 323, 325, 327, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 369, 370, 371, 374, 375, 376, 381, 382, 383, 384, 385, 386, 387, 393, 394, 397, 398, 401, 402, 404, 405, 406, 407, 408, 409, 411, 415, 419, 424, 425, 426, 429, 430, 431, 432, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 571, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 648, 649, 650, 651, 652, 654, 656, 658, 659, 660, 661, 663, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 686, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 718, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 785, 786, 787, 789, 790, 793, 797, 798, 799, 800, 801, 803, 806, 807, 808, 814, 818, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863, 865, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 936, 938, 939, 942, 945, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 984, 989, 991, 992, 993, 994, 998, 999, 1001, 1002, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1022, 1024, 1025, 1028, 1030, 1034, 1035, 1036, 1039, 1042, 1043, 1045, 1046, 1047, 1052, 1053, 1054, 1058, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1125, 1126, 1127, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1228, 1230, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1243, 1248, 1250, 1251, 1252, 1253, 1255, 1257, 1265, 1266, 1273, 1274, 1277, 1278, 1279, 1282, 1283, 1285, 1286, 1287, 1288, 1290, 1291, 1293, 1295, 1296, 1298, 1299, 1300, 1303, 1305, 1306, 1307, 1308, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1331, 1335, 1339, 1340], "column_0": [1, 217, 275, 311], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 37, 55, 212, 311, 662, 688, 689, 1247, 1273, 1274], "splitfram": [1, 55], "df": [1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 55, 56, 79, 94, 96, 109, 110, 111, 112, 113, 114, 115, 121, 122, 123, 134, 147, 148, 150, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 186, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 255, 256, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 314, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 369, 370, 371, 372, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 814, 818, 857, 884, 888, 902, 903, 916, 919, 927, 931, 936, 1053, 1078, 1255, 1273, 1274, 1307, 1331, 1340], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 14, 36, 37, 47, 51, 54, 55, 57, 60, 61, 63, 69, 83, 108, 110, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 148, 149, 150, 154, 168, 173, 176, 178, 179, 183, 191, 193, 194, 202, 211, 227, 230, 242, 243, 244, 247, 256, 264, 265, 273, 275, 276, 277, 278, 284, 289, 290, 311, 320, 348, 359, 360, 361, 394, 401, 461, 467, 472, 481, 490, 554, 556, 558, 568, 569, 596, 604, 610, 612, 617, 618, 619, 621, 623, 625, 627, 630, 632, 634, 650, 651, 662, 664, 687, 708, 710, 716, 720, 740, 742, 744, 760, 763, 765, 773, 775, 778, 781, 798, 800, 806, 818, 841, 847, 849, 853, 856, 857, 886, 894, 901, 902, 906, 908, 911, 912, 931, 936, 964, 975, 976, 977, 993, 1012, 1018, 1076, 1082, 1087, 1090, 1092, 1097, 1098, 1110, 1176, 1194, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1241, 1247, 1249, 1267, 1272, 1301, 1310, 1313, 1331, 1340], "with_row_index": [1, 286, 311, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 818, 909, 931, 1219, 1331], "name": [1, 19, 23, 25, 32, 34, 35, 37, 43, 48, 49, 50, 51, 52, 55, 56, 57, 58, 62, 83, 96, 108, 110, 111, 112, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 145, 146, 147, 148, 150, 153, 154, 155, 164, 165, 168, 173, 174, 175, 179, 183, 184, 185, 189, 190, 192, 193, 196, 209, 210, 211, 213, 214, 217, 219, 221, 223, 224, 226, 230, 232, 236, 242, 243, 244, 246, 247, 248, 249, 256, 257, 260, 264, 266, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 284, 285, 286, 287, 288, 289, 296, 311, 321, 326, 360, 364, 365, 367, 368, 370, 394, 436, 439, 459, 465, 485, 494, 496, 497, 498, 500, 546, 555, 558, 563, 565, 567, 569, 572, 596, 602, 604, 613, 651, 664, 665, 680, 681, 708, 710, 711, 713, 722, 727, 731, 732, 733, 734, 736, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 752, 753, 756, 757, 766, 767, 772, 773, 776, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 795, 796, 797, 799, 800, 801, 802, 803, 807, 808, 814, 818, 834, 836, 841, 845, 846, 849, 853, 856, 859, 865, 866, 875, 876, 882, 885, 886, 887, 888, 894, 895, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 918, 931, 935, 936, 939, 976, 994, 1012, 1057, 1060, 1168, 1194, 1199, 1248, 1249, 1250, 1265, 1266, 1293, 1296, 1306, 1307, 1312, 1319, 1331, 1339, 1340], "n": [1, 13, 14, 18, 26, 34, 41, 43, 49, 50, 55, 56, 57, 58, 69, 71, 117, 120, 121, 125, 130, 134, 150, 162, 166, 180, 188, 194, 200, 211, 212, 216, 217, 243, 244, 245, 252, 253, 258, 261, 262, 265, 267, 281, 294, 296, 305, 311, 327, 355, 360, 369, 370, 393, 397, 401, 403, 405, 412, 438, 450, 462, 465, 473, 479, 505, 514, 520, 522, 533, 534, 538, 541, 543, 546, 548, 597, 600, 610, 630, 631, 634, 635, 638, 641, 642, 648, 653, 667, 671, 672, 680, 688, 689, 692, 693, 698, 700, 715, 717, 721, 722, 723, 727, 728, 730, 746, 748, 759, 760, 761, 762, 763, 764, 770, 772, 790, 791, 794, 795, 796, 799, 803, 807, 809, 818, 837, 839, 855, 857, 862, 869, 890, 891, 896, 898, 899, 904, 916, 918, 927, 931, 936, 971, 976, 984, 994, 1011, 1014, 1018, 1020, 1022, 1029, 1059, 1071, 1083, 1084, 1091, 1096, 1127, 1136, 1142, 1144, 1155, 1156, 1160, 1165, 1168, 1190, 1213, 1215, 1218, 1226, 1227, 1234, 1238, 1252, 1256, 1257, 1265, 1273, 1274, 1283, 1285, 1300, 1302, 1308, 1315, 1319, 1320, 1331, 1339, 1340], "filter": [1, 55, 124, 134, 135, 140, 175, 206, 207, 208, 213, 232, 297, 311, 567, 569, 661, 690, 729, 758, 761, 768, 808, 818, 846, 850, 863, 865, 895, 919, 931, 936, 1222, 1331], "col": [1, 13, 34, 37, 43, 54, 55, 56, 57, 112, 114, 134, 148, 150, 183, 193, 194, 207, 209, 217, 228, 231, 232, 241, 242, 247, 256, 268, 273, 277, 278, 284, 289, 311, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 379, 380, 381, 383, 384, 385, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 480, 482, 483, 484, 485, 486, 489, 490, 493, 494, 496, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 581, 583, 585, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 714, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 736, 740, 741, 743, 744, 745, 747, 749, 752, 758, 761, 764, 768, 769, 770, 771, 772, 773, 782, 784, 786, 787, 789, 792, 793, 799, 801, 803, 804, 807, 808, 818, 853, 856, 857, 863, 879, 884, 886, 894, 895, 902, 906, 908, 911, 931, 936, 1050, 1053, 1138, 1201, 1219, 1222, 1255, 1282, 1331, 1340], "0": [1, 8, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 36, 37, 40, 42, 46, 47, 52, 54, 55, 56, 58, 62, 70, 79, 92, 109, 120, 121, 122, 123, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 142, 147, 148, 149, 150, 151, 152, 154, 157, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 176, 177, 181, 182, 184, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 203, 204, 205, 209, 211, 212, 213, 215, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 232, 233, 234, 237, 238, 239, 241, 243, 244, 245, 246, 247, 249, 253, 255, 256, 257, 258, 259, 260, 262, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 280, 281, 284, 286, 287, 289, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 311, 318, 320, 321, 323, 326, 328, 329, 330, 331, 332, 333, 336, 337, 338, 341, 342, 344, 347, 357, 360, 362, 369, 370, 371, 374, 375, 377, 378, 379, 380, 381, 388, 389, 390, 391, 392, 393, 394, 395, 399, 400, 401, 407, 408, 410, 413, 414, 417, 418, 420, 421, 422, 423, 427, 428, 432, 433, 434, 435, 437, 442, 443, 445, 446, 447, 450, 453, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 468, 469, 471, 473, 474, 476, 478, 480, 483, 484, 487, 488, 491, 492, 494, 495, 496, 497, 498, 500, 501, 503, 508, 509, 512, 513, 516, 519, 520, 521, 526, 528, 529, 541, 544, 546, 548, 549, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 564, 568, 573, 574, 575, 577, 579, 588, 589, 590, 591, 592, 594, 595, 597, 600, 601, 602, 604, 605, 606, 607, 611, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 643, 645, 646, 647, 648, 652, 653, 657, 658, 662, 663, 664, 666, 669, 673, 674, 675, 676, 679, 684, 685, 691, 697, 700, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 729, 731, 735, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 750, 754, 755, 756, 757, 759, 761, 765, 768, 774, 775, 777, 779, 781, 784, 785, 786, 790, 792, 793, 804, 805, 806, 807, 808, 809, 814, 818, 833, 834, 836, 837, 838, 842, 843, 845, 847, 848, 851, 852, 855, 856, 857, 858, 859, 860, 861, 864, 865, 868, 870, 871, 874, 878, 880, 881, 884, 885, 886, 891, 892, 894, 895, 896, 899, 900, 904, 906, 908, 909, 910, 911, 913, 914, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 931, 936, 943, 944, 945, 946, 947, 948, 949, 950, 952, 954, 957, 963, 973, 976, 978, 985, 988, 989, 991, 992, 994, 996, 997, 999, 1000, 1001, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1025, 1027, 1030, 1031, 1035, 1036, 1037, 1038, 1040, 1041, 1043, 1044, 1048, 1049, 1053, 1054, 1055, 1056, 1063, 1064, 1066, 1067, 1068, 1071, 1074, 1077, 1078, 1079, 1080, 1085, 1089, 1091, 1094, 1095, 1097, 1100, 1101, 1103, 1106, 1107, 1109, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1121, 1123, 1124, 1125, 1130, 1131, 1134, 1135, 1138, 1141, 1142, 1143, 1148, 1150, 1151, 1163, 1166, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1178, 1179, 1190, 1194, 1195, 1196, 1200, 1204, 1205, 1206, 1208, 1209, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1220, 1221, 1223, 1227, 1231, 1232, 1233, 1234, 1237, 1238, 1242, 1243, 1247, 1248, 1249, 1251, 1254, 1255, 1258, 1259, 1260, 1261, 1264, 1269, 1270, 1276, 1282, 1285, 1301, 1302, 1303, 1304, 1306, 1309, 1310, 1311, 1312, 1313, 1314, 1318, 1320, 1321, 1331, 1340], "drop": [1, 111, 174, 175, 217, 276, 284, 311, 397, 399, 400, 514, 515, 604, 818, 846, 901, 906, 931, 1014, 1016, 1017, 1136, 1137, 1194, 1331], "aaa": [1, 37, 311, 655, 666, 708, 710, 936, 1240, 1251], "bbb": [1, 37, 311, 708, 710, 936], "ccc": [1, 37, 311, 708, 710, 936], "ddd": [1, 37, 311, 708, 710], "eee": [1, 37, 311, 936], "fff": 1, "schema": [1, 15, 29, 32, 35, 36, 47, 55, 56, 57, 62, 103, 104, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 127, 129, 130, 131, 132, 133, 134, 138, 139, 162, 166, 167, 176, 178, 212, 217, 224, 228, 269, 273, 311, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 408, 545, 546, 567, 581, 583, 585, 668, 669, 730, 800, 818, 837, 838, 841, 847, 870, 871, 876, 888, 905, 913, 919, 931, 936, 998, 1253, 1254, 1331], "txt": [1, 13, 134, 655, 666, 1251], "string": [1, 3, 4, 6, 7, 13, 15, 16, 17, 21, 32, 34, 35, 36, 37, 40, 41, 43, 47, 53, 66, 69, 72, 83, 90, 91, 92, 97, 111, 115, 120, 121, 122, 123, 134, 143, 144, 145, 146, 147, 154, 158, 164, 165, 176, 178, 186, 192, 193, 194, 196, 214, 230, 232, 241, 244, 246, 247, 248, 249, 256, 267, 268, 274, 275, 278, 280, 284, 285, 288, 289, 311, 319, 343, 348, 365, 366, 367, 370, 373, 429, 433, 436, 439, 447, 456, 459, 467, 471, 485, 523, 570, 571, 596, 600, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 651, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 707, 709, 711, 722, 730, 732, 734, 740, 743, 744, 745, 753, 757, 759, 760, 762, 763, 769, 783, 785, 788, 797, 800, 802, 805, 806, 808, 818, 830, 834, 836, 847, 848, 856, 857, 859, 866, 884, 885, 886, 887, 888, 894, 900, 906, 907, 911, 931, 936, 964, 980, 981, 982, 987, 988, 1050, 1054, 1057, 1060, 1068, 1078, 1102, 1123, 1145, 1200, 1239, 1240, 1241, 1243, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1295, 1308, 1309, 1331, 1340], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 911, 912, 915, 917, 920, 921, 922, 923, 924, 925, 926], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 13, 57, 60, 61, 194, 231, 237, 241, 273, 278, 285, 311, 319, 321, 337, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 353, 354, 355, 356, 360, 365, 366, 371, 376, 383, 384, 385, 386, 387, 394, 397, 401, 402, 404, 407, 408, 409, 411, 412, 413, 415, 417, 419, 420, 422, 424, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 448, 449, 451, 453, 454, 456, 463, 464, 469, 474, 476, 478, 483, 484, 485, 489, 490, 493, 494, 496, 497, 498, 500, 503, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 553, 555, 558, 575, 577, 579, 580, 582, 584, 586, 587, 590, 591, 592, 596, 597, 600, 601, 602, 604, 607, 611, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 641, 655, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 698, 701, 702, 703, 705, 706, 707, 709, 711, 712, 713, 720, 723, 730, 732, 734, 742, 743, 745, 750, 751, 753, 758, 760, 761, 765, 775, 780, 783, 785, 788, 798, 802, 804, 806, 808, 814, 818, 839, 840, 848, 850, 857, 863, 879, 880, 884, 892, 907, 931, 936, 1012, 1053, 1194, 1331], "tp": [1, 57], "cast": [1, 36, 56, 57, 108, 110, 111, 114, 143, 144, 145, 146, 186, 194, 195, 197, 198, 231, 241, 268, 269, 273, 284, 311, 325, 386, 387, 403, 436, 439, 450, 595, 600, 609, 616, 668, 669, 670, 707, 714, 720, 745, 798, 818, 857, 858, 860, 861, 879, 884, 906, 931, 935, 936, 988, 990, 1005, 1006, 1020, 1057, 1060, 1071, 1198, 1253, 1254, 1255, 1292, 1299, 1307, 1311, 1313, 1314, 1331], "int64": [1, 36, 37, 56, 57, 62, 63, 83, 97, 120, 129, 176, 186, 194, 195, 197, 198, 231, 241, 246, 249, 263, 270, 311, 341, 342, 344, 345, 350, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 386, 387, 440, 441, 442, 443, 444, 445, 446, 450, 456, 459, 556, 558, 581, 583, 585, 600, 609, 616, 668, 702, 714, 720, 737, 766, 774, 775, 778, 794, 800, 818, 847, 857, 858, 860, 861, 879, 884, 885, 888, 931, 936, 957, 958, 960, 961, 966, 967, 968, 969, 970, 971, 972, 973, 974, 977, 978, 1005, 1006, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1073, 1078, 1176, 1198, 1221, 1287, 1299, 1311, 1312, 1313, 1314, 1331], "int8": [1, 57, 83, 186, 311, 359, 360, 386, 387, 409, 413, 422, 424, 431, 434, 448, 449, 545, 714, 791, 794, 809, 818, 975, 976, 1005, 1006, 1014, 1026, 1030, 1043, 1045, 1052, 1055, 1069, 1070, 1167, 1202, 1299, 1311, 1318, 1331], "int16": [1, 57, 273, 311, 386, 387, 430, 714, 818, 936, 1005, 1006, 1051, 1299, 1308, 1331], "int32": [1, 57, 62, 108, 111, 147, 149, 150, 194, 195, 197, 198, 212, 241, 268, 311, 346, 347, 349, 371, 404, 416, 417, 419, 420, 427, 451, 456, 614, 616, 720, 794, 818, 857, 858, 860, 861, 884, 931, 936, 959, 962, 963, 965, 1021, 1033, 1037, 1039, 1040, 1048, 1072, 1078, 1174, 1203, 1313, 1314, 1331], "b": [1, 11, 32, 34, 36, 38, 39, 42, 49, 50, 52, 57, 62, 83, 94, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 125, 161, 163, 164, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 188, 190, 191, 192, 193, 194, 199, 200, 202, 204, 206, 208, 209, 210, 211, 212, 213, 215, 218, 220, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 236, 239, 240, 242, 243, 244, 245, 246, 247, 252, 255, 256, 257, 258, 259, 261, 263, 264, 266, 267, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 311, 319, 321, 322, 324, 325, 336, 338, 343, 348, 363, 364, 365, 366, 367, 368, 370, 371, 382, 394, 398, 436, 439, 459, 461, 463, 464, 465, 467, 470, 477, 478, 481, 483, 484, 485, 487, 491, 494, 496, 497, 498, 500, 504, 510, 516, 523, 534, 535, 536, 537, 555, 556, 558, 563, 576, 579, 580, 581, 582, 583, 584, 585, 593, 594, 596, 600, 602, 604, 607, 611, 613, 615, 643, 649, 651, 659, 662, 666, 668, 680, 681, 708, 709, 713, 722, 725, 729, 731, 732, 733, 734, 736, 740, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 765, 766, 767, 768, 769, 772, 773, 774, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 795, 796, 799, 800, 801, 802, 803, 807, 818, 833, 834, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 865, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 931, 936, 939, 942, 964, 979, 980, 981, 982, 983, 987, 989, 990, 1012, 1015, 1057, 1060, 1074, 1075, 1076, 1083, 1086, 1102, 1110, 1123, 1132, 1156, 1157, 1158, 1159, 1194, 1199, 1244, 1247, 1251, 1253, 1265, 1266, 1293, 1295, 1296, 1298, 1312, 1317, 1331, 1339], "4": [1, 9, 14, 18, 26, 32, 34, 36, 37, 38, 39, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 108, 109, 110, 111, 112, 113, 114, 115, 125, 134, 142, 154, 161, 163, 164, 165, 166, 167, 170, 172, 175, 179, 180, 181, 182, 186, 188, 189, 191, 192, 193, 194, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 219, 220, 221, 223, 224, 226, 227, 228, 230, 231, 232, 233, 237, 241, 243, 244, 251, 252, 256, 260, 261, 263, 264, 265, 266, 269, 272, 274, 275, 277, 278, 279, 280, 282, 283, 284, 286, 287, 289, 290, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 314, 318, 319, 320, 321, 323, 325, 338, 345, 346, 347, 349, 350, 351, 352, 353, 355, 357, 358, 359, 360, 362, 363, 369, 370, 371, 374, 375, 376, 382, 383, 386, 387, 393, 395, 398, 405, 408, 409, 419, 430, 431, 432, 433, 434, 436, 439, 441, 444, 446, 447, 449, 453, 454, 456, 460, 461, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 497, 498, 500, 503, 504, 505, 513, 514, 515, 516, 517, 519, 520, 522, 531, 533, 534, 535, 536, 537, 538, 539, 543, 545, 550, 553, 555, 556, 558, 575, 577, 579, 580, 582, 584, 586, 587, 590, 591, 592, 595, 596, 598, 599, 600, 601, 602, 605, 607, 611, 612, 613, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 639, 641, 645, 649, 650, 651, 652, 655, 658, 664, 666, 667, 671, 672, 677, 678, 680, 681, 686, 687, 688, 689, 695, 696, 697, 698, 702, 707, 708, 710, 711, 712, 713, 715, 720, 721, 722, 723, 729, 730, 732, 734, 736, 738, 739, 740, 741, 743, 745, 746, 748, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 765, 767, 768, 772, 774, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 814, 818, 833, 834, 836, 837, 838, 839, 840, 842, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 862, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 884, 890, 892, 893, 894, 895, 896, 897, 898, 900, 902, 903, 904, 905, 906, 909, 910, 911, 912, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 936, 942, 945, 952, 959, 961, 962, 963, 965, 966, 967, 968, 969, 971, 973, 974, 975, 976, 977, 978, 984, 992, 993, 995, 1002, 1011, 1013, 1015, 1025, 1030, 1037, 1039, 1040, 1043, 1045, 1046, 1047, 1048, 1052, 1053, 1054, 1057, 1060, 1062, 1065, 1067, 1068, 1069, 1070, 1075, 1078, 1082, 1083, 1085, 1086, 1090, 1091, 1092, 1096, 1097, 1100, 1101, 1102, 1104, 1110, 1115, 1116, 1117, 1118, 1122, 1127, 1135, 1136, 1137, 1138, 1139, 1144, 1149, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1167, 1182, 1185, 1186, 1187, 1190, 1191, 1192, 1196, 1197, 1200, 1201, 1204, 1209, 1211, 1212, 1213, 1214, 1215, 1218, 1220, 1226, 1228, 1231, 1234, 1235, 1236, 1240, 1243, 1249, 1251, 1252, 1256, 1257, 1262, 1263, 1271, 1273, 1274, 1280, 1281, 1282, 1283, 1287, 1292, 1293, 1296, 1298, 1300, 1308, 1311, 1313, 1315, 1322, 1331, 1335, 1340], "c": [1, 11, 32, 34, 36, 38, 39, 42, 49, 50, 52, 55, 57, 62, 109, 111, 113, 115, 125, 134, 161, 164, 165, 166, 167, 168, 170, 173, 174, 175, 176, 177, 179, 183, 186, 190, 191, 192, 193, 194, 200, 202, 204, 212, 213, 215, 218, 220, 222, 223, 225, 227, 228, 229, 230, 232, 233, 234, 236, 239, 240, 242, 245, 246, 247, 255, 256, 257, 258, 259, 261, 263, 266, 267, 268, 269, 270, 271, 274, 278, 279, 281, 282, 284, 289, 293, 294, 295, 298, 299, 301, 304, 305, 311, 319, 321, 322, 324, 326, 343, 363, 370, 394, 465, 477, 485, 500, 510, 523, 555, 558, 564, 579, 580, 594, 596, 600, 604, 643, 688, 697, 722, 725, 732, 734, 736, 740, 743, 745, 746, 747, 748, 750, 751, 753, 767, 768, 769, 772, 773, 776, 777, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 799, 801, 802, 803, 807, 814, 818, 834, 836, 837, 838, 839, 840, 841, 842, 845, 846, 847, 848, 849, 850, 853, 856, 857, 865, 868, 875, 878, 880, 882, 883, 885, 886, 892, 893, 894, 895, 900, 903, 906, 908, 911, 915, 916, 917, 920, 921, 923, 926, 927, 931, 935, 936, 989, 1012, 1102, 1123, 1132, 1194, 1273, 1282, 1296, 1317, 1331], "5": [1, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 34, 36, 38, 39, 42, 50, 52, 54, 55, 57, 58, 62, 108, 111, 112, 113, 114, 115, 117, 121, 142, 143, 145, 148, 150, 154, 165, 166, 167, 171, 172, 179, 180, 181, 182, 186, 188, 189, 191, 192, 193, 194, 200, 201, 204, 205, 207, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 223, 226, 227, 228, 230, 232, 233, 234, 237, 241, 244, 251, 252, 256, 257, 260, 261, 263, 264, 265, 266, 268, 269, 272, 273, 275, 278, 279, 280, 283, 284, 286, 287, 289, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 311, 314, 319, 320, 323, 339, 340, 345, 346, 347, 349, 351, 355, 360, 362, 369, 370, 371, 375, 376, 393, 394, 395, 397, 398, 401, 404, 405, 406, 407, 408, 413, 417, 419, 420, 422, 427, 432, 434, 436, 437, 439, 440, 446, 450, 454, 456, 458, 459, 462, 464, 468, 469, 473, 474, 476, 479, 481, 483, 485, 489, 493, 494, 496, 497, 498, 500, 503, 505, 513, 516, 517, 519, 520, 522, 525, 528, 529, 533, 534, 535, 536, 537, 538, 542, 543, 548, 556, 575, 577, 579, 591, 595, 596, 597, 598, 599, 600, 604, 605, 607, 611, 612, 613, 615, 616, 618, 619, 621, 622, 623, 624, 625, 627, 630, 632, 633, 634, 635, 636, 639, 645, 651, 658, 666, 667, 670, 671, 672, 698, 702, 712, 715, 721, 722, 723, 736, 741, 742, 743, 744, 746, 748, 750, 751, 752, 753, 758, 759, 761, 764, 765, 766, 767, 768, 772, 774, 776, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 799, 801, 802, 803, 807, 814, 818, 836, 837, 838, 839, 840, 843, 848, 849, 850, 851, 852, 854, 855, 856, 857, 862, 864, 865, 866, 867, 868, 869, 873, 874, 875, 880, 884, 890, 892, 893, 894, 895, 896, 897, 898, 903, 905, 906, 909, 910, 911, 914, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 927, 931, 936, 942, 945, 949, 952, 955, 956, 959, 961, 962, 963, 965, 967, 971, 976, 977, 978, 984, 993, 995, 1003, 1011, 1012, 1013, 1014, 1015, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1039, 1053, 1055, 1057, 1058, 1060, 1061, 1067, 1069, 1070, 1071, 1075, 1078, 1080, 1082, 1083, 1084, 1092, 1096, 1097, 1100, 1102, 1108, 1114, 1127, 1135, 1138, 1139, 1144, 1147, 1151, 1155, 1156, 1157, 1158, 1159, 1160, 1164, 1165, 1170, 1174, 1182, 1187, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1200, 1201, 1204, 1206, 1207, 1208, 1210, 1211, 1214, 1218, 1220, 1228, 1231, 1234, 1237, 1243, 1251, 1252, 1255, 1256, 1283, 1287, 1300, 1309, 1311, 1314, 1315, 1318, 1322, 1331, 1340], "6": [1, 9, 14, 32, 34, 36, 37, 38, 39, 40, 41, 42, 50, 52, 53, 55, 57, 62, 91, 92, 108, 111, 112, 113, 114, 125, 129, 130, 142, 165, 168, 172, 173, 174, 175, 176, 177, 179, 180, 183, 188, 189, 190, 191, 192, 194, 200, 202, 204, 205, 207, 209, 210, 211, 213, 214, 217, 218, 219, 220, 221, 222, 223, 225, 226, 229, 232, 233, 234, 236, 237, 239, 241, 242, 243, 244, 245, 246, 247, 249, 252, 255, 256, 258, 259, 260, 261, 263, 265, 266, 267, 269, 270, 271, 275, 277, 278, 280, 281, 282, 283, 284, 286, 287, 294, 304, 305, 311, 314, 319, 323, 345, 346, 347, 349, 355, 363, 370, 371, 386, 387, 398, 401, 405, 409, 424, 429, 430, 431, 442, 443, 445, 448, 449, 452, 454, 463, 464, 469, 470, 473, 479, 481, 483, 505, 506, 507, 517, 520, 534, 535, 536, 537, 541, 556, 558, 591, 595, 603, 606, 607, 608, 612, 614, 616, 619, 621, 623, 625, 627, 630, 632, 633, 634, 639, 651, 658, 662, 671, 672, 702, 712, 715, 722, 730, 732, 734, 742, 750, 751, 752, 758, 761, 765, 768, 774, 780, 781, 785, 801, 814, 818, 836, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 853, 854, 855, 857, 862, 864, 865, 867, 869, 871, 875, 878, 880, 882, 884, 885, 886, 888, 890, 892, 893, 894, 895, 898, 902, 905, 906, 909, 910, 916, 926, 927, 931, 936, 959, 961, 962, 963, 965, 971, 993, 999, 1001, 1005, 1006, 1015, 1018, 1050, 1070, 1075, 1082, 1092, 1097, 1128, 1129, 1139, 1142, 1156, 1157, 1158, 1159, 1163, 1182, 1193, 1196, 1197, 1201, 1203, 1209, 1211, 1213, 1215, 1220, 1228, 1243, 1247, 1256, 1287, 1299, 1311, 1331, 1339, 1340], "7": [1, 17, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 52, 55, 57, 62, 129, 130, 142, 157, 165, 168, 169, 171, 173, 174, 176, 177, 179, 183, 188, 190, 194, 200, 202, 205, 213, 218, 220, 222, 224, 225, 229, 232, 234, 236, 239, 241, 242, 244, 245, 246, 247, 249, 252, 255, 258, 259, 260, 261, 267, 269, 270, 271, 278, 280, 281, 282, 311, 319, 323, 346, 347, 349, 358, 387, 404, 405, 409, 419, 430, 432, 433, 447, 449, 460, 473, 479, 483, 484, 505, 520, 534, 535, 536, 537, 595, 607, 612, 616, 632, 633, 651, 666, 701, 715, 742, 750, 751, 758, 761, 762, 768, 773, 780, 781, 801, 818, 836, 841, 843, 845, 847, 849, 853, 855, 857, 862, 864, 865, 869, 876, 878, 881, 882, 884, 885, 886, 890, 895, 898, 931, 936, 949, 962, 963, 965, 974, 1021, 1022, 1026, 1033, 1039, 1053, 1054, 1068, 1070, 1081, 1101, 1124, 1142, 1156, 1157, 1158, 1159, 1200, 1201, 1214, 1220, 1251, 1286, 1331, 1340], "float32": [1, 11, 34, 43, 57, 165, 186, 267, 268, 269, 273, 311, 456, 778, 818, 836, 931, 936, 1078, 1105, 1174, 1309, 1311, 1314, 1331], "lazi": [1, 47, 48, 49, 50, 52, 57, 62, 134, 150, 214, 231, 232, 257, 311, 558, 770, 791, 794, 809, 818, 843, 865, 866, 908, 911, 912, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 931, 936, 1339, 1340], "i16": [1, 57, 409, 430, 449, 643, 818, 936, 1051, 1308, 1331, 1340], "i32": [1, 57, 108, 111, 115, 147, 149, 150, 247, 257, 311, 346, 347, 349, 371, 404, 413, 416, 417, 419, 420, 422, 427, 451, 614, 643, 742, 808, 818, 886, 931, 962, 963, 965, 1021, 1033, 1037, 1039, 1040, 1048, 1072, 1174, 1203, 1331, 1340], "f32": [1, 57, 165, 257, 267, 273, 311, 643, 818, 836, 895, 931, 936, 1174, 1331], "i64": [1, 11, 14, 17, 18, 22, 28, 47, 49, 55, 56, 57, 58, 62, 63, 79, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 129, 130, 134, 164, 165, 166, 167, 168, 172, 173, 175, 176, 179, 180, 182, 183, 188, 189, 191, 192, 193, 194, 200, 202, 204, 206, 208, 210, 213, 214, 217, 218, 223, 224, 225, 230, 231, 232, 233, 236, 237, 239, 240, 241, 245, 247, 252, 255, 256, 257, 259, 261, 264, 271, 274, 275, 276, 277, 278, 279, 280, 282, 284, 286, 287, 288, 289, 290, 293, 294, 295, 297, 298, 301, 304, 305, 311, 319, 321, 325, 336, 341, 342, 344, 345, 350, 352, 353, 354, 355, 356, 358, 361, 363, 369, 370, 376, 384, 385, 386, 387, 393, 394, 397, 398, 412, 438, 440, 441, 442, 443, 444, 445, 446, 456, 459, 461, 462, 464, 465, 466, 467, 469, 470, 472, 473, 475, 479, 481, 482, 483, 484, 485, 489, 490, 493, 494, 496, 497, 498, 500, 502, 505, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 546, 547, 548, 552, 555, 556, 558, 575, 576, 577, 579, 580, 582, 584, 586, 587, 592, 596, 597, 600, 601, 602, 603, 604, 607, 608, 609, 611, 612, 613, 614, 615, 616, 638, 640, 641, 643, 644, 645, 649, 650, 651, 667, 680, 681, 698, 702, 707, 708, 710, 711, 712, 713, 714, 715, 721, 722, 723, 724, 726, 729, 737, 740, 743, 745, 750, 751, 752, 753, 758, 761, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 785, 787, 788, 790, 793, 797, 798, 801, 802, 803, 804, 808, 814, 818, 834, 836, 837, 839, 840, 844, 845, 846, 849, 850, 852, 853, 854, 855, 856, 857, 862, 865, 866, 867, 869, 871, 872, 875, 876, 877, 879, 880, 882, 883, 884, 886, 888, 890, 893, 894, 895, 897, 898, 900, 901, 902, 903, 906, 909, 910, 911, 912, 915, 916, 917, 919, 920, 923, 926, 927, 931, 936, 938, 939, 942, 961, 966, 968, 970, 971, 972, 974, 977, 984, 995, 998, 1003, 1004, 1005, 1006, 1011, 1012, 1029, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1082, 1083, 1084, 1086, 1087, 1090, 1091, 1092, 1096, 1098, 1110, 1127, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1146, 1149, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1168, 1169, 1176, 1181, 1187, 1194, 1197, 1198, 1199, 1200, 1201, 1203, 1207, 1210, 1214, 1218, 1219, 1222, 1226, 1228, 1230, 1231, 1235, 1236, 1287, 1293, 1298, 1300, 1307, 1315, 1316, 1322, 1331, 1339, 1340], "register_series_namespac": [1, 55, 56, 57], "math": [1, 11, 58, 395, 738, 739, 818, 999, 1001, 1232, 1303, 1331], "mathshortcut": [1, 58], "": [1, 12, 34, 35, 36, 37, 42, 43, 47, 50, 58, 63, 83, 97, 108, 115, 120, 121, 122, 123, 125, 131, 135, 136, 139, 140, 154, 164, 165, 175, 178, 183, 188, 193, 194, 195, 196, 197, 198, 204, 210, 213, 214, 223, 230, 232, 237, 239, 241, 244, 247, 248, 256, 266, 269, 274, 276, 277, 278, 279, 284, 285, 311, 348, 370, 406, 412, 436, 439, 459, 465, 469, 501, 523, 556, 558, 568, 576, 588, 589, 596, 597, 609, 615, 651, 655, 663, 664, 665, 666, 667, 680, 681, 686, 687, 689, 697, 698, 699, 700, 704, 705, 708, 710, 711, 722, 731, 732, 733, 734, 740, 746, 749, 752, 753, 756, 757, 766, 767, 769, 770, 776, 780, 781, 782, 783, 785, 787, 788, 790, 797, 798, 800, 801, 802, 808, 814, 818, 834, 836, 846, 856, 857, 858, 859, 860, 861, 866, 875, 884, 886, 887, 894, 900, 901, 902, 903, 906, 907, 913, 919, 931, 936, 938, 939, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1026, 1028, 1029, 1032, 1034, 1035, 1039, 1040, 1042, 1046, 1047, 1051, 1054, 1055, 1057, 1060, 1068, 1070, 1071, 1072, 1073, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1262, 1263, 1265, 1266, 1267, 1268, 1271, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1298, 1299, 1300, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1331, 1335], "_": [1, 54, 58, 232, 266, 270, 311, 348, 523, 656, 664, 671, 672, 682, 687, 688, 892, 931, 989, 1241, 1249, 1256, 1257, 1267, 1273, 1306, 1331], "squar": [1, 58, 297, 501, 652, 818, 919, 1125, 1237, 1331], "cube": [1, 58, 374, 601, 818, 991, 1331], "s2": [1, 53, 91, 92, 145, 146, 186, 311, 976, 993, 1015, 1075, 1092, 1110, 1124, 1132, 1168, 1182, 1197, 1322, 1331], "renam": [1, 111, 120, 121, 157, 162, 184, 187, 193, 195, 196, 197, 198, 203, 238, 247, 248, 262, 284, 285, 289, 291, 292, 311, 321, 326, 388, 389, 390, 391, 392, 471, 488, 492, 495, 500, 512, 526, 544, 554, 555, 557, 572, 573, 579, 580, 581, 582, 584, 586, 587, 602, 617, 657, 669, 673, 674, 675, 676, 679, 684, 685, 691, 710, 711, 713, 716, 717, 735, 754, 755, 756, 757, 779, 797, 800, 818, 856, 858, 859, 860, 861, 870, 886, 887, 899, 906, 907, 911, 913, 914, 931, 939, 943, 1007, 1008, 1009, 1010, 1012, 1107, 1113, 1134, 1148, 1166, 1175, 1194, 1205, 1221, 1223, 1242, 1251, 1254, 1258, 1259, 1260, 1261, 1264, 1269, 1270, 1276, 1296, 1301, 1302, 1307, 1331], "n2": [1, 360], "s3": [1, 36, 124, 135, 136, 139, 140, 311, 976, 1168, 1331], "n3": 1, "8": [1, 12, 32, 34, 36, 38, 39, 40, 41, 42, 43, 47, 52, 54, 55, 57, 58, 62, 78, 82, 88, 129, 130, 142, 165, 168, 169, 171, 173, 174, 175, 176, 177, 179, 183, 188, 190, 192, 200, 202, 210, 213, 214, 217, 218, 220, 222, 225, 234, 236, 239, 242, 244, 245, 246, 247, 249, 252, 255, 257, 258, 259, 261, 267, 269, 270, 271, 278, 281, 282, 284, 311, 323, 325, 338, 346, 347, 349, 384, 387, 393, 405, 473, 480, 483, 484, 514, 516, 520, 526, 534, 535, 536, 537, 577, 595, 601, 612, 613, 618, 643, 649, 651, 673, 676, 677, 678, 697, 730, 736, 742, 746, 748, 751, 753, 765, 767, 772, 773, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 799, 802, 803, 807, 818, 836, 841, 843, 845, 846, 847, 849, 853, 855, 862, 865, 869, 871, 880, 882, 885, 886, 890, 895, 898, 906, 931, 936, 962, 963, 965, 1001, 1011, 1033, 1097, 1101, 1124, 1136, 1138, 1142, 1148, 1156, 1157, 1158, 1159, 1190, 1201, 1204, 1206, 1209, 1211, 1213, 1215, 1258, 1261, 1262, 1263, 1282, 1331, 1340], "9": [1, 10, 32, 34, 36, 37, 38, 39, 42, 47, 52, 54, 62, 142, 169, 171, 186, 195, 200, 205, 217, 232, 241, 243, 244, 247, 260, 261, 278, 282, 284, 304, 311, 319, 323, 325, 338, 346, 347, 349, 354, 356, 384, 387, 395, 405, 465, 473, 483, 490, 500, 514, 520, 532, 540, 579, 595, 606, 612, 616, 618, 629, 632, 633, 645, 649, 664, 701, 709, 711, 744, 750, 751, 758, 761, 773, 806, 818, 843, 858, 862, 864, 869, 884, 886, 898, 906, 926, 931, 936, 957, 958, 962, 963, 965, 970, 972, 1013, 1026, 1037, 1040, 1048, 1054, 1068, 1069, 1110, 1124, 1136, 1142, 1154, 1162, 1201, 1206, 1212, 1214, 1216, 1231, 1249, 1286, 1295, 1310, 1331], "27": [1, 58, 268, 304, 311, 387, 424, 431, 448, 456, 620, 622, 624, 626, 628, 631, 633, 635, 711, 818, 926, 936, 1309, 1331, 1340], "16": [1, 37, 56, 75, 85, 142, 156, 171, 187, 194, 241, 284, 311, 384, 387, 483, 557, 577, 601, 616, 702, 711, 750, 764, 765, 768, 818, 843, 857, 884, 892, 906, 931, 936, 1054, 1068, 1175, 1190, 1221, 1232, 1287, 1303, 1331], "64": [1, 56, 58, 69, 71, 74, 77, 84, 87, 141, 161, 273, 311, 381, 577, 601, 818, 1190, 1331], "25": [1, 28, 37, 58, 115, 171, 194, 214, 241, 268, 273, 280, 284, 311, 397, 409, 411, 430, 433, 447, 449, 456, 604, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 723, 759, 760, 761, 762, 763, 764, 770, 781, 805, 806, 818, 843, 857, 866, 873, 884, 904, 906, 931, 936, 1013, 1014, 1028, 1054, 1068, 1074, 1078, 1097, 1190, 1194, 1331], "125": [1, 37, 58, 311, 319, 818, 895, 931, 1190, 1331], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 172, 311, 396, 471, 818, 844, 931], "activ": [2, 8, 9, 19, 20, 22, 23, 24, 25, 29, 30, 516, 664, 1138, 1249], "bool": [2, 8, 9, 10, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 54, 60, 61, 62, 91, 92, 108, 109, 110, 111, 113, 114, 115, 120, 121, 122, 125, 126, 128, 130, 131, 132, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158, 161, 164, 165, 166, 167, 171, 177, 182, 183, 185, 186, 187, 191, 192, 193, 194, 195, 196, 197, 198, 202, 204, 206, 207, 208, 211, 213, 214, 221, 230, 232, 241, 242, 243, 244, 245, 250, 254, 256, 257, 260, 264, 266, 269, 270, 274, 275, 276, 277, 279, 280, 282, 284, 293, 295, 298, 301, 311, 321, 322, 323, 324, 325, 326, 336, 339, 340, 343, 347, 348, 356, 361, 364, 365, 367, 368, 369, 370, 371, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 415, 432, 434, 447, 452, 453, 454, 455, 456, 457, 458, 474, 476, 477, 480, 485, 486, 487, 489, 490, 491, 493, 494, 496, 497, 498, 499, 501, 503, 506, 507, 511, 516, 519, 521, 523, 533, 540, 544, 547, 553, 554, 556, 558, 562, 563, 564, 565, 566, 567, 571, 590, 591, 593, 595, 598, 599, 604, 607, 609, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 640, 643, 648, 650, 651, 654, 655, 656, 658, 659, 661, 666, 679, 680, 681, 682, 687, 688, 690, 697, 699, 700, 702, 704, 708, 710, 721, 722, 724, 727, 730, 731, 732, 733, 734, 735, 737, 740, 741, 742, 745, 746, 749, 750, 754, 759, 760, 761, 762, 763, 774, 775, 778, 781, 791, 794, 800, 805, 806, 808, 809, 818, 834, 836, 837, 839, 840, 843, 848, 850, 852, 853, 856, 857, 858, 859, 860, 861, 865, 866, 870, 871, 875, 880, 884, 889, 892, 894, 895, 900, 901, 902, 903, 906, 915, 917, 920, 923, 931, 935, 936, 940, 941, 943, 952, 955, 956, 959, 963, 964, 972, 977, 979, 980, 982, 983, 985, 987, 990, 994, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1018, 1032, 1053, 1055, 1068, 1074, 1075, 1077, 1079, 1080, 1087, 1093, 1094, 1097, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1128, 1129, 1133, 1134, 1138, 1141, 1143, 1145, 1155, 1162, 1166, 1169, 1176, 1188, 1191, 1192, 1194, 1196, 1197, 1198, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1218, 1221, 1222, 1223, 1224, 1229, 1234, 1236, 1239, 1240, 1241, 1243, 1244, 1246, 1251, 1264, 1265, 1266, 1267, 1272, 1273, 1275, 1282, 1284, 1285, 1287, 1289, 1306, 1310, 1311, 1312, 1316, 1319, 1321, 1331, 1339], "none": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 54, 61, 63, 66, 69, 70, 92, 108, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 162, 164, 166, 170, 171, 175, 181, 182, 192, 194, 195, 197, 198, 199, 205, 209, 213, 214, 215, 217, 218, 220, 223, 225, 228, 229, 232, 241, 242, 245, 249, 252, 253, 255, 256, 259, 264, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 292, 296, 311, 322, 324, 325, 326, 338, 339, 340, 347, 348, 360, 363, 369, 370, 376, 382, 383, 384, 387, 394, 399, 400, 408, 429, 432, 433, 447, 454, 455, 456, 457, 458, 459, 462, 463, 464, 470, 477, 478, 480, 483, 484, 485, 494, 496, 497, 498, 504, 506, 507, 515, 521, 523, 525, 533, 534, 535, 536, 537, 539, 546, 554, 556, 557, 558, 567, 570, 571, 573, 578, 591, 592, 593, 594, 597, 604, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 641, 642, 643, 644, 645, 649, 650, 654, 655, 658, 660, 661, 664, 666, 667, 668, 669, 670, 671, 672, 675, 677, 678, 679, 685, 686, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 700, 702, 704, 707, 708, 709, 710, 720, 721, 722, 732, 733, 734, 735, 737, 743, 745, 747, 749, 753, 759, 760, 761, 762, 763, 764, 766, 767, 774, 775, 776, 777, 778, 779, 780, 781, 783, 785, 788, 790, 794, 795, 796, 800, 802, 804, 805, 806, 808, 818, 834, 837, 838, 840, 842, 843, 846, 848, 851, 852, 857, 858, 860, 861, 864, 865, 866, 868, 870, 871, 875, 878, 884, 888, 890, 891, 892, 893, 894, 900, 901, 902, 903, 908, 913, 914, 918, 919, 931, 935, 936, 940, 941, 943, 950, 951, 955, 956, 963, 964, 976, 994, 995, 1002, 1012, 1013, 1015, 1016, 1017, 1025, 1034, 1035, 1036, 1042, 1053, 1054, 1068, 1074, 1077, 1078, 1079, 1080, 1084, 1085, 1086, 1093, 1095, 1097, 1099, 1100, 1101, 1102, 1112, 1117, 1118, 1121, 1124, 1125, 1126, 1128, 1129, 1132, 1137, 1143, 1145, 1147, 1155, 1156, 1157, 1158, 1159, 1161, 1168, 1175, 1176, 1177, 1178, 1179, 1180, 1189, 1194, 1195, 1196, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1218, 1219, 1220, 1222, 1223, 1226, 1227, 1230, 1231, 1234, 1235, 1238, 1239, 1240, 1243, 1245, 1246, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1262, 1263, 1264, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1287, 1289, 1292, 1295, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1320, 1331, 1339], "true": [2, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 51, 60, 61, 62, 108, 109, 110, 111, 113, 114, 115, 117, 120, 121, 122, 124, 125, 126, 128, 131, 132, 134, 135, 137, 139, 140, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 159, 161, 164, 165, 166, 167, 171, 177, 182, 183, 186, 187, 191, 192, 193, 194, 196, 197, 204, 206, 207, 208, 211, 213, 214, 215, 220, 221, 227, 228, 230, 232, 233, 242, 243, 244, 245, 247, 256, 257, 260, 264, 266, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 284, 290, 293, 295, 298, 299, 300, 301, 302, 303, 304, 311, 320, 321, 322, 323, 324, 325, 326, 337, 339, 340, 343, 347, 348, 356, 360, 364, 365, 367, 368, 370, 371, 383, 384, 385, 386, 387, 394, 401, 403, 406, 409, 412, 415, 425, 426, 429, 430, 432, 433, 434, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 454, 455, 457, 458, 465, 472, 474, 475, 476, 477, 480, 483, 485, 486, 487, 489, 490, 491, 493, 494, 496, 497, 498, 499, 501, 503, 506, 507, 511, 519, 521, 523, 540, 544, 546, 553, 556, 558, 562, 563, 564, 565, 566, 567, 568, 571, 572, 590, 591, 593, 595, 598, 599, 604, 609, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 643, 648, 650, 651, 654, 655, 656, 658, 659, 661, 666, 668, 670, 679, 680, 681, 687, 688, 690, 697, 699, 700, 702, 704, 708, 710, 722, 724, 727, 730, 731, 732, 733, 734, 735, 737, 740, 741, 742, 746, 759, 761, 762, 768, 774, 781, 791, 794, 800, 805, 808, 809, 818, 834, 836, 837, 838, 839, 840, 843, 848, 850, 852, 853, 856, 857, 859, 860, 865, 866, 868, 870, 871, 875, 880, 886, 892, 894, 895, 900, 901, 902, 903, 906, 912, 915, 917, 920, 921, 922, 923, 924, 925, 926, 931, 935, 936, 940, 941, 943, 953, 955, 956, 959, 963, 964, 972, 979, 980, 982, 983, 985, 987, 990, 993, 994, 1012, 1018, 1019, 1020, 1023, 1026, 1028, 1029, 1030, 1032, 1036, 1037, 1040, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1074, 1075, 1077, 1079, 1080, 1087, 1093, 1094, 1097, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1128, 1129, 1133, 1141, 1143, 1145, 1162, 1166, 1176, 1182, 1188, 1191, 1192, 1194, 1197, 1198, 1212, 1221, 1234, 1236, 1239, 1240, 1241, 1243, 1244, 1246, 1251, 1253, 1255, 1264, 1265, 1266, 1272, 1273, 1275, 1282, 1284, 1285, 1287, 1289, 1306, 1311, 1312, 1319, 1321, 1322, 1331, 1340], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1331, 1339], "decim": [2, 10, 11, 12, 28, 29, 34, 37, 43, 120, 121, 134, 311, 636, 701, 818, 931, 936, 1216, 1286, 1331], "temporari": [2, 35, 311], "set": [2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 34, 37, 38, 39, 40, 41, 43, 44, 45, 46, 54, 55, 60, 61, 66, 69, 70, 72, 109, 110, 111, 114, 120, 121, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 168, 175, 185, 193, 194, 195, 196, 197, 198, 199, 211, 214, 218, 220, 221, 223, 225, 241, 243, 245, 247, 249, 255, 259, 260, 266, 268, 269, 273, 275, 276, 278, 279, 284, 311, 322, 324, 326, 347, 348, 360, 376, 394, 432, 450, 456, 478, 490, 519, 521, 523, 533, 534, 535, 536, 537, 539, 544, 546, 556, 557, 558, 564, 570, 600, 604, 611, 616, 617, 618, 619, 621, 623, 625, 627, 630, 632, 634, 638, 644, 648, 649, 654, 668, 669, 675, 680, 681, 685, 686, 691, 692, 693, 694, 695, 696, 697, 699, 700, 704, 727, 731, 733, 737, 741, 745, 759, 760, 761, 762, 763, 764, 774, 775, 778, 791, 794, 795, 796, 800, 805, 806, 808, 809, 818, 830, 839, 840, 846, 848, 856, 857, 858, 859, 860, 861, 865, 866, 870, 871, 875, 884, 886, 888, 893, 901, 903, 906, 913, 919, 931, 935, 940, 941, 963, 964, 976, 980, 988, 995, 1012, 1053, 1071, 1078, 1088, 1095, 1110, 1120, 1141, 1143, 1145, 1155, 1156, 1157, 1158, 1159, 1161, 1166, 1168, 1175, 1176, 1194, 1200, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1218, 1219, 1220, 1223, 1230, 1234, 1235, 1239, 1253, 1254, 1260, 1265, 1266, 1270, 1271, 1276, 1277, 1278, 1279, 1282, 1284, 1285, 1289, 1311, 1319, 1331, 1340], "remov": [2, 5, 40, 93, 120, 121, 134, 161, 164, 173, 194, 218, 220, 225, 241, 259, 266, 274, 280, 311, 326, 369, 370, 433, 447, 456, 459, 555, 580, 620, 622, 624, 626, 628, 631, 633, 635, 675, 685, 691, 692, 693, 694, 695, 696, 721, 722, 766, 818, 834, 845, 857, 884, 900, 931, 988, 1012, 1054, 1068, 1194, 1260, 1270, 1276, 1277, 1278, 1279, 1280, 1281, 1285, 1306, 1310, 1321, 1331], "onc": [2, 50, 120, 121, 156, 217, 243, 245, 289, 311, 533, 556, 558, 638, 695, 696, 818, 835, 911, 931, 1155, 1176, 1218, 1280, 1281, 1331], "stabil": [2, 199, 311, 478, 818, 1095, 1331], "current": [2, 3, 4, 6, 7, 31, 35, 49, 115, 122, 123, 125, 132, 139, 166, 167, 213, 214, 257, 268, 273, 311, 411, 455, 457, 458, 546, 597, 818, 837, 838, 865, 866, 895, 931, 936, 994, 998, 1019, 1028, 1077, 1079, 1080, 1190, 1309, 1314, 1331, 1339], "consid": [2, 38, 43, 44, 45, 46, 60, 61, 70, 72, 91, 92, 120, 121, 122, 132, 134, 139, 140, 143, 144, 145, 146, 164, 175, 177, 187, 210, 217, 223, 243, 257, 268, 273, 274, 276, 278, 279, 311, 326, 369, 370, 376, 393, 394, 433, 469, 480, 556, 558, 564, 578, 579, 582, 584, 586, 587, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 721, 722, 750, 768, 795, 796, 814, 818, 834, 839, 840, 846, 862, 869, 875, 895, 900, 901, 903, 919, 931, 936, 987, 990, 995, 1011, 1012, 1054, 1075, 1097, 1112, 1176, 1194, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1219, 1221, 1222, 1309, 1314, 1331], "beta": 2, "cfg": [3, 5, 18, 159], "previous": [3, 4], "save": [3, 4, 7, 194, 214, 241, 280, 311, 402, 411, 429, 433, 447, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 764, 805, 806, 814, 818, 830, 857, 866, 884, 931, 1028, 1050, 1054, 1068], "option": [3, 4, 5, 6, 7, 31, 35, 36, 37, 54, 70, 120, 122, 123, 124, 125, 126, 128, 132, 135, 136, 137, 139, 140, 142, 147, 148, 149, 150, 153, 154, 155, 194, 209, 214, 223, 257, 264, 275, 279, 311, 401, 501, 564, 570, 617, 619, 621, 623, 625, 627, 630, 632, 634, 648, 656, 682, 686, 727, 800, 808, 818, 830, 857, 865, 866, 875, 895, 903, 931, 936, 1018, 1121, 1125, 1205, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1234, 1241, 1267, 1271, 1307, 1319, 1331], "from": [3, 4, 5, 6, 7, 11, 17, 29, 33, 34, 36, 37, 43, 47, 48, 49, 54, 62, 83, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 165, 171, 172, 173, 178, 180, 185, 192, 194, 197, 211, 212, 213, 214, 215, 223, 232, 236, 241, 242, 244, 245, 247, 248, 257, 266, 273, 275, 276, 278, 279, 280, 286, 311, 314, 360, 394, 395, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 459, 469, 471, 483, 501, 520, 533, 546, 558, 570, 588, 589, 591, 596, 597, 600, 604, 606, 616, 618, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 638, 651, 663, 664, 667, 668, 669, 679, 686, 692, 693, 694, 695, 696, 697, 698, 699, 700, 704, 725, 738, 739, 742, 743, 758, 759, 760, 761, 762, 763, 764, 778, 794, 804, 805, 806, 814, 817, 818, 836, 843, 844, 845, 850, 857, 860, 865, 866, 875, 882, 884, 886, 887, 895, 901, 903, 908, 909, 931, 936, 976, 1012, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1076, 1078, 1083, 1121, 1125, 1142, 1155, 1168, 1185, 1186, 1187, 1190, 1194, 1206, 1218, 1248, 1249, 1252, 1253, 1254, 1264, 1271, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1289, 1306, 1322, 1331, 1339, 1340], "json": [3, 4, 6, 7, 40, 41, 129, 130, 136, 138, 172, 249, 311, 396, 471, 570, 573, 668, 669, 670, 709, 818, 830, 844, 888, 931, 935, 1253, 1254, 1255, 1295], "paramet": [3, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 66, 69, 70, 71, 72, 79, 83, 92, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 162, 164, 165, 166, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 209, 211, 212, 213, 214, 216, 217, 218, 220, 221, 223, 224, 225, 227, 228, 230, 231, 232, 234, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 291, 294, 296, 297, 303, 305, 311, 319, 321, 322, 323, 324, 325, 326, 336, 343, 344, 347, 348, 355, 356, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 376, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 401, 403, 405, 406, 412, 429, 432, 433, 434, 436, 438, 439, 447, 450, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 483, 484, 485, 490, 501, 503, 505, 510, 511, 512, 513, 514, 516, 519, 520, 521, 522, 523, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 553, 554, 555, 556, 557, 558, 564, 570, 571, 575, 577, 580, 581, 582, 583, 584, 585, 590, 591, 595, 596, 597, 600, 601, 602, 604, 605, 607, 609, 610, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 674, 675, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 707, 708, 710, 711, 712, 713, 715, 716, 717, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 834, 836, 837, 839, 840, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 869, 870, 871, 875, 876, 879, 880, 881, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 913, 916, 918, 919, 925, 927, 931, 935, 936, 939, 940, 941, 942, 943, 952, 959, 960, 963, 964, 971, 972, 976, 977, 979, 980, 981, 982, 983, 984, 985, 988, 994, 995, 996, 997, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1018, 1020, 1022, 1023, 1029, 1050, 1053, 1054, 1055, 1057, 1059, 1060, 1068, 1071, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1083, 1084, 1085, 1086, 1087, 1090, 1091, 1095, 1096, 1097, 1100, 1101, 1102, 1112, 1120, 1121, 1125, 1127, 1132, 1133, 1134, 1135, 1136, 1138, 1141, 1142, 1143, 1144, 1145, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1165, 1166, 1167, 1168, 1169, 1175, 1176, 1190, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1230, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1292, 1293, 1296, 1300, 1301, 1302, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1315, 1316, 1319, 1320, 1321, 1322, 1331, 1339], "produc": [3, 4, 150, 154, 213, 311, 344, 512, 513, 567, 780, 865, 870, 871, 931, 960, 1134, 1135], "load_from_fil": [3, 6, 7], "file": [3, 4, 6, 7, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 172, 180, 249, 311, 396, 471, 570, 573, 583, 585, 818, 844, 888, 931, 935, 1083, 1331], "path": [4, 7, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 172, 249, 311, 396, 570, 573, 640, 670, 818, 844, 888, 892, 931, 935, 1224, 1255, 1331, 1340], "load": [4, 6, 7, 111, 113, 122, 124, 125, 131, 135, 136, 153, 155, 311, 818, 830, 862, 869, 931, 935, 1340], "reset": [5, 159], "default": [5, 8, 10, 11, 15, 28, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 54, 60, 61, 62, 66, 69, 70, 71, 108, 110, 111, 112, 113, 114, 115, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 134, 139, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 159, 171, 175, 178, 193, 194, 195, 196, 197, 198, 199, 211, 213, 214, 221, 223, 230, 232, 241, 242, 243, 244, 245, 249, 252, 257, 258, 260, 266, 268, 269, 273, 276, 278, 279, 281, 286, 296, 311, 321, 322, 324, 348, 355, 360, 373, 394, 401, 432, 433, 447, 452, 454, 455, 457, 458, 478, 519, 523, 533, 538, 539, 541, 544, 546, 548, 549, 556, 557, 564, 567, 570, 588, 589, 591, 597, 604, 607, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 641, 644, 653, 654, 663, 675, 679, 685, 686, 691, 692, 693, 694, 697, 699, 700, 702, 704, 727, 728, 731, 733, 737, 741, 742, 745, 746, 748, 759, 760, 761, 762, 763, 764, 767, 770, 774, 775, 776, 778, 790, 791, 794, 799, 800, 805, 806, 807, 809, 818, 839, 840, 843, 846, 848, 856, 857, 858, 859, 860, 861, 865, 866, 875, 884, 888, 890, 895, 896, 901, 903, 904, 909, 918, 931, 936, 940, 941, 964, 971, 976, 988, 995, 1012, 1013, 1018, 1053, 1054, 1068, 1074, 1076, 1077, 1079, 1080, 1095, 1141, 1145, 1155, 1160, 1161, 1166, 1168, 1175, 1185, 1186, 1190, 1194, 1196, 1200, 1218, 1226, 1230, 1238, 1239, 1240, 1248, 1251, 1260, 1264, 1270, 1271, 1276, 1277, 1278, 1279, 1282, 1284, 1285, 1287, 1289, 1309, 1311, 1319, 1320, 1331, 1340], "state": [5, 101, 750, 754, 830, 848, 850, 880, 892, 931], "note": [5, 11, 21, 36, 37, 47, 51, 52, 53, 54, 61, 68, 69, 71, 84, 91, 92, 108, 109, 110, 112, 114, 115, 120, 122, 123, 124, 125, 129, 130, 135, 136, 140, 143, 145, 148, 150, 154, 156, 159, 161, 164, 169, 171, 181, 194, 195, 197, 198, 199, 209, 210, 211, 213, 214, 217, 228, 231, 232, 241, 242, 243, 244, 252, 257, 265, 268, 270, 273, 274, 275, 279, 280, 284, 286, 287, 311, 355, 376, 386, 387, 399, 400, 406, 425, 426, 429, 433, 447, 456, 463, 469, 471, 478, 485, 494, 496, 500, 516, 519, 538, 544, 546, 558, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 602, 611, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 641, 648, 655, 662, 663, 664, 665, 666, 667, 671, 672, 680, 681, 686, 692, 693, 694, 697, 698, 707, 708, 713, 714, 723, 732, 734, 742, 750, 759, 760, 762, 763, 764, 768, 778, 791, 793, 794, 805, 806, 808, 809, 814, 818, 829, 834, 840, 843, 850, 851, 857, 858, 860, 861, 862, 866, 869, 882, 884, 890, 892, 894, 895, 900, 903, 906, 909, 910, 931, 936, 971, 995, 1005, 1006, 1013, 1016, 1017, 1023, 1046, 1047, 1050, 1054, 1068, 1078, 1085, 1094, 1095, 1102, 1138, 1141, 1160, 1166, 1176, 1200, 1204, 1212, 1219, 1222, 1226, 1229, 1234, 1240, 1247, 1248, 1249, 1250, 1251, 1252, 1256, 1257, 1265, 1266, 1271, 1277, 1278, 1279, 1282, 1283, 1292, 1299, 1312, 1314, 1331, 1335, 1339], "method": [5, 32, 35, 36, 37, 38, 39, 51, 53, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 109, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 147, 150, 154, 159, 162, 171, 172, 175, 180, 184, 187, 193, 195, 196, 197, 198, 203, 205, 211, 217, 218, 220, 225, 228, 234, 238, 242, 243, 244, 252, 259, 262, 276, 284, 291, 292, 297, 303, 311, 319, 322, 323, 326, 355, 376, 388, 389, 390, 391, 392, 396, 436, 439, 453, 454, 462, 469, 471, 474, 476, 483, 488, 492, 495, 500, 503, 512, 526, 538, 544, 553, 554, 555, 557, 558, 573, 575, 577, 579, 580, 582, 584, 586, 587, 590, 591, 592, 595, 601, 602, 605, 607, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 641, 657, 669, 673, 674, 675, 676, 679, 684, 685, 691, 693, 694, 695, 696, 701, 707, 712, 713, 716, 717, 723, 725, 730, 746, 781, 792, 810, 811, 813, 814, 818, 819, 820, 823, 824, 825, 826, 827, 830, 840, 843, 844, 846, 858, 859, 860, 861, 864, 870, 881, 890, 899, 901, 906, 913, 914, 919, 925, 931, 942, 943, 971, 988, 995, 1007, 1008, 1009, 1010, 1013, 1057, 1060, 1083, 1084, 1100, 1107, 1113, 1134, 1148, 1160, 1166, 1175, 1176, 1195, 1196, 1205, 1211, 1221, 1223, 1226, 1242, 1254, 1258, 1259, 1260, 1261, 1264, 1269, 1270, 1276, 1286, 1292, 1301, 1302, 1313, 1321, 1323, 1325, 1327, 1331, 1332, 1336, 1337, 1338], "oper": [5, 37, 53, 62, 92, 97, 98, 105, 108, 110, 111, 112, 113, 114, 120, 122, 162, 167, 180, 183, 186, 193, 196, 203, 204, 215, 217, 224, 228, 230, 231, 235, 239, 241, 244, 245, 252, 263, 269, 270, 275, 278, 288, 289, 311, 319, 320, 323, 355, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 453, 454, 469, 471, 474, 476, 500, 503, 533, 534, 535, 536, 537, 538, 546, 553, 572, 575, 577, 578, 579, 580, 582, 584, 586, 587, 590, 591, 592, 595, 596, 601, 602, 609, 620, 622, 624, 626, 628, 631, 633, 635, 638, 641, 712, 713, 723, 730, 731, 733, 744, 745, 749, 765, 808, 818, 830, 838, 841, 843, 847, 850, 856, 859, 862, 865, 869, 875, 876, 885, 890, 895, 905, 911, 931, 935, 971, 998, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1083, 1155, 1156, 1157, 1158, 1159, 1160, 1198, 1218, 1226, 1305, 1310, 1311, 1312, 1321, 1331], "environ": [5, 31, 132, 139, 153, 156, 268, 311], "ani": [5, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 59, 60, 61, 69, 70, 72, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 140, 147, 149, 150, 152, 154, 159, 162, 169, 175, 180, 182, 183, 186, 209, 211, 212, 217, 221, 230, 231, 242, 243, 244, 257, 260, 264, 265, 268, 269, 270, 273, 276, 278, 279, 287, 311, 319, 322, 323, 326, 348, 371, 393, 394, 433, 434, 453, 454, 464, 465, 469, 472, 474, 476, 480, 490, 503, 510, 516, 523, 553, 554, 556, 557, 558, 564, 572, 575, 577, 579, 580, 582, 584, 586, 587, 590, 591, 595, 600, 602, 604, 611, 612, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 654, 656, 679, 693, 694, 695, 696, 697, 699, 700, 702, 704, 712, 713, 716, 723, 730, 731, 732, 734, 735, 745, 746, 747, 778, 781, 795, 796, 808, 818, 839, 840, 846, 852, 853, 879, 895, 901, 903, 910, 931, 935, 936, 940, 943, 964, 990, 1011, 1012, 1054, 1055, 1083, 1086, 1090, 1097, 1110, 1124, 1132, 1138, 1145, 1175, 1176, 1194, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1223, 1239, 1241, 1264, 1282, 1284, 1285, 1287, 1289, 1301, 1309, 1310, 1311, 1312, 1314, 1331, 1339, 1340], "local": [5, 36, 122, 124, 135, 136, 139, 311, 447, 598, 599, 818, 987, 989, 1024, 1025, 1054, 1058, 1068, 1191, 1192, 1331], "non": [5, 34, 36, 37, 43, 54, 69, 70, 113, 141, 164, 170, 195, 198, 212, 223, 241, 247, 248, 252, 274, 275, 279, 284, 285, 311, 369, 376, 382, 383, 401, 432, 485, 546, 556, 557, 558, 597, 611, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 657, 658, 664, 671, 707, 711, 721, 722, 732, 734, 743, 744, 745, 747, 749, 753, 757, 764, 783, 785, 788, 795, 796, 797, 800, 802, 818, 834, 842, 858, 861, 875, 884, 886, 887, 890, 900, 903, 906, 907, 931, 935, 936, 995, 1002, 1013, 1018, 1053, 1102, 1168, 1176, 1190, 1200, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1226, 1242, 1243, 1249, 1256, 1292, 1311, 1331], "env": [5, 155], "back": [5, 54, 180, 194, 197, 269, 270, 311, 570, 596, 705, 818, 857, 860, 888, 931, 1083, 1290, 1312, 1331], "valu": [5, 11, 12, 13, 14, 18, 29, 31, 33, 34, 37, 43, 47, 51, 53, 54, 62, 63, 66, 79, 80, 89, 92, 97, 110, 111, 113, 114, 120, 121, 122, 123, 125, 134, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 163, 164, 171, 175, 177, 180, 181, 182, 183, 187, 192, 194, 197, 199, 200, 205, 209, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 230, 232, 233, 234, 236, 241, 242, 243, 244, 245, 249, 252, 253, 256, 258, 259, 260, 261, 264, 265, 269, 270, 274, 275, 278, 279, 280, 281, 288, 292, 293, 295, 298, 299, 301, 302, 311, 318, 319, 320, 322, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 361, 362, 363, 365, 366, 367, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 387, 393, 394, 397, 399, 400, 405, 409, 424, 430, 448, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 499, 502, 503, 504, 506, 507, 508, 509, 512, 513, 514, 515, 518, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 533, 538, 540, 541, 542, 543, 546, 547, 548, 550, 552, 553, 556, 557, 558, 559, 560, 561, 574, 575, 576, 577, 578, 588, 589, 590, 591, 594, 596, 597, 600, 601, 604, 605, 607, 610, 611, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 645, 646, 647, 648, 650, 651, 652, 654, 655, 657, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 672, 677, 678, 680, 681, 683, 686, 688, 689, 690, 698, 707, 709, 712, 714, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 736, 740, 743, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 767, 768, 773, 774, 775, 776, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 801, 802, 808, 818, 833, 834, 843, 846, 851, 852, 853, 857, 860, 863, 864, 865, 866, 872, 873, 874, 875, 877, 878, 881, 882, 884, 888, 890, 891, 894, 896, 897, 900, 903, 904, 914, 915, 917, 920, 921, 923, 924, 931, 936, 938, 940, 941, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 960, 962, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 977, 978, 980, 981, 982, 983, 988, 992, 995, 996, 997, 999, 1000, 1001, 1002, 1011, 1012, 1013, 1014, 1016, 1017, 1022, 1026, 1045, 1051, 1069, 1075, 1076, 1077, 1078, 1079, 1080, 1083, 1084, 1085, 1086, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1104, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1122, 1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1136, 1137, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1155, 1160, 1162, 1163, 1164, 1165, 1169, 1170, 1175, 1176, 1177, 1178, 1180, 1181, 1183, 1185, 1186, 1187, 1189, 1190, 1193, 1194, 1195, 1196, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1218, 1219, 1220, 1221, 1222, 1223, 1226, 1227, 1231, 1232, 1233, 1234, 1236, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1262, 1263, 1265, 1266, 1268, 1271, 1273, 1274, 1275, 1283, 1292, 1295, 1299, 1300, 1301, 1302, 1303, 1304, 1311, 1312, 1313, 1317, 1319, 1321, 1322, 1331, 1340], "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 94, 96, 97, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 252, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 935, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1224, 1225, 1226, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1262, 1263, 1265, 1266, 1267, 1268, 1271, 1273, 1274, 1275, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1295, 1296, 1298, 1299, 1300, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1331, 1339], "contain": [6, 34, 35, 36, 37, 43, 54, 59, 110, 113, 115, 122, 123, 124, 135, 136, 143, 144, 149, 150, 152, 154, 164, 168, 175, 176, 194, 197, 207, 212, 228, 268, 269, 273, 274, 279, 292, 311, 322, 324, 326, 348, 367, 368, 396, 477, 490, 523, 557, 558, 654, 661, 663, 665, 666, 670, 689, 690, 707, 731, 732, 733, 734, 745, 749, 781, 818, 834, 841, 844, 846, 847, 857, 860, 880, 900, 903, 914, 931, 935, 936, 940, 941, 964, 1012, 1093, 1145, 1175, 1182, 1194, 1239, 1246, 1248, 1250, 1251, 1255, 1274, 1275, 1292, 1305, 1311, 1331], "save_to_fil": 6, "json_str": [6, 129, 130], "written": [7, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 249, 311, 570, 888, 931], "leav": [7, 223, 311, 546, 875, 931], "directli": [7, 31, 49, 61, 122, 150, 154, 159, 244, 268, 311, 455, 457, 458, 611, 794, 818, 840, 931, 988, 1077, 1079, 1080, 1200, 1309, 1331, 1340], "ascii": [8, 21, 656, 667, 671, 672, 674, 682, 684, 686, 698, 707, 936, 1241, 1252, 1256, 1257, 1259, 1267, 1269, 1271, 1283, 1292], "charact": [8, 10, 13, 21, 27, 28, 29, 34, 35, 43, 119, 120, 121, 123, 134, 311, 429, 662, 664, 667, 671, 672, 674, 675, 676, 677, 678, 680, 681, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 698, 707, 880, 931, 936, 1050, 1247, 1249, 1252, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1269, 1270, 1271, 1272, 1273, 1276, 1277, 1278, 1279, 1283, 1292], "displai": [8, 11, 12, 13, 14, 18, 20, 24, 26, 37, 171, 192, 311, 843, 848, 931], "tabl": [8, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 35, 36, 37, 48, 49, 50, 52, 108, 115, 124, 125, 135, 136, 213, 232, 257, 263, 270, 278, 279, 311, 865, 895, 903, 931, 1339], "outlin": 8, "fals": [8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 54, 60, 61, 62, 109, 110, 111, 113, 114, 115, 120, 121, 122, 125, 126, 128, 130, 131, 132, 134, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 161, 164, 165, 166, 167, 171, 177, 186, 191, 192, 193, 194, 195, 196, 197, 198, 202, 204, 206, 207, 208, 211, 213, 214, 215, 220, 221, 227, 228, 230, 232, 233, 241, 242, 243, 244, 245, 250, 254, 256, 257, 260, 264, 266, 269, 270, 274, 275, 276, 279, 280, 282, 284, 293, 295, 298, 299, 301, 304, 311, 322, 323, 324, 326, 336, 339, 340, 343, 347, 348, 356, 361, 364, 367, 368, 370, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 401, 415, 432, 434, 447, 452, 453, 454, 455, 456, 457, 458, 476, 477, 480, 485, 486, 487, 489, 490, 491, 493, 494, 496, 497, 498, 499, 501, 503, 506, 507, 511, 516, 519, 521, 523, 533, 540, 544, 547, 553, 554, 556, 558, 562, 564, 566, 568, 571, 590, 591, 593, 595, 598, 599, 604, 607, 616, 617, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 638, 640, 643, 648, 650, 651, 654, 655, 656, 658, 661, 666, 668, 679, 680, 681, 682, 687, 688, 690, 697, 699, 700, 702, 722, 724, 727, 730, 731, 732, 733, 734, 737, 740, 741, 742, 745, 746, 749, 750, 754, 759, 760, 761, 762, 763, 774, 775, 778, 791, 794, 800, 805, 806, 808, 809, 818, 834, 836, 837, 838, 839, 840, 843, 848, 850, 856, 857, 858, 859, 860, 861, 865, 866, 868, 870, 871, 880, 884, 889, 892, 894, 895, 900, 901, 903, 906, 915, 917, 920, 921, 923, 926, 931, 935, 936, 940, 941, 952, 955, 956, 959, 963, 964, 972, 977, 979, 980, 982, 983, 985, 987, 990, 993, 994, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1018, 1032, 1053, 1055, 1068, 1074, 1075, 1077, 1078, 1079, 1080, 1087, 1088, 1092, 1093, 1094, 1102, 1103, 1104, 1106, 1108, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1125, 1128, 1129, 1133, 1138, 1141, 1143, 1145, 1155, 1162, 1166, 1169, 1182, 1188, 1191, 1192, 1194, 1196, 1197, 1198, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1218, 1221, 1224, 1229, 1234, 1236, 1239, 1240, 1241, 1243, 1246, 1251, 1253, 1264, 1265, 1266, 1267, 1272, 1273, 1275, 1282, 1284, 1285, 1287, 1306, 1311, 1312, 1316, 1319, 1321, 1322, 1331, 1339], "revert": [8, 10, 11], "utf8_full_condens": [8, 21, 115], "format": [8, 12, 16, 17, 21, 33, 34, 37, 38, 39, 40, 43, 118, 120, 121, 122, 126, 128, 134, 140, 179, 192, 211, 223, 243, 244, 249, 265, 309, 311, 433, 436, 439, 570, 571, 697, 699, 700, 704, 764, 848, 849, 875, 888, 931, 1057, 1060, 1282, 1284, 1285, 1289, 1330], "style": [8, 21, 37, 122, 232, 311], "abc": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 319, 664, 680, 693, 818, 936, 1249, 1265, 1266], "xyz": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 319, 658, 664, 818, 1243, 1249, 1307, 1331], "f64": [8, 10, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 47, 54, 56, 58, 62, 79, 109, 111, 129, 140, 147, 150, 165, 166, 167, 169, 171, 172, 173, 176, 181, 182, 186, 191, 192, 193, 194, 204, 205, 213, 214, 219, 220, 221, 222, 226, 232, 233, 234, 255, 256, 258, 260, 273, 281, 284, 289, 293, 295, 298, 299, 300, 301, 303, 304, 311, 318, 321, 328, 329, 330, 331, 332, 333, 351, 357, 362, 371, 374, 375, 379, 380, 381, 394, 395, 399, 400, 434, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 468, 469, 474, 476, 483, 484, 494, 496, 497, 498, 500, 501, 503, 516, 528, 529, 541, 548, 549, 550, 551, 553, 559, 560, 561, 574, 577, 579, 588, 589, 590, 591, 597, 601, 604, 605, 606, 607, 611, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 646, 647, 648, 652, 653, 711, 718, 719, 723, 728, 738, 739, 743, 744, 746, 748, 765, 766, 781, 784, 785, 786, 799, 807, 814, 818, 836, 837, 843, 845, 851, 852, 856, 857, 864, 865, 866, 873, 874, 881, 894, 896, 904, 906, 908, 911, 915, 917, 920, 921, 922, 923, 925, 926, 931, 936, 944, 945, 946, 947, 948, 949, 967, 973, 978, 991, 992, 999, 1000, 1001, 1012, 1013, 1016, 1017, 1055, 1077, 1078, 1079, 1080, 1081, 1085, 1089, 1097, 1100, 1101, 1138, 1150, 1151, 1163, 1170, 1171, 1172, 1173, 1190, 1194, 1196, 1200, 1206, 1208, 1209, 1211, 1212, 1213, 1215, 1216, 1217, 1232, 1233, 1237, 1303, 1304, 1318, 1331, 1340], "multi": [9, 37, 120, 121, 273, 311, 459, 663, 818, 1248], "automat": [9, 49, 52, 108, 110, 111, 112, 114, 115, 120, 121, 122, 123, 125, 129, 130, 134, 138, 150, 154, 156, 247, 257, 284, 311, 433, 447, 556, 557, 611, 692, 693, 694, 818, 886, 895, 906, 931, 935, 1054, 1068, 1175, 1200, 1277, 1278, 1279, 1314, 1331, 1339], "turn": [9, 43, 44, 45, 46, 60, 61, 120, 121, 134, 705, 839, 840, 848, 850, 870, 871, 880, 931, 1290], "struct": [9, 106, 115, 228, 247, 272, 277, 284, 311, 360, 394, 480, 546, 581, 583, 585, 604, 614, 615, 665, 668, 688, 689, 727, 750, 751, 753, 754, 755, 780, 818, 886, 902, 906, 919, 931, 976, 1012, 1168, 1194, 1203, 1250, 1253, 1273, 1274, 1311, 1331], "v": [9, 10, 42, 49, 50, 178, 311, 639, 732, 734, 818, 1220, 1331], "v2": [9, 126, 137], "out": [9, 15, 35, 43, 44, 45, 46, 115, 142, 241, 244, 311, 347, 365, 519, 521, 544, 655, 659, 666, 808, 884, 931, 963, 980, 1141, 1143, 1166, 1240, 1244, 1251], "separ": [10, 11, 25, 28, 33, 34, 43, 117, 119, 120, 121, 125, 134, 230, 232, 266, 275, 277, 311, 326, 345, 348, 517, 523, 558, 662, 745, 750, 751, 754, 755, 818, 902, 931, 961, 964, 1139, 1145, 1247, 1298, 1306, 1331], "set_thousands_separ": 10, "thousand": [10, 28], "group": [10, 28, 37, 42, 46, 47, 121, 165, 193, 194, 195, 196, 197, 198, 212, 228, 230, 232, 241, 244, 278, 280, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311, 320, 370, 393, 461, 467, 472, 475, 516, 556, 558, 567, 569, 596, 607, 615, 616, 650, 651, 655, 663, 664, 665, 666, 680, 681, 722, 727, 781, 818, 836, 856, 857, 858, 859, 860, 861, 884, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931, 935, 936, 1011, 1138, 1204, 1240, 1248, 1249, 1250, 1251, 1265, 1266, 1319, 1331], "9876": 10, "54321": 10, "1010101": 10, "123456": [10, 936], "78": 10, "tbl_cell_numeric_align": [10, 11, 28], "right": [10, 11, 16, 17, 19, 28, 37, 70, 120, 121, 143, 144, 145, 146, 194, 195, 197, 198, 213, 214, 241, 279, 311, 394, 455, 457, 458, 485, 534, 535, 536, 537, 604, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 639, 648, 684, 743, 759, 760, 762, 763, 805, 806, 818, 857, 858, 860, 861, 865, 866, 884, 903, 931, 1012, 1077, 1079, 1080, 1102, 1156, 1157, 1158, 1159, 1194, 1220, 1234, 1269, 1331], "thousands_separ": [10, 11, 28], "decimal_separ": [10, 28], "float_precis": [10, 11, 28, 34, 37, 43, 311, 931], "print": [10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 121, 142, 143, 145, 176, 192, 193, 212, 215, 267, 288, 311, 482, 571, 818, 839, 863, 931, 936, 1110, 1308, 1331, 1340], "876": 10, "543": 10, "010": [10, 702, 1287], "101": [10, 28, 405, 702, 936, 1287, 1340], "000": [10, 11, 28, 37, 311, 1340], "123": [10, 658, 664, 681, 707, 808, 936, 1243, 1249, 1292, 1307, 1331], "456": [10, 11, 405, 936, 1022, 1307, 1331], "780": 10, "precis": [11, 12, 34, 37, 43, 70, 122, 211, 243, 244, 265, 268, 273, 311, 403, 701, 931, 936, 1020, 1286], "int": [11, 13, 14, 15, 18, 26, 27, 34, 35, 37, 42, 43, 46, 49, 52, 56, 63, 70, 111, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 139, 140, 141, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 164, 166, 171, 178, 181, 182, 184, 188, 190, 192, 199, 200, 201, 203, 204, 209, 211, 212, 214, 216, 217, 218, 220, 225, 227, 228, 238, 239, 242, 245, 251, 252, 253, 255, 258, 259, 261, 262, 267, 271, 274, 278, 281, 283, 286, 287, 294, 305, 311, 319, 343, 347, 355, 357, 360, 362, 363, 369, 370, 393, 397, 401, 455, 457, 458, 462, 463, 464, 470, 472, 473, 475, 478, 479, 480, 505, 511, 514, 519, 520, 521, 522, 533, 538, 539, 541, 543, 544, 545, 546, 548, 595, 597, 600, 601, 604, 607, 610, 612, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 644, 649, 653, 663, 667, 668, 669, 674, 677, 678, 679, 680, 684, 686, 688, 689, 698, 701, 702, 707, 715, 716, 717, 721, 722, 728, 730, 737, 746, 748, 758, 761, 764, 770, 772, 774, 775, 790, 791, 794, 795, 796, 799, 800, 803, 804, 807, 809, 818, 834, 837, 843, 850, 851, 852, 855, 862, 866, 869, 880, 890, 891, 893, 896, 898, 899, 900, 904, 905, 909, 910, 916, 927, 931, 936, 950, 951, 959, 963, 971, 973, 976, 978, 984, 985, 993, 994, 1011, 1014, 1015, 1018, 1076, 1077, 1079, 1080, 1084, 1085, 1086, 1090, 1091, 1095, 1096, 1097, 1124, 1126, 1127, 1133, 1134, 1136, 1141, 1142, 1143, 1144, 1155, 1160, 1161, 1163, 1165, 1166, 1167, 1168, 1170, 1182, 1183, 1185, 1186, 1187, 1189, 1190, 1193, 1194, 1196, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1226, 1227, 1230, 1235, 1238, 1248, 1252, 1253, 1254, 1259, 1262, 1263, 1264, 1265, 1269, 1271, 1273, 1274, 1283, 1286, 1287, 1292, 1299, 1300, 1301, 1302, 1308, 1315, 1320, 1331, 1339, 1340], "control": [11, 12, 37, 52, 61, 62, 125, 148, 150, 256, 257, 268, 311, 611, 651, 818, 840, 848, 894, 895, 931, 1200, 1309, 1331], "number": [11, 12, 13, 14, 15, 18, 26, 34, 35, 37, 42, 43, 46, 53, 54, 68, 69, 70, 84, 92, 102, 108, 110, 111, 112, 114, 117, 120, 121, 122, 123, 125, 129, 130, 131, 132, 134, 137, 138, 139, 141, 148, 150, 153, 155, 156, 157, 164, 166, 170, 178, 179, 181, 182, 192, 200, 201, 211, 212, 215, 216, 227, 228, 245, 252, 253, 258, 261, 274, 278, 281, 283, 292, 294, 296, 305, 311, 337, 353, 355, 360, 363, 369, 370, 382, 393, 394, 397, 401, 404, 413, 416, 419, 422, 424, 434, 448, 449, 451, 455, 456, 457, 458, 462, 463, 464, 470, 479, 494, 496, 504, 505, 514, 522, 525, 526, 531, 533, 538, 541, 543, 546, 548, 596, 600, 604, 612, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 644, 653, 667, 668, 669, 671, 672, 673, 676, 680, 686, 688, 689, 698, 701, 715, 721, 722, 728, 742, 746, 747, 748, 764, 772, 777, 795, 796, 799, 803, 807, 818, 834, 837, 842, 849, 850, 851, 852, 862, 869, 880, 890, 891, 896, 898, 900, 904, 905, 914, 916, 918, 927, 931, 969, 971, 976, 984, 994, 1011, 1012, 1014, 1018, 1021, 1030, 1033, 1039, 1043, 1045, 1055, 1069, 1070, 1072, 1076, 1077, 1078, 1079, 1080, 1084, 1085, 1086, 1096, 1109, 1126, 1127, 1136, 1144, 1147, 1148, 1153, 1155, 1160, 1165, 1168, 1182, 1183, 1194, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1226, 1227, 1230, 1238, 1252, 1253, 1254, 1256, 1257, 1258, 1261, 1265, 1271, 1273, 1274, 1283, 1286, 1300, 1315, 1320, 1331, 1340], "place": [11, 12, 34, 43, 164, 174, 180, 202, 203, 204, 232, 237, 239, 244, 253, 256, 274, 282, 311, 336, 348, 356, 369, 370, 523, 540, 642, 650, 651, 721, 722, 740, 818, 834, 891, 894, 900, 931, 942, 952, 964, 972, 1083, 1145, 1162, 1197, 1227, 1236, 1331], "float": [11, 12, 34, 37, 43, 73, 74, 120, 121, 125, 134, 140, 143, 144, 145, 146, 147, 150, 154, 161, 171, 178, 181, 214, 234, 245, 253, 268, 269, 303, 311, 343, 375, 394, 399, 400, 434, 452, 453, 454, 455, 457, 458, 463, 468, 469, 474, 476, 483, 487, 491, 494, 496, 497, 498, 503, 511, 533, 549, 553, 556, 559, 574, 588, 589, 590, 591, 601, 604, 605, 617, 618, 619, 621, 623, 625, 627, 628, 630, 632, 634, 636, 638, 723, 792, 794, 818, 843, 851, 866, 881, 891, 892, 925, 931, 936, 959, 985, 992, 1012, 1013, 1015, 1016, 1017, 1035, 1036, 1055, 1074, 1076, 1077, 1079, 1080, 1085, 1089, 1097, 1109, 1125, 1133, 1134, 1155, 1171, 1185, 1186, 1193, 1194, 1195, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1216, 1218, 1222, 1223, 1234, 1238, 1299, 1311, 1320, 1331, 1340], "point": [11, 12, 37, 38, 43, 44, 45, 46, 60, 61, 70, 72, 73, 74, 132, 139, 140, 150, 154, 181, 194, 197, 215, 257, 268, 273, 278, 279, 311, 375, 393, 394, 399, 433, 434, 463, 468, 469, 480, 494, 496, 533, 558, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 795, 796, 818, 839, 840, 851, 857, 860, 870, 871, 882, 895, 903, 931, 990, 992, 1011, 1012, 1016, 1054, 1055, 1085, 1089, 1097, 1109, 1155, 1194, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1309, 1314, 1331], "standard": [11, 37, 258, 268, 273, 311, 416, 457, 630, 631, 648, 653, 670, 799, 814, 818, 896, 931, 1033, 1079, 1234, 1238, 1255, 1331, 1340], "behaviour": [11, 54, 62, 175, 257, 311, 655, 663, 664, 666, 680, 681, 723, 818, 846, 895, 931, 1240, 1248, 1249, 1251, 1265, 1266], "when": [11, 15, 18, 20, 24, 34, 35, 36, 37, 42, 43, 46, 52, 53, 69, 83, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 120, 121, 122, 123, 125, 126, 128, 131, 132, 134, 135, 137, 138, 140, 143, 144, 145, 146, 150, 154, 162, 164, 171, 176, 178, 180, 182, 186, 194, 195, 197, 198, 213, 217, 231, 241, 242, 244, 247, 248, 252, 256, 266, 268, 269, 273, 274, 276, 279, 285, 311, 355, 376, 396, 401, 455, 457, 458, 464, 538, 546, 557, 568, 600, 611, 641, 650, 651, 656, 662, 667, 671, 672, 682, 686, 692, 693, 694, 697, 698, 740, 742, 750, 754, 768, 818, 834, 843, 844, 852, 857, 858, 860, 861, 865, 870, 871, 884, 886, 887, 890, 894, 900, 901, 903, 907, 931, 971, 995, 1013, 1018, 1076, 1077, 1079, 1080, 1083, 1086, 1160, 1175, 1200, 1219, 1222, 1226, 1241, 1247, 1252, 1256, 1257, 1267, 1271, 1277, 1278, 1279, 1282, 1283, 1306, 1311, 1331], "larger": [11, 43, 44, 45, 46, 60, 61, 164, 274, 311, 369, 469, 721, 722, 746, 818, 834, 839, 840, 900, 931], "should": [11, 35, 37, 43, 44, 45, 46, 62, 108, 110, 112, 114, 124, 125, 129, 130, 134, 138, 140, 147, 148, 150, 154, 164, 173, 211, 214, 217, 242, 243, 244, 256, 265, 266, 274, 277, 297, 311, 320, 369, 370, 373, 393, 396, 450, 456, 459, 494, 496, 516, 558, 570, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 639, 648, 651, 721, 722, 727, 740, 764, 766, 778, 781, 795, 796, 808, 818, 834, 844, 845, 850, 865, 866, 871, 888, 894, 900, 902, 931, 936, 988, 1011, 1071, 1078, 1138, 1176, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1220, 1234, 1310, 1319, 1331], "ensur": [11, 37, 123, 149, 152, 193, 196, 230, 242, 269, 311, 485, 556, 818, 856, 859, 870, 871, 931, 935, 936, 1311, 1331], "awar": [11, 122, 211, 243, 244, 265, 311, 456, 656, 682, 818, 850, 931, 1078, 1241, 1267, 1285, 1331], "both": [11, 26, 34, 43, 53, 91, 92, 122, 194, 195, 197, 198, 213, 214, 224, 241, 242, 270, 279, 311, 325, 376, 394, 459, 485, 604, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 686, 759, 760, 762, 763, 805, 806, 814, 818, 829, 857, 858, 860, 861, 865, 866, 876, 884, 903, 931, 936, 995, 1102, 1112, 1271, 1312, 1331], "limit": [11, 12, 46, 122, 123, 134, 156, 182, 311, 363, 377, 378, 464, 470, 818, 852, 862, 931, 996, 997, 1086, 1331], "represent": [11, 40, 41, 68, 69, 71, 84, 115, 267, 311, 373, 404, 409, 413, 416, 417, 419, 420, 422, 424, 427, 430, 431, 434, 448, 449, 451, 720, 818, 848, 868, 931, 988, 989, 1021, 1026, 1030, 1032, 1033, 1037, 1039, 1040, 1043, 1045, 1048, 1051, 1052, 1055, 1069, 1070, 1072, 1308, 1313, 1331], "look": [11, 194, 311, 364, 546, 857, 931, 979], "appli": [11, 21, 34, 37, 43, 47, 62, 122, 134, 147, 150, 154, 171, 186, 217, 231, 256, 257, 268, 297, 311, 336, 404, 407, 408, 409, 413, 415, 416, 417, 419, 420, 422, 424, 427, 430, 431, 434, 437, 448, 449, 451, 457, 458, 554, 556, 558, 600, 617, 619, 620, 621, 622, 625, 626, 632, 633, 651, 680, 681, 697, 699, 700, 704, 740, 750, 751, 754, 755, 768, 779, 780, 781, 793, 808, 818, 843, 862, 869, 870, 871, 879, 894, 895, 919, 931, 995, 1021, 1024, 1025, 1026, 1030, 1032, 1033, 1037, 1039, 1040, 1043, 1045, 1048, 1051, 1052, 1055, 1058, 1069, 1070, 1072, 1079, 1080, 1176, 1205, 1207, 1208, 1210, 1214, 1265, 1266, 1282, 1284, 1285, 1289, 1331], "float64": [11, 34, 37, 43, 111, 120, 129, 147, 150, 176, 178, 186, 246, 273, 284, 311, 328, 329, 330, 331, 332, 333, 371, 379, 380, 381, 395, 434, 456, 459, 494, 496, 606, 646, 647, 718, 719, 766, 791, 794, 809, 818, 847, 885, 906, 931, 936, 1055, 1078, 1312, 1318, 1331], "dtype": [11, 37, 53, 57, 63, 69, 83, 91, 92, 108, 110, 112, 114, 115, 120, 121, 122, 123, 125, 129, 130, 131, 134, 147, 148, 149, 150, 154, 161, 165, 194, 195, 197, 198, 214, 241, 267, 268, 269, 270, 273, 278, 287, 311, 326, 371, 372, 386, 387, 450, 459, 472, 510, 519, 544, 552, 554, 556, 557, 558, 564, 609, 610, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 643, 668, 669, 697, 714, 716, 720, 726, 735, 737, 766, 770, 774, 775, 777, 778, 779, 780, 781, 791, 794, 800, 809, 818, 836, 857, 858, 860, 861, 866, 884, 910, 931, 936, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 985, 986, 987, 989, 994, 1005, 1006, 1013, 1014, 1071, 1076, 1103, 1105, 1109, 1112, 1119, 1121, 1123, 1128, 1129, 1132, 1141, 1167, 1174, 1175, 1176, 1202, 1221, 1228, 1253, 1254, 1282, 1299, 1308, 1309, 1311, 1312, 1313, 1314, 1318, 1331, 1340], "doe": [11, 34, 36, 43, 54, 62, 102, 108, 110, 111, 112, 114, 115, 120, 121, 122, 123, 124, 125, 129, 130, 134, 135, 138, 140, 167, 180, 183, 194, 199, 212, 213, 242, 243, 244, 276, 284, 287, 311, 314, 450, 465, 469, 478, 546, 557, 693, 694, 725, 814, 818, 838, 843, 850, 853, 857, 860, 865, 871, 901, 906, 910, 931, 998, 1071, 1083, 1087, 1094, 1095, 1175, 1229, 1321, 1331, 1335], "cover": 11, "nativ": [11, 35, 120, 122, 125, 126, 128, 132, 211, 217, 243, 244, 265, 269, 297, 311, 558, 781, 818, 824, 895, 919, 931, 1176, 1311, 1331, 1340], "level": [11, 37, 42, 46, 134, 137, 138, 139, 186, 217, 228, 257, 311, 465, 818, 830, 862, 869, 895, 931], "larg": [11, 12, 15, 54, 122, 125, 131], "maximum": [11, 27, 34, 43, 70, 111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 140, 148, 149, 150, 152, 154, 192, 194, 218, 219, 311, 341, 508, 559, 588, 598, 607, 667, 668, 669, 672, 686, 698, 782, 783, 818, 857, 872, 931, 957, 1034, 1130, 1177, 1185, 1191, 1196, 1252, 1253, 1254, 1257, 1271, 1283, 1331], "import": [11, 17, 29, 32, 34, 36, 37, 38, 39, 42, 54, 69, 108, 109, 112, 113, 120, 122, 123, 129, 130, 134, 140, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 165, 171, 172, 173, 175, 192, 194, 212, 214, 223, 230, 232, 257, 266, 268, 273, 278, 280, 311, 314, 395, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 465, 564, 570, 618, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 738, 739, 742, 758, 759, 760, 761, 762, 763, 764, 805, 806, 814, 818, 830, 836, 840, 843, 844, 845, 846, 857, 866, 871, 875, 888, 931, 999, 1001, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1078, 1106, 1111, 1115, 1116, 1121, 1206, 1232, 1303, 1331, 1335, 1340], "pi": [11, 395, 818, 999, 1001, 1232, 1303, 1331], "e": [11, 32, 34, 36, 38, 39, 42, 43, 109, 120, 126, 128, 137, 140, 152, 172, 192, 200, 210, 237, 261, 263, 269, 278, 311, 319, 326, 396, 452, 456, 459, 485, 549, 558, 563, 564, 565, 567, 568, 569, 571, 572, 643, 648, 666, 693, 694, 766, 781, 808, 818, 844, 868, 882, 931, 936, 1074, 1078, 1102, 1221, 1234, 1251, 1331, 1340], "const": 11, "15": [11, 37, 142, 171, 194, 204, 217, 241, 311, 393, 397, 426, 433, 447, 456, 600, 616, 632, 669, 751, 761, 804, 805, 818, 843, 857, 884, 931, 936, 1011, 1014, 1054, 1068, 1078, 1254, 1331], "141592653589793": 11, "718281828459045": [11, 452, 549, 818, 1074, 1171, 1331], "fix": [11, 63, 72, 125, 148, 450, 617, 618, 619, 621, 623, 625, 627, 630, 632, 634, 764, 818, 1071, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1331], "align": [11, 16, 17, 37, 54, 62, 311], "numer": [11, 17, 34, 37, 43, 124, 135, 165, 173, 214, 223, 232, 269, 270, 278, 311, 319, 376, 469, 485, 551, 575, 577, 601, 610, 643, 665, 707, 712, 723, 818, 830, 836, 845, 866, 875, 931, 936, 995, 1013, 1102, 1119, 1221, 1228, 1250, 1292, 1311, 1331, 1340], "column": [11, 17, 18, 19, 22, 23, 25, 36, 37, 53, 54, 55, 62, 69, 83, 92, 94, 96, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 150, 164, 165, 169, 170, 173, 174, 175, 176, 179, 183, 184, 185, 189, 190, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 209, 210, 211, 213, 214, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 256, 258, 259, 260, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 296, 311, 321, 322, 324, 336, 345, 354, 356, 359, 370, 376, 382, 383, 394, 404, 405, 407, 408, 409, 413, 415, 416, 417, 419, 420, 422, 424, 427, 430, 431, 434, 436, 437, 439, 448, 449, 451, 456, 459, 461, 465, 467, 480, 484, 485, 500, 504, 510, 517, 519, 540, 544, 545, 546, 557, 558, 564, 565, 567, 569, 570, 579, 582, 584, 586, 587, 596, 602, 604, 608, 610, 612, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 643, 650, 651, 654, 662, 666, 667, 688, 689, 697, 698, 699, 700, 701, 702, 704, 709, 711, 713, 722, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 834, 836, 842, 845, 846, 847, 849, 853, 856, 857, 858, 859, 860, 861, 865, 866, 871, 872, 873, 874, 875, 877, 878, 879, 881, 882, 884, 885, 886, 887, 888, 889, 894, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 918, 919, 931, 936, 940, 941, 961, 970, 972, 975, 987, 989, 995, 1002, 1012, 1021, 1024, 1025, 1026, 1030, 1032, 1033, 1037, 1039, 1040, 1043, 1045, 1048, 1051, 1052, 1055, 1057, 1058, 1060, 1069, 1070, 1072, 1078, 1082, 1094, 1097, 1101, 1132, 1139, 1141, 1162, 1167, 1194, 1201, 1204, 1228, 1239, 1247, 1251, 1273, 1274, 1282, 1284, 1285, 1286, 1287, 1289, 1295, 1298, 1306, 1307, 1319, 1331, 1340], "order": [11, 37, 43, 44, 45, 46, 47, 49, 54, 60, 66, 111, 122, 141, 143, 144, 164, 168, 175, 176, 183, 193, 194, 195, 196, 197, 198, 213, 230, 231, 232, 241, 243, 245, 246, 250, 256, 268, 269, 274, 276, 280, 311, 336, 356, 361, 369, 370, 373, 399, 400, 465, 515, 533, 540, 547, 607, 616, 638, 639, 640, 650, 651, 683, 693, 694, 695, 696, 710, 721, 722, 724, 725, 727, 740, 808, 818, 829, 834, 841, 846, 847, 853, 856, 857, 858, 859, 860, 861, 865, 875, 884, 885, 889, 894, 895, 900, 901, 931, 936, 952, 972, 977, 988, 990, 1016, 1017, 1087, 1120, 1137, 1155, 1162, 1169, 1196, 1202, 1218, 1220, 1224, 1236, 1268, 1296, 1316, 1317, 1319, 1331, 1340], "cleanli": [11, 192, 311], "line": [11, 21, 37, 120, 121, 125, 134, 192, 206, 208, 311, 314, 663, 1248], "up": [11, 37, 83, 123, 211, 214, 243, 244, 265, 311, 326, 375, 558, 667, 698, 818, 865, 866, 871, 931, 936, 992, 1252, 1283, 1331], "xx": [11, 55, 57, 154, 171, 257, 311, 843, 931, 936], "yy": [11, 55, 57, 154, 171, 257, 311, 843, 931, 936], "11111111": 11, "44444444444": 11, "100000": [11, 28], "987654321": 11, "23456789": 11, "11": [11, 17, 42, 46, 142, 150, 163, 171, 214, 241, 311, 321, 425, 426, 429, 433, 447, 471, 483, 520, 573, 597, 607, 616, 618, 632, 649, 730, 801, 806, 818, 833, 839, 840, 843, 862, 869, 880, 884, 898, 931, 936, 1050, 1054, 1068, 1176, 1206, 1331], "111": 11, "100": [11, 18, 28, 37, 111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 252, 311, 611, 641, 656, 668, 669, 682, 701, 763, 818, 890, 931, 936, 1172, 1200, 1207, 1208, 1210, 1226, 1241, 1253, 1254, 1267, 1286, 1331, 1340], "988": 11, "44": [11, 224, 311, 398, 818, 876, 931], "444": 11, "23": [11, 150, 171, 194, 241, 273, 311, 405, 409, 413, 430, 433, 449, 616, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 761, 764, 804, 805, 806, 818, 843, 857, 884, 895, 931, 936, 1022, 1030, 1314, 1331, 1340], "789": [11, 936], "fmt": [12, 214, 311, 482, 769, 818, 863, 931], "floatfmt": 12, "mix": [12, 214, 269, 311, 895, 931, 936, 1013, 1285, 1331], "how": [12, 36, 37, 54, 62, 96, 123, 132, 139, 175, 213, 214, 232, 278, 279, 311, 344, 373, 397, 432, 433, 447, 483, 512, 513, 514, 596, 610, 629, 697, 700, 742, 761, 808, 818, 846, 865, 903, 931, 935, 960, 988, 1014, 1053, 1054, 1068, 1134, 1135, 1136, 1212, 1282, 1285, 1331], "full": [12, 54, 62, 69, 111, 114, 120, 121, 122, 124, 129, 134, 135, 136, 138, 140, 194, 195, 197, 198, 213, 241, 279, 311, 667, 668, 669, 697, 698, 699, 700, 704, 857, 858, 860, 861, 865, 870, 871, 884, 903, 931, 936, 1252, 1253, 1254, 1282, 1283, 1284, 1285, 1289, 1331, 1340], "scientif": 12, "notat": [12, 37, 311], "small": [12, 123, 215, 311, 433, 850, 931, 1340], "2304980958725870923": 12, "1e6": 12, "1e": [12, 143, 144, 145, 146], "230498": 12, "0000e": 12, "230498095872587": 12, "1000000": [12, 1066], "00000001": [12, 730, 818], "plai": [13, 745], "sam": 13, "As": [13, 53, 91, 92, 108, 110, 111, 112, 114, 125, 129, 130, 138, 268, 273, 311, 546, 808, 931], "time": [13, 36, 47, 52, 59, 60, 61, 69, 71, 124, 134, 135, 150, 151, 154, 171, 180, 194, 195, 197, 198, 214, 241, 280, 311, 343, 369, 370, 402, 403, 405, 406, 407, 411, 412, 425, 426, 429, 432, 433, 436, 438, 439, 447, 450, 456, 510, 511, 546, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 644, 697, 700, 704, 720, 721, 722, 744, 745, 759, 760, 761, 762, 763, 764, 770, 805, 806, 818, 839, 840, 843, 857, 858, 860, 861, 866, 880, 884, 931, 936, 959, 984, 1019, 1020, 1022, 1023, 1028, 1029, 1050, 1053, 1054, 1057, 1059, 1060, 1068, 1071, 1078, 1083, 1132, 1133, 1134, 1204, 1230, 1282, 1285, 1289, 1313, 1315, 1331, 1340], "goe": 13, "By": [13, 15, 31, 54, 120, 121, 134, 194, 213, 214, 241, 243, 252, 258, 279, 280, 281, 311, 355, 429, 433, 447, 538, 541, 548, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 641, 653, 728, 746, 748, 759, 760, 762, 763, 764, 778, 799, 805, 806, 807, 818, 839, 857, 865, 866, 884, 890, 896, 904, 931, 971, 1050, 1054, 1068, 1160, 1226, 1238, 1320, 1331], "begin": [13, 37, 311, 455, 457, 458, 663, 698, 818, 1077, 1079, 1080, 1248, 1283, 1331], "beauti": 13, "friendship": 13, "len_byt": [13, 672, 673, 1257, 1258], "len": [13, 37, 150, 154, 212, 232, 287, 292, 297, 311, 382, 526, 558, 567, 569, 747, 774, 818, 910, 914, 919, 931, 1148, 1331], "u32": [13, 47, 122, 163, 165, 170, 229, 286, 287, 292, 296, 302, 304, 311, 320, 327, 334, 335, 336, 337, 338, 341, 342, 344, 353, 382, 383, 480, 504, 508, 509, 513, 525, 531, 578, 594, 607, 615, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 639, 658, 666, 671, 672, 720, 725, 727, 731, 736, 740, 741, 747, 749, 774, 777, 789, 818, 833, 836, 842, 878, 909, 910, 914, 918, 924, 926, 931, 936, 952, 953, 954, 957, 958, 960, 969, 985, 989, 1002, 1097, 1130, 1131, 1135, 1147, 1153, 1196, 1204, 1220, 1243, 1251, 1256, 1257, 1313, 1317, 1319, 1331], "go": [13, 120, 121, 134, 661, 1246], "37": [13, 936], "bea": 13, "48": [13, 150, 241, 311, 616, 711, 818, 884, 931, 936], "fmt_str_length": [13, 760, 763], "50": [13, 28, 37, 171, 180, 192, 311, 376, 433, 447, 760, 818, 843, 931, 936, 995, 1013, 1068, 1331], "element": [14, 15, 26, 149, 152, 164, 170, 209, 232, 242, 256, 258, 274, 281, 311, 326, 328, 329, 330, 331, 332, 333, 344, 345, 369, 370, 374, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 399, 400, 460, 461, 465, 478, 490, 504, 512, 513, 515, 516, 517, 520, 525, 526, 534, 535, 536, 537, 541, 548, 550, 551, 556, 558, 596, 597, 607, 610, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 639, 645, 646, 647, 651, 652, 653, 688, 689, 701, 718, 719, 721, 722, 728, 740, 746, 748, 795, 796, 799, 807, 818, 834, 842, 894, 896, 900, 904, 931, 943, 944, 945, 946, 947, 948, 949, 960, 961, 984, 991, 994, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1016, 1017, 1081, 1082, 1087, 1096, 1110, 1124, 1126, 1127, 1134, 1135, 1137, 1138, 1139, 1142, 1147, 1148, 1156, 1157, 1158, 1159, 1172, 1173, 1176, 1190, 1196, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1220, 1231, 1232, 1233, 1237, 1238, 1273, 1274, 1286, 1300, 1303, 1304, 1308, 1315, 1316, 1320, 1331], "empti": [14, 32, 34, 43, 98, 111, 120, 121, 125, 131, 134, 166, 167, 194, 223, 311, 662, 778, 797, 837, 838, 857, 875, 931, 936, 994, 998, 1105, 1247, 1331], "alwai": [14, 34, 36, 43, 47, 70, 72, 120, 193, 196, 213, 217, 297, 311, 556, 567, 697, 759, 808, 818, 865, 871, 931, 1176, 1282, 1331, 1339, 1340], "neg": [14, 68, 69, 70, 71, 120, 121, 126, 128, 132, 141, 194, 195, 197, 198, 200, 216, 241, 252, 253, 255, 261, 287, 311, 355, 538, 539, 600, 616, 641, 642, 649, 667, 686, 698, 818, 857, 858, 860, 861, 884, 890, 891, 893, 909, 910, 931, 936, 971, 1096, 1127, 1160, 1161, 1226, 1227, 1235, 1252, 1271, 1283, 1300, 1331], "result": [14, 34, 40, 41, 42, 43, 44, 45, 46, 54, 62, 112, 113, 114, 122, 123, 124, 125, 134, 137, 139, 140, 154, 180, 194, 197, 199, 213, 214, 228, 232, 241, 244, 249, 252, 253, 268, 269, 270, 280, 287, 289, 296, 311, 401, 433, 436, 439, 447, 455, 456, 457, 458, 462, 469, 478, 485, 501, 545, 546, 556, 558, 570, 596, 604, 611, 612, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 640, 641, 642, 662, 687, 688, 700, 723, 727, 749, 750, 751, 754, 755, 759, 760, 761, 762, 763, 764, 778, 780, 791, 794, 795, 796, 809, 818, 835, 839, 843, 857, 858, 860, 861, 865, 870, 871, 880, 884, 888, 890, 891, 910, 911, 918, 931, 942, 1012, 1054, 1057, 1060, 1068, 1077, 1079, 1080, 1083, 1084, 1095, 1102, 1125, 1167, 1176, 1194, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1224, 1226, 1227, 1247, 1272, 1273, 1285, 1310, 1311, 1312, 1319, 1331, 1339, 1340], "being": [14, 38, 43, 44, 45, 46, 60, 61, 70, 72, 120, 121, 122, 132, 134, 139, 140, 165, 179, 257, 266, 268, 273, 278, 279, 311, 326, 393, 394, 433, 480, 558, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 662, 742, 765, 795, 796, 818, 836, 839, 840, 849, 850, 895, 903, 931, 990, 1011, 1012, 1054, 1097, 1194, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1247, 1306, 1309, 1314, 1331, 1340], "A": [14, 34, 37, 43, 47, 50, 60, 61, 66, 72, 115, 120, 121, 122, 123, 134, 136, 141, 156, 168, 176, 186, 194, 213, 214, 219, 221, 226, 232, 260, 264, 278, 279, 280, 284, 285, 311, 318, 399, 400, 405, 436, 439, 453, 454, 462, 474, 476, 487, 491, 494, 496, 503, 546, 553, 556, 568, 581, 590, 591, 613, 618, 619, 621, 623, 625, 627, 630, 632, 634, 655, 656, 657, 658, 663, 664, 665, 666, 667, 670, 672, 680, 681, 682, 686, 698, 707, 744, 764, 765, 769, 818, 841, 847, 857, 865, 866, 882, 903, 906, 907, 931, 936, 1016, 1017, 1022, 1057, 1060, 1084, 1206, 1207, 1208, 1210, 1213, 1214, 1215, 1240, 1241, 1242, 1243, 1248, 1249, 1250, 1251, 1252, 1255, 1257, 1265, 1266, 1267, 1271, 1283, 1292, 1331, 1339], "content": [14, 644, 818, 1230, 1331], "final": [14, 37, 54, 139, 214, 311, 455, 457, 458, 818, 843, 850, 931, 935, 1077, 1079, 1080, 1331], "item": [14, 62, 121, 192, 242, 245, 311, 343, 347, 348, 397, 461, 511, 514, 521, 523, 533, 638, 689, 818, 959, 963, 964, 1014, 1082, 1133, 1136, 1143, 1145, 1155, 1218, 1274, 1331], "num": [14, 37, 272, 311, 485, 818, 1102, 1331], "fmt_table_cell_list_len": 14, "10": [14, 17, 18, 28, 32, 34, 36, 37, 38, 39, 42, 46, 47, 54, 62, 115, 123, 134, 142, 167, 171, 180, 191, 192, 194, 200, 202, 204, 205, 210, 214, 227, 231, 232, 233, 237, 239, 241, 247, 257, 261, 284, 289, 293, 295, 298, 299, 300, 301, 302, 303, 304, 311, 321, 325, 334, 335, 336, 338, 376, 384, 387, 397, 401, 402, 404, 405, 407, 408, 411, 413, 417, 419, 420, 422, 425, 426, 427, 432, 433, 434, 437, 447, 450, 456, 477, 478, 479, 483, 490, 500, 505, 514, 520, 522, 529, 539, 541, 543, 548, 550, 567, 569, 579, 594, 597, 600, 611, 616, 649, 702, 711, 715, 730, 742, 743, 750, 759, 761, 762, 765, 768, 770, 772, 778, 780, 803, 806, 818, 839, 840, 843, 857, 862, 864, 869, 879, 880, 884, 886, 897, 898, 906, 911, 915, 917, 920, 921, 922, 923, 924, 925, 926, 931, 936, 995, 1014, 1018, 1019, 1021, 1022, 1028, 1039, 1053, 1068, 1071, 1074, 1078, 1096, 1110, 1127, 1136, 1144, 1151, 1161, 1163, 1165, 1170, 1172, 1176, 1190, 1200, 1219, 1222, 1287, 1300, 1309, 1311, 1314, 1331, 1340], "size": [15, 42, 46, 120, 121, 122, 147, 148, 149, 150, 154, 156, 178, 278, 311, 612, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 737, 774, 775, 795, 796, 818, 839, 931, 1076, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1331, 1340], "overwrit": [15, 35, 36, 108, 110, 111, 112, 114, 120, 121, 129, 130, 134, 138, 161, 279, 311, 321, 711, 818, 850, 931], "chunk": [15, 46, 117, 120, 121, 132, 134, 137, 138, 139, 150, 154, 180, 212, 227, 269, 311, 325, 608, 818, 931, 942, 993, 1083, 1092, 1182, 1197, 1305, 1311, 1331], "stream": [15, 38, 39, 43, 44, 45, 46, 60, 61, 128, 164, 193, 196, 213, 274, 276, 311, 556, 818, 834, 839, 840, 848, 850, 856, 859, 865, 870, 871, 875, 880, 892, 894, 900, 901, 931], "engin": [15, 35, 122, 123, 125, 156, 193, 196, 213, 217, 269, 276, 297, 311, 556, 818, 856, 859, 865, 870, 871, 875, 901, 919, 931, 1176, 1311, 1331], "determin": [15, 34, 37, 43, 54, 62, 89, 120, 121, 122, 125, 131, 132, 134, 139, 141, 162, 164, 186, 194, 197, 211, 212, 217, 232, 241, 274, 275, 280, 311, 369, 370, 373, 415, 432, 433, 447, 480, 546, 557, 567, 604, 610, 611, 619, 621, 623, 625, 627, 630, 632, 634, 648, 656, 667, 697, 698, 700, 701, 721, 722, 761, 791, 794, 809, 818, 834, 841, 847, 857, 860, 884, 900, 905, 931, 988, 1032, 1053, 1054, 1068, 1097, 1168, 1175, 1194, 1200, 1234, 1241, 1282, 1285, 1286, 1331], "thread": [15, 34, 43, 61, 117, 120, 121, 123, 156, 157, 256, 311, 326, 369, 370, 516, 558, 651, 721, 722, 740, 818, 834, 840, 894, 900, 931, 972, 1138, 1162, 1236, 1331], "pool": [15, 61, 156, 157, 840, 931], "For": [15, 36, 37, 122, 123, 124, 125, 135, 136, 175, 180, 213, 214, 241, 268, 297, 311, 314, 425, 426, 455, 457, 458, 469, 546, 558, 568, 609, 648, 655, 663, 664, 665, 666, 667, 698, 750, 754, 764, 768, 769, 814, 818, 846, 866, 884, 919, 931, 935, 1077, 1079, 1080, 1083, 1112, 1176, 1198, 1234, 1240, 1248, 1249, 1250, 1251, 1252, 1283, 1309, 1331, 1335], "some": [15, 31, 37, 53, 92, 111, 120, 121, 122, 125, 134, 161, 175, 244, 269, 311, 814, 846, 931, 1110, 1331, 1340], "dataset": [15, 42, 72, 120, 121, 125, 131, 134, 140, 213, 273, 311, 501, 818, 830, 865, 870, 871, 931, 1125, 1331], "esp": 15, "have": [15, 31, 37, 53, 54, 69, 92, 109, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 172, 180, 211, 213, 214, 235, 241, 243, 244, 265, 273, 287, 311, 393, 396, 455, 457, 458, 558, 568, 607, 611, 616, 665, 818, 844, 865, 875, 884, 909, 910, 931, 935, 936, 1011, 1013, 1077, 1079, 1080, 1083, 1094, 1196, 1200, 1285, 1331, 1340], "too": [15, 850, 931], "optimist": 15, "lead": [15, 42, 115, 140, 194, 195, 197, 198, 221, 241, 252, 260, 311, 355, 456, 472, 475, 538, 556, 558, 616, 640, 641, 675, 691, 692, 694, 716, 746, 818, 857, 858, 860, 861, 870, 871, 884, 890, 913, 919, 931, 971, 1078, 1160, 1176, 1224, 1226, 1260, 1276, 1277, 1279, 1331], "memori": [15, 46, 60, 61, 62, 108, 109, 112, 113, 114, 120, 121, 122, 125, 126, 132, 134, 137, 138, 139, 161, 180, 217, 243, 244, 254, 269, 297, 311, 596, 608, 643, 818, 839, 840, 931, 1083, 1176, 1197, 1228, 1229, 1311, 1331], "error": [15, 36, 61, 100, 103, 110, 111, 114, 120, 121, 134, 165, 232, 242, 269, 311, 321, 347, 348, 365, 371, 401, 500, 519, 521, 523, 544, 579, 655, 659, 663, 665, 666, 668, 670, 697, 699, 700, 704, 818, 836, 840, 913, 919, 931, 963, 964, 980, 985, 1018, 1141, 1143, 1145, 1166, 1240, 1244, 1248, 1250, 1251, 1253, 1255, 1282, 1284, 1285, 1289, 1311, 1331], "row": [15, 21, 26, 34, 35, 37, 40, 42, 43, 46, 54, 55, 57, 62, 99, 102, 107, 111, 112, 113, 114, 115, 120, 121, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 143, 144, 150, 162, 164, 166, 175, 180, 183, 186, 188, 192, 193, 194, 196, 199, 200, 201, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 223, 228, 244, 245, 255, 261, 262, 265, 267, 268, 273, 274, 276, 278, 279, 286, 287, 292, 294, 296, 297, 305, 311, 336, 337, 345, 360, 370, 461, 469, 473, 479, 505, 517, 546, 596, 597, 612, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 649, 651, 662, 668, 669, 715, 717, 722, 737, 740, 745, 747, 749, 754, 755, 768, 772, 774, 775, 777, 793, 795, 796, 803, 808, 818, 834, 837, 839, 846, 850, 853, 854, 855, 857, 862, 865, 866, 867, 869, 871, 875, 893, 898, 899, 900, 901, 903, 909, 910, 914, 916, 918, 919, 927, 931, 952, 961, 1082, 1083, 1091, 1096, 1127, 1139, 1190, 1201, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1235, 1247, 1253, 1254, 1300, 1302, 1331, 1340], "per": [15, 34, 37, 43, 125, 148, 150, 164, 192, 228, 229, 248, 256, 274, 285, 300, 302, 303, 311, 326, 347, 370, 516, 519, 521, 544, 556, 558, 579, 580, 582, 584, 586, 587, 651, 722, 727, 740, 818, 834, 887, 894, 900, 907, 922, 924, 925, 931, 935, 963, 1138, 1141, 1143, 1166, 1319, 1331], "everi": [15, 34, 43, 120, 121, 134, 188, 194, 197, 262, 265, 280, 311, 339, 340, 341, 342, 345, 347, 353, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 433, 447, 461, 473, 508, 509, 514, 517, 520, 521, 522, 531, 534, 539, 543, 615, 662, 717, 750, 751, 754, 755, 818, 850, 855, 857, 860, 899, 931, 955, 956, 957, 958, 961, 963, 969, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1054, 1068, 1082, 1091, 1094, 1130, 1131, 1136, 1139, 1142, 1143, 1144, 1153, 1156, 1161, 1165, 1204, 1247, 1302, 1331], "process": [15, 34, 43, 44, 45, 46, 60, 61, 120, 121, 122, 134, 156, 243, 311, 839, 840, 931], "liter": [16, 17, 21, 36, 122, 153, 154, 155, 247, 248, 252, 279, 284, 285, 311, 321, 364, 376, 405, 453, 454, 462, 469, 474, 476, 485, 503, 553, 557, 575, 577, 590, 591, 601, 611, 655, 658, 666, 680, 681, 711, 712, 723, 732, 734, 737, 743, 744, 745, 753, 757, 758, 761, 774, 778, 783, 785, 788, 797, 800, 802, 804, 818, 852, 886, 887, 890, 903, 906, 907, 931, 936, 979, 995, 1022, 1084, 1102, 1200, 1219, 1222, 1226, 1240, 1243, 1251, 1265, 1266, 1331], "left": [16, 17, 37, 49, 54, 143, 144, 145, 146, 194, 195, 197, 198, 213, 214, 241, 279, 311, 394, 455, 457, 458, 483, 485, 604, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 639, 674, 720, 743, 750, 751, 754, 755, 759, 760, 762, 763, 768, 793, 805, 806, 808, 818, 857, 858, 860, 861, 865, 866, 884, 903, 931, 1012, 1077, 1079, 1080, 1102, 1194, 1220, 1259, 1313, 1331], "center": [16, 17, 37, 311, 455, 457, 458, 617, 618, 619, 621, 623, 625, 627, 630, 632, 634, 818, 1077, 1079, 1080, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1331], "cell": [16, 17, 37, 311], "valueerror": [16, 21], "recognis": [16, 17, 21, 936], "column_abc": 16, "column_xyz": 16, "keyerror": 17, "datetim": [17, 34, 37, 43, 54, 115, 124, 125, 135, 150, 151, 152, 154, 165, 171, 192, 194, 195, 197, 198, 212, 214, 241, 257, 280, 311, 314, 343, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 511, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 697, 700, 720, 742, 758, 759, 760, 762, 763, 764, 770, 778, 805, 806, 818, 836, 843, 857, 858, 860, 861, 866, 884, 931, 936, 959, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1078, 1121, 1133, 1134, 1185, 1186, 1223, 1282, 1285, 1311, 1313, 1331], "date": [17, 37, 54, 69, 120, 121, 123, 125, 131, 134, 140, 165, 171, 192, 194, 195, 197, 198, 212, 214, 241, 257, 311, 314, 343, 401, 403, 404, 405, 406, 409, 412, 415, 416, 419, 424, 425, 426, 429, 430, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 511, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 697, 699, 720, 742, 759, 760, 762, 763, 770, 778, 804, 818, 836, 843, 857, 858, 860, 861, 866, 884, 931, 936, 959, 1018, 1020, 1021, 1022, 1023, 1026, 1029, 1030, 1032, 1033, 1034, 1036, 1037, 1039, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1078, 1121, 1133, 1134, 1185, 1186, 1223, 1282, 1284, 1313, 1331], "333": [17, 637, 818, 1217, 1331], "mno": [17, 21], "2023": [17, 37, 115, 142, 212, 311, 405, 764, 778, 936, 1022], "29": [17, 142, 402, 425, 1019, 1046], "2001": [17, 403, 404, 409, 412, 415, 419, 424, 429, 430, 431, 433, 438, 447, 448, 449, 450, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 697, 818, 936, 1020, 1021, 1026, 1029, 1030, 1032, 1034, 1035, 1036, 1037, 1039, 1040, 1042, 1043, 1045, 1048, 1050, 1051, 1052, 1054, 1059, 1068, 1069, 1070, 1071, 1072, 1282], "null": [17, 34, 36, 43, 49, 54, 62, 69, 110, 111, 114, 120, 121, 130, 134, 138, 140, 147, 150, 154, 161, 164, 166, 170, 171, 175, 177, 182, 183, 186, 187, 205, 213, 220, 221, 222, 229, 232, 234, 252, 253, 256, 258, 259, 260, 264, 269, 270, 274, 277, 279, 281, 284, 292, 311, 322, 324, 325, 326, 336, 339, 340, 347, 348, 355, 356, 363, 365, 369, 370, 376, 382, 383, 384, 387, 397, 399, 400, 429, 432, 440, 441, 442, 443, 444, 445, 446, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 470, 477, 483, 484, 494, 496, 497, 498, 504, 506, 507, 514, 515, 518, 519, 521, 523, 524, 525, 534, 535, 536, 537, 538, 540, 544, 546, 556, 558, 578, 591, 592, 593, 594, 597, 608, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 641, 642, 643, 645, 650, 651, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 679, 686, 688, 689, 690, 697, 698, 700, 702, 707, 708, 709, 710, 720, 721, 722, 731, 732, 733, 734, 740, 743, 744, 745, 747, 749, 753, 761, 766, 777, 778, 783, 785, 788, 795, 796, 800, 802, 808, 818, 834, 837, 842, 843, 846, 852, 853, 864, 865, 878, 888, 890, 891, 894, 900, 902, 903, 906, 908, 914, 931, 936, 940, 941, 943, 952, 955, 956, 963, 964, 971, 972, 980, 994, 995, 1002, 1014, 1016, 1017, 1053, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1075, 1077, 1078, 1079, 1080, 1084, 1086, 1087, 1093, 1094, 1100, 1101, 1117, 1118, 1120, 1126, 1128, 1129, 1132, 1136, 1137, 1140, 1141, 1143, 1145, 1146, 1147, 1157, 1159, 1160, 1162, 1166, 1168, 1176, 1189, 1190, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1221, 1226, 1227, 1231, 1236, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1262, 1263, 1264, 1271, 1273, 1274, 1275, 1282, 1283, 1285, 1287, 1292, 1295, 1308, 1311, 1312, 1313, 1321, 1331, 1339, 1340], "07": [17, 120, 150, 171, 311, 401, 404, 405, 419, 432, 433, 447, 697, 758, 759, 761, 762, 770, 843, 931, 936, 1018, 1022, 1053, 1282], "05": [17, 140, 143, 144, 145, 146, 150, 165, 171, 280, 311, 401, 404, 405, 406, 407, 408, 413, 417, 419, 420, 422, 425, 426, 427, 432, 434, 436, 437, 439, 440, 742, 758, 759, 761, 762, 836, 843, 866, 931, 936, 1022, 1023, 1024, 1025, 1053, 1054, 1057, 1058, 1060, 1061, 1068], "visibl": [18, 178, 311, 1076, 1331], "eg": [18, 26, 37, 62, 123, 159, 268, 311, 433, 697, 700, 723, 818, 936, 1094, 1282, 1285, 1331], "low": [18, 122, 604, 818, 1194, 1331], "rang": [18, 37, 122, 123, 171, 178, 194, 212, 311, 327, 395, 401, 409, 424, 430, 431, 433, 447, 448, 483, 737, 742, 744, 758, 759, 760, 761, 762, 763, 774, 775, 804, 805, 806, 818, 843, 857, 931, 936, 1013, 1018, 1026, 1045, 1051, 1052, 1054, 1068, 1069, 1076, 1190, 1331], "98": [18, 204, 311, 369, 472, 475, 650, 701, 721, 818, 1286], "99": [18, 37, 181, 182, 204, 207, 279, 311, 320, 369, 462, 464, 472, 475, 650, 721, 808, 818, 851, 852, 903, 931, 1074, 1084, 1331], "tbl_col": 18, "95": [18, 320, 818, 936], "96": [18, 171, 311, 320, 818, 843, 931, 1125, 1331], "97": [18, 204, 311, 320, 818, 1125, 1331], "move": [19, 244, 311, 401, 455, 456, 457, 458, 619, 621, 625, 632, 818, 1018, 1077, 1078, 1079, 1080, 1207, 1208, 1210, 1214, 1331], "inlin": [19, 244, 311, 655, 663, 664, 666, 680, 681, 1240, 1248, 1249, 1251, 1265, 1266], "parenthes": 19, "inform": [20, 24, 35, 59, 124, 132, 135, 136, 139, 143, 145, 169, 171, 311, 314, 501, 648, 655, 663, 664, 666, 680, 681, 818, 843, 880, 931, 935, 989, 1125, 1234, 1240, 1248, 1249, 1251, 1265, 1266, 1331, 1335], "below": [20, 36, 124, 125, 135, 136, 175, 232, 311, 464, 667, 698, 759, 760, 762, 763, 805, 806, 808, 814, 818, 846, 931, 1252, 1283, 1339], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_no_bord": 21, "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_horizontal_onli": 21, "ascii_markdown": 21, "utf8_ful": [21, 54, 115], "utf8_no_bord": 21, "utf8_borders_onli": 21, "utf8_horizontal_onli": 21, "noth": [21, 663, 670, 1248, 1255], "rounded_corn": 21, "border": 21, "includ": [21, 31, 34, 36, 37, 43, 59, 113, 122, 124, 135, 136, 150, 151, 164, 171, 178, 183, 230, 244, 273, 274, 275, 278, 279, 311, 369, 394, 434, 465, 469, 480, 485, 564, 604, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 687, 688, 692, 693, 721, 722, 742, 750, 754, 795, 796, 818, 834, 843, 853, 900, 903, 931, 936, 1012, 1013, 1055, 1076, 1087, 1097, 1102, 1194, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1272, 1273, 1277, 1321, 1331], "divid": [21, 394, 433, 447, 455, 457, 458, 469, 501, 604, 818, 1012, 1054, 1068, 1077, 1079, 1080, 1125, 1194, 1331], "same": [21, 36, 37, 51, 53, 54, 60, 61, 62, 91, 92, 126, 134, 143, 144, 145, 146, 148, 159, 183, 193, 217, 232, 243, 244, 256, 276, 284, 285, 289, 297, 311, 318, 325, 359, 399, 400, 465, 469, 471, 472, 475, 545, 562, 566, 596, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 651, 662, 671, 710, 818, 839, 840, 853, 856, 870, 871, 894, 901, 906, 907, 911, 931, 938, 943, 975, 1012, 1016, 1017, 1022, 1167, 1176, 1194, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1247, 1256, 1310, 1322, 1331], "dens": [21, 192, 311, 607, 818, 1196, 1331], "space": [21, 194, 311, 857, 931, 936], "horizont": [21, 62, 96, 186, 202, 218, 219, 220, 221, 225, 226, 259, 260, 278, 311, 732, 734, 744, 745, 750, 751, 753, 754, 755, 757, 765, 768, 783, 785, 788, 793, 802], "markdown": 21, "compat": [21, 37, 42, 46, 311, 655, 657, 658, 663, 664, 665, 666, 680, 681, 931, 936, 1240, 1242, 1243, 1248, 1249, 1250, 1251, 1265, 1266], "utf8": [21, 120, 121, 134, 667, 686, 698, 1252, 1271, 1283], "No": [21, 705, 1290], "round": [21, 37, 56, 115, 122, 311, 375, 381, 468, 637, 718, 818, 992, 1089, 1217, 1331], "corner": [21, 37, 115, 311], "op": [21, 125, 154, 311, 564, 610, 818, 931, 1285, 1331], "The": [21, 35, 36, 37, 40, 42, 46, 47, 51, 53, 54, 59, 60, 63, 68, 69, 71, 72, 79, 83, 84, 92, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 129, 130, 131, 132, 134, 138, 139, 140, 143, 144, 145, 146, 150, 151, 152, 154, 156, 171, 174, 175, 176, 179, 180, 183, 192, 193, 194, 197, 199, 205, 211, 214, 217, 224, 230, 241, 242, 243, 244, 247, 248, 257, 268, 269, 277, 280, 284, 285, 287, 288, 289, 297, 311, 321, 363, 364, 365, 366, 394, 399, 400, 401, 409, 424, 429, 430, 433, 436, 447, 448, 459, 462, 465, 469, 470, 478, 515, 519, 544, 556, 557, 558, 570, 596, 604, 607, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 645, 648, 654, 659, 660, 663, 667, 668, 669, 675, 677, 678, 680, 681, 685, 691, 692, 693, 694, 695, 696, 697, 698, 708, 711, 742, 766, 770, 778, 781, 795, 796, 797, 800, 808, 810, 811, 813, 814, 818, 819, 820, 823, 825, 826, 827, 843, 846, 848, 849, 853, 856, 857, 860, 862, 864, 866, 869, 871, 876, 880, 884, 886, 887, 888, 895, 902, 906, 907, 910, 911, 919, 931, 935, 936, 939, 942, 979, 980, 981, 994, 1012, 1013, 1016, 1017, 1018, 1026, 1045, 1050, 1051, 1054, 1057, 1068, 1069, 1083, 1084, 1087, 1095, 1137, 1141, 1175, 1176, 1194, 1196, 1200, 1201, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1231, 1234, 1239, 1244, 1245, 1252, 1253, 1254, 1260, 1262, 1263, 1265, 1266, 1270, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1310, 1311, 1323, 1325, 1327, 1331, 1332, 1336, 1337, 1338, 1340], "one": [21, 34, 35, 37, 43, 52, 54, 99, 108, 110, 111, 112, 113, 114, 120, 121, 125, 129, 130, 131, 134, 153, 155, 159, 165, 182, 183, 192, 193, 194, 195, 197, 198, 211, 223, 232, 241, 242, 243, 250, 252, 269, 272, 290, 311, 320, 355, 394, 464, 465, 469, 472, 475, 477, 538, 546, 551, 579, 580, 582, 584, 586, 587, 615, 616, 641, 650, 663, 664, 665, 682, 708, 781, 798, 808, 814, 818, 836, 852, 853, 856, 857, 858, 860, 861, 875, 884, 889, 890, 908, 912, 931, 942, 971, 976, 1012, 1086, 1093, 1121, 1160, 1168, 1173, 1194, 1204, 1226, 1248, 1249, 1250, 1267, 1293, 1311, 1331, 1335], "more": [21, 37, 40, 42, 46, 52, 54, 62, 91, 92, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 143, 145, 150, 159, 169, 171, 183, 210, 211, 215, 217, 223, 228, 242, 243, 245, 257, 268, 269, 273, 276, 297, 311, 314, 323, 326, 361, 465, 469, 477, 501, 533, 547, 551, 556, 558, 595, 638, 648, 664, 671, 697, 699, 700, 724, 736, 747, 767, 773, 776, 784, 786, 789, 790, 798, 808, 818, 843, 875, 895, 901, 931, 935, 936, 943, 977, 989, 1013, 1093, 1121, 1125, 1155, 1169, 1176, 1218, 1234, 1249, 1256, 1282, 1284, 1285, 1309, 1311, 1316, 1331, 1335, 1340], "semigraph": 21, "box": [21, 217, 311], "draw": [21, 26, 150, 154, 1340], "found": [21, 34, 37, 43, 49, 94, 104, 106, 111, 115, 176, 257, 311, 639, 666, 670, 695, 696, 697, 700, 818, 895, 931, 1220, 1251, 1255, 1280, 1281, 1282, 1285, 1331, 1339], "unicod": [21, 667, 672, 686, 698, 936, 1252, 1257, 1271, 1283], "block": [21, 61, 193, 196, 276, 311, 808, 840, 856, 859, 882, 901, 909, 910, 919, 931, 1219, 1222, 1331], "http": [21, 37, 38, 39, 109, 122, 123, 126, 128, 161, 169, 311, 663, 665, 892, 931, 1248, 1250], "en": [21, 37, 311], "wikipedia": 21, "org": [21, 38, 39, 109, 122, 123, 126, 128, 161, 169, 311, 892, 931], "wiki": 21, "drawing_charact": 21, "box_draw": 21, "tbl_format": 21, "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "hide": [22, 23, 24, 25, 37, 311], "etc": [22, 36, 37, 120, 124, 125, 126, 128, 135, 136, 137, 311, 818, 935, 936, 1219, 1222, 1331], "between": [25, 62, 147, 148, 150, 154, 169, 234, 243, 303, 311, 348, 371, 397, 398, 485, 514, 523, 534, 535, 536, 537, 597, 604, 605, 627, 628, 654, 738, 739, 742, 746, 748, 792, 795, 796, 818, 881, 925, 931, 964, 985, 989, 1014, 1015, 1102, 1136, 1145, 1156, 1157, 1158, 1159, 1190, 1194, 1195, 1211, 1239, 1331], "set_tbl_column_data_type_inlin": 25, "max": [26, 37, 42, 46, 47, 171, 182, 193, 219, 232, 241, 311, 377, 384, 389, 464, 546, 556, 596, 607, 611, 616, 619, 620, 640, 689, 783, 798, 818, 843, 852, 856, 884, 931, 996, 1003, 1007, 1013, 1086, 1168, 1196, 1207, 1224, 1274, 1331], "tbl_row": [26, 171, 311, 843, 931], "width": [27, 37, 63, 120, 121, 134, 311, 314, 545, 931, 1167], "id": [27, 37, 62, 120, 136, 268, 275, 287, 297, 311, 615, 680, 681, 725, 818, 910, 919, 931, 936, 1204, 1317, 1331, 1340], "seq1": 27, "seq2": 27, "seq": 27, "atgataaaggag": 27, "gcaacgcatata": 27, "12": [27, 37, 54, 115, 120, 142, 150, 171, 194, 210, 214, 241, 253, 257, 280, 311, 321, 377, 378, 386, 402, 404, 405, 409, 419, 424, 425, 426, 429, 430, 431, 433, 447, 448, 449, 456, 483, 500, 520, 555, 597, 602, 606, 616, 632, 642, 643, 658, 674, 684, 701, 713, 751, 758, 759, 760, 761, 762, 763, 780, 804, 805, 806, 818, 843, 857, 862, 866, 869, 884, 891, 892, 898, 931, 936, 996, 997, 1019, 1021, 1022, 1039, 1045, 1054, 1068, 1078, 1176, 1216, 1227, 1243, 1259, 1269, 1286, 1331, 1340], "atg": 27, "ata": 27, "aag": 27, "gag": 27, "gca": 27, "acg": 27, "cat": [27, 53, 91, 92, 394, 604, 655, 658, 703, 706, 720, 745, 813, 818, 936, 1012, 1097, 1194, 1240, 1243, 1288, 1291, 1327, 1331], "also": [28, 34, 37, 43, 52, 53, 111, 122, 125, 126, 131, 134, 149, 150, 153, 154, 159, 176, 193, 194, 195, 197, 198, 224, 228, 241, 243, 247, 256, 268, 279, 284, 287, 311, 384, 387, 401, 429, 432, 465, 485, 558, 564, 607, 611, 619, 621, 623, 625, 627, 630, 632, 634, 651, 680, 681, 692, 693, 708, 742, 750, 751, 754, 755, 758, 759, 761, 768, 770, 793, 808, 817, 818, 824, 856, 857, 858, 860, 861, 876, 884, 886, 894, 903, 906, 908, 910, 931, 936, 1018, 1053, 1102, 1196, 1200, 1242, 1243, 1265, 1266, 1277, 1331, 1335], "char": [28, 664, 1249], "omit": [28, 111, 115, 148, 159, 228, 244, 268, 273, 311, 433, 447, 774, 775, 790, 805, 806, 936, 1054, 1068], "set_decimal_separ": 28, "x": [28, 49, 50, 54, 62, 83, 97, 109, 115, 120, 121, 123, 134, 147, 148, 150, 161, 178, 202, 206, 208, 213, 223, 232, 243, 244, 275, 278, 311, 314, 319, 321, 323, 343, 348, 383, 395, 453, 454, 469, 474, 476, 478, 503, 510, 523, 551, 553, 555, 556, 558, 575, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 595, 601, 602, 610, 611, 615, 645, 648, 688, 711, 712, 713, 720, 723, 730, 732, 734, 738, 739, 750, 751, 753, 768, 778, 780, 783, 785, 788, 793, 802, 808, 818, 865, 871, 875, 893, 895, 931, 936, 964, 989, 1002, 1086, 1123, 1176, 1200, 1231, 1234, 1273, 1309, 1313, 1314, 1331, 1339], "1234567": 28, "987654": [28, 936], "10101": 28, "y": [28, 54, 62, 83, 97, 109, 115, 147, 148, 150, 161, 178, 206, 208, 213, 223, 232, 243, 244, 275, 278, 311, 314, 319, 321, 323, 343, 348, 436, 439, 453, 454, 474, 476, 503, 510, 523, 553, 555, 558, 578, 580, 582, 584, 586, 587, 590, 591, 595, 602, 610, 611, 615, 697, 699, 700, 711, 713, 723, 730, 732, 734, 738, 739, 753, 764, 778, 783, 785, 788, 802, 818, 865, 875, 893, 895, 931, 936, 964, 989, 1057, 1060, 1200, 1282, 1284, 1285, 1331], "1234": [28, 637, 818, 1217, 1331], "7654321": 28, "234": 28, "567": 28, "987": 28, "654": [28, 895, 931], "00": [28, 37, 69, 165, 194, 280, 311, 402, 403, 406, 411, 425, 426, 429, 432, 433, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 697, 700, 704, 761, 762, 763, 764, 804, 805, 806, 818, 836, 857, 866, 931, 936, 1019, 1020, 1023, 1024, 1025, 1028, 1029, 1030, 1036, 1037, 1043, 1046, 1047, 1048, 1050, 1053, 1054, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1282, 1285, 1289], "321": [28, 1340], "strip": [29, 675, 685, 692, 693, 694, 695, 696, 1260, 1270, 1277, 1278, 1279], "trail": [29, 192, 311, 685, 691, 692, 693, 1270, 1276, 1277, 1278], "zero": [29, 37, 108, 109, 118, 120, 121, 126, 128, 132, 149, 152, 161, 182, 211, 242, 257, 263, 269, 270, 311, 464, 546, 551, 639, 648, 707, 723, 818, 837, 852, 931, 994, 1086, 1168, 1234, 1292, 1305, 1311, 1312, 1331], "enabl": [29, 30, 53, 91, 92, 143, 144, 145, 146, 158, 247, 270, 284, 311, 322, 324, 611, 640, 656, 682, 727, 814, 818, 839, 886, 906, 931, 940, 941, 1200, 1224, 1241, 1267, 1312, 1319, 1331], "d": [29, 32, 34, 36, 37, 38, 39, 42, 111, 140, 192, 194, 199, 200, 204, 213, 261, 263, 273, 278, 282, 293, 295, 298, 299, 300, 301, 302, 303, 304, 311, 319, 321, 383, 412, 436, 439, 485, 600, 643, 658, 664, 680, 681, 688, 697, 699, 700, 743, 764, 770, 818, 857, 865, 895, 915, 917, 920, 921, 922, 923, 924, 925, 926, 931, 936, 989, 1002, 1029, 1057, 1060, 1102, 1132, 1243, 1249, 1265, 1266, 1273, 1282, 1284, 1285, 1296, 1331], "01": [29, 54, 68, 69, 150, 165, 171, 192, 194, 214, 241, 280, 311, 401, 402, 403, 404, 405, 406, 407, 408, 412, 413, 415, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 456, 616, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 697, 699, 700, 704, 742, 758, 759, 760, 761, 762, 763, 764, 818, 836, 843, 857, 884, 931, 936, 1018, 1020, 1022, 1023, 1024, 1025, 1029, 1030, 1036, 1037, 1043, 1046, 1047, 1048, 1050, 1053, 1054, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1282, 1284, 1285, 1289], "6789": [29, 936], "scale": [29, 70, 178, 311, 558, 600, 701, 818, 936, 1076, 1286, 1331], "trim_decimal_zero": 29, "01000": 29, "67890": 29, "addit": [30, 33, 35, 36, 37, 111, 119, 124, 125, 135, 136, 148, 150, 152, 154, 175, 179, 193, 196, 230, 247, 248, 250, 256, 270, 277, 284, 285, 289, 311, 319, 411, 459, 462, 596, 651, 655, 663, 664, 666, 680, 681, 708, 711, 740, 743, 744, 745, 766, 797, 800, 818, 849, 856, 859, 886, 887, 889, 894, 902, 906, 907, 911, 931, 936, 1019, 1028, 1084, 1240, 1248, 1249, 1251, 1265, 1266, 1312, 1331, 1335], "verbos": [30, 143, 145, 159, 664, 1249], "debug": [30, 839, 850, 870, 871, 931, 1340], "log": [30, 56, 369, 370, 452, 551, 577, 601, 721, 722, 818, 984, 1074, 1315, 1331], "do_polars_oper": 30, "if_set": 31, "env_onli": 31, "dict": [31, 35, 36, 37, 42, 50, 55, 57, 59, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 150, 185, 211, 230, 236, 242, 243, 244, 264, 265, 268, 273, 275, 311, 557, 818, 882, 931, 935, 936, 1175, 1331], "show": [31, 37, 51, 171, 175, 192, 215, 229, 311, 480, 818, 843, 846, 880, 892, 931, 1097, 1331], "variabl": [31, 49, 79, 132, 139, 153, 156, 223, 266, 311, 875, 931, 1306, 1331, 1339], "chang": [31, 38, 43, 44, 45, 46, 54, 60, 61, 70, 72, 120, 121, 122, 132, 139, 140, 257, 268, 273, 278, 279, 280, 286, 311, 326, 393, 394, 397, 433, 480, 557, 558, 596, 597, 604, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 795, 796, 818, 839, 840, 895, 903, 909, 931, 935, 936, 988, 989, 990, 1011, 1012, 1054, 1097, 1175, 1190, 1194, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1229, 1309, 1314, 1331], "restrict": [31, 689, 1274], "dictionari": [31, 37, 59, 83, 108, 110, 111, 112, 114, 120, 121, 122, 123, 127, 129, 130, 133, 134, 138, 211, 230, 242, 243, 244, 264, 265, 268, 273, 311, 557, 818, 931, 1175, 1331], "those": [31, 37, 120, 244, 270, 279, 311, 469, 607, 663, 781, 818, 903, 931, 936, 1196, 1248, 1312, 1331], "been": [31, 37, 157, 161, 162, 184, 187, 195, 196, 197, 198, 203, 238, 262, 291, 292, 311, 326, 388, 389, 390, 391, 392, 471, 488, 492, 495, 500, 512, 526, 544, 554, 555, 557, 558, 573, 602, 607, 617, 619, 621, 623, 625, 627, 630, 632, 634, 657, 669, 673, 674, 675, 676, 679, 684, 685, 691, 713, 716, 717, 735, 754, 755, 756, 757, 779, 818, 858, 859, 860, 861, 870, 899, 913, 914, 931, 943, 1007, 1008, 1009, 1010, 1107, 1113, 1134, 1148, 1166, 1175, 1196, 1205, 1221, 1223, 1242, 1254, 1258, 1259, 1260, 1261, 1264, 1269, 1270, 1276, 1301, 1302, 1331], "set_fmt_float": 31, "via": [31, 120, 121, 122, 132, 134, 137, 138, 139, 172, 211, 243, 311, 326, 396, 558, 665, 818, 844, 931, 1250], "set_stat": 31, "all_stat": 31, "io": [32, 34, 37, 38, 39, 118, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 172, 311, 396, 471, 570, 818, 844, 888, 931], "byte": [32, 34, 37, 38, 39, 42, 43, 46, 118, 119, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 178, 311, 667, 671, 672, 673, 686, 698, 931, 1076, 1252, 1256, 1257, 1258, 1271, 1283, 1331], "compress": [32, 38, 39, 42, 44, 46, 311, 614, 818, 931, 1203, 1331], "avrocompress": [32, 311], "uncompress": [32, 38, 39, 42, 46, 126, 137, 311, 931], "write": [32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 119, 121, 126, 159, 311, 376, 573, 818, 868, 892, 931, 936, 995, 1331], "apach": [32, 38, 39, 42, 118, 122, 123, 126, 128, 136, 311], "avro": [32, 118, 311, 830], "writabl": [32, 34, 38, 39, 40, 41, 42, 249, 269, 311, 1311, 1331], "like": [32, 34, 36, 38, 39, 40, 41, 42, 61, 109, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 172, 194, 206, 208, 213, 244, 249, 268, 269, 311, 396, 402, 471, 516, 556, 572, 607, 663, 693, 694, 727, 814, 818, 835, 840, 844, 857, 931, 935, 1019, 1138, 1196, 1248, 1319, 1331], "object": [32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 52, 62, 83, 97, 109, 110, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 148, 150, 151, 161, 172, 193, 194, 196, 197, 214, 215, 241, 244, 249, 257, 268, 269, 270, 311, 396, 570, 759, 760, 762, 763, 778, 805, 806, 818, 830, 844, 857, 858, 860, 861, 866, 884, 895, 931, 936, 1305, 1331, 1339], "snappi": [32, 42, 46, 311, 931], "deflat": [32, 311], "pathlib": [32, 34, 38, 39, 42, 134, 311], "foo": [32, 34, 36, 38, 39, 40, 41, 42, 51, 129, 130, 165, 168, 169, 173, 174, 175, 176, 177, 180, 183, 186, 189, 190, 191, 199, 200, 201, 202, 204, 205, 207, 213, 217, 218, 219, 220, 221, 222, 225, 226, 229, 232, 234, 236, 237, 239, 242, 245, 246, 247, 249, 251, 255, 258, 259, 260, 261, 263, 265, 266, 267, 269, 270, 271, 275, 276, 277, 281, 282, 283, 288, 311, 372, 394, 396, 429, 473, 479, 482, 505, 562, 564, 566, 567, 568, 569, 570, 571, 572, 604, 612, 654, 658, 660, 662, 664, 665, 683, 687, 689, 692, 693, 694, 695, 696, 703, 706, 715, 736, 746, 747, 748, 767, 771, 772, 773, 776, 777, 782, 784, 786, 787, 789, 790, 792, 797, 799, 803, 807, 808, 814, 818, 836, 841, 845, 846, 847, 853, 863, 864, 865, 878, 882, 885, 886, 901, 902, 905, 908, 931, 936, 986, 1012, 1050, 1145, 1194, 1201, 1243, 1245, 1247, 1249, 1250, 1268, 1274, 1280, 1281, 1288, 1291, 1331], "bar": [32, 34, 36, 38, 39, 40, 41, 42, 51, 129, 130, 165, 168, 169, 173, 174, 175, 176, 177, 180, 183, 186, 189, 190, 191, 200, 202, 204, 205, 207, 213, 217, 218, 219, 220, 221, 222, 225, 226, 229, 232, 234, 236, 237, 239, 242, 245, 246, 247, 249, 255, 258, 259, 260, 261, 263, 265, 266, 267, 269, 270, 271, 276, 277, 281, 282, 283, 288, 311, 372, 396, 482, 562, 564, 566, 567, 568, 569, 570, 571, 572, 648, 658, 660, 662, 664, 665, 683, 687, 689, 695, 696, 736, 746, 747, 748, 767, 772, 773, 776, 777, 782, 784, 786, 787, 789, 790, 797, 799, 803, 807, 808, 814, 818, 836, 841, 845, 846, 847, 853, 863, 864, 865, 878, 882, 885, 886, 901, 902, 905, 931, 936, 986, 1145, 1234, 1243, 1245, 1247, 1249, 1250, 1268, 1274, 1280, 1281, 1331], "ham": [32, 34, 36, 38, 39, 42, 165, 168, 169, 173, 174, 175, 176, 177, 183, 190, 199, 200, 202, 213, 218, 220, 222, 225, 229, 234, 236, 239, 242, 245, 246, 247, 255, 258, 259, 261, 266, 267, 269, 270, 271, 276, 281, 282, 311, 372, 571, 836, 841, 845, 846, 847, 853, 865, 878, 882, 885, 886, 901, 908, 931, 986], "dirpath": [32, 34, 38, 39, 42, 134, 311], "new_fil": [32, 34, 38, 39, 42, 311], "t": [33, 34, 36, 43, 49, 50, 62, 119, 120, 125, 131, 134, 194, 214, 217, 231, 276, 278, 311, 326, 393, 402, 411, 432, 452, 455, 457, 458, 516, 558, 600, 663, 666, 680, 681, 694, 697, 700, 808, 818, 857, 879, 901, 931, 936, 1011, 1053, 1074, 1077, 1079, 1080, 1138, 1176, 1221, 1248, 1251, 1265, 1266, 1278, 1279, 1282, 1285, 1321, 1331], "kwarg": [33, 50, 53, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 119, 122, 123, 150, 152, 154, 169, 183, 231, 270, 311, 600, 818, 853, 879, 931, 935, 1312, 1331, 1339], "copi": [33, 108, 109, 119, 161, 166, 167, 212, 263, 269, 270, 284, 311, 462, 818, 837, 838, 906, 931, 994, 998, 1084, 1305, 1310, 1311, 1312, 1331], "csv": [33, 34, 43, 44, 45, 46, 119, 120, 121, 125, 134, 311, 830, 931], "system": [33, 120, 121, 311, 406, 1023], "clipboard": [33, 119, 311, 830], "write_csv": [33, 121, 134, 311], "past": [33, 311, 870, 871, 931], "excel": [33, 37, 119, 125, 311, 830], "similar": [33, 42, 119, 156, 186, 214, 252, 311, 355, 436, 439, 538, 596, 641, 711, 777, 808, 818, 850, 866, 890, 931, 971, 1057, 1060, 1160, 1226, 1331], "spreadsheet": [33, 119, 125, 131, 232, 311], "softwar": [33, 119, 311], "field": [33, 34, 36, 43, 83, 104, 106, 111, 277, 311, 360, 546, 581, 583, 585, 614, 664, 665, 668, 688, 689, 710, 711, 727, 750, 751, 754, 755, 780, 800, 818, 902, 931, 976, 1012, 1168, 1194, 1203, 1250, 1273, 1274, 1296, 1298, 1331], "symbol": [33, 34, 43, 311, 818, 931], "argument": [33, 36, 42, 92, 119, 120, 124, 132, 134, 135, 150, 152, 154, 169, 173, 179, 193, 194, 195, 196, 197, 198, 214, 218, 220, 225, 230, 231, 241, 247, 248, 250, 256, 259, 270, 277, 280, 284, 285, 289, 311, 433, 447, 456, 459, 465, 485, 556, 596, 600, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 651, 692, 693, 694, 711, 731, 738, 739, 740, 743, 744, 745, 747, 749, 766, 797, 800, 808, 818, 845, 849, 856, 857, 858, 859, 860, 861, 879, 884, 886, 887, 889, 894, 902, 906, 907, 911, 931, 935, 936, 1054, 1068, 1102, 1277, 1278, 1279, 1312, 1331], "pass": [33, 35, 36, 37, 42, 50, 54, 110, 119, 122, 123, 125, 132, 134, 140, 143, 145, 148, 150, 152, 154, 164, 169, 173, 193, 194, 197, 200, 216, 230, 231, 241, 247, 252, 256, 261, 270, 273, 274, 280, 284, 288, 289, 311, 314, 326, 355, 370, 401, 412, 429, 432, 462, 482, 538, 556, 557, 558, 596, 600, 611, 616, 619, 621, 623, 625, 627, 630, 632, 634, 641, 651, 692, 693, 694, 722, 731, 740, 742, 749, 759, 770, 800, 808, 814, 818, 834, 845, 856, 857, 858, 860, 861, 863, 870, 871, 879, 884, 886, 890, 892, 894, 900, 906, 911, 919, 931, 935, 943, 971, 1018, 1029, 1053, 1084, 1096, 1127, 1160, 1175, 1176, 1200, 1226, 1277, 1278, 1279, 1300, 1312, 1331, 1335], "read_clipboard": [33, 311], "read": [33, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 172, 180, 311, 396, 471, 808, 818, 844, 850, 931, 1083, 1331], "comma": [33, 34, 120, 121, 134, 311], "include_bom": [34, 43, 311, 931], "include_head": [34, 37, 43, 121, 275, 311, 931], "line_termin": [34, 43, 311, 931], "quote_char": [34, 43, 120, 121, 134, 311, 931], "batch_siz": [34, 43, 120, 121, 122, 138, 140, 273, 311, 931], "1024": [34, 42, 43, 46, 120, 121, 122, 138, 311, 931], "datetime_format": [34, 43, 311, 931], "date_format": [34, 43, 311, 931], "time_format": [34, 43, 311, 931], "null_valu": [34, 43, 120, 121, 134, 311, 931], "quote_styl": [34, 43, 311, 931], "csvquotestyl": [34, 43, 311, 931], "If": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 53, 59, 60, 61, 62, 70, 108, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 151, 152, 153, 161, 162, 175, 180, 192, 194, 195, 197, 198, 200, 209, 210, 211, 214, 216, 217, 221, 228, 230, 232, 241, 243, 244, 245, 249, 252, 255, 257, 260, 261, 265, 266, 268, 269, 275, 276, 278, 279, 288, 311, 322, 324, 326, 348, 355, 360, 401, 405, 406, 425, 426, 436, 439, 465, 480, 485, 501, 523, 533, 538, 539, 546, 556, 558, 564, 570, 571, 596, 604, 607, 609, 611, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 641, 644, 648, 649, 654, 664, 665, 666, 667, 668, 669, 675, 685, 686, 687, 688, 689, 691, 692, 693, 694, 697, 698, 699, 700, 704, 707, 727, 731, 733, 735, 737, 741, 742, 745, 746, 749, 750, 759, 760, 762, 763, 764, 767, 768, 774, 775, 776, 778, 781, 790, 791, 794, 795, 796, 800, 805, 806, 808, 809, 818, 839, 840, 846, 848, 857, 858, 860, 861, 865, 866, 871, 875, 882, 884, 888, 890, 893, 895, 901, 903, 913, 919, 931, 935, 936, 940, 941, 943, 964, 971, 976, 995, 1012, 1018, 1022, 1023, 1046, 1047, 1057, 1060, 1083, 1094, 1096, 1097, 1102, 1124, 1125, 1127, 1145, 1155, 1160, 1161, 1168, 1176, 1194, 1196, 1198, 1200, 1201, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1218, 1220, 1224, 1226, 1230, 1234, 1235, 1239, 1249, 1250, 1251, 1252, 1253, 1254, 1260, 1270, 1271, 1272, 1273, 1274, 1276, 1277, 1278, 1279, 1282, 1283, 1284, 1285, 1289, 1292, 1300, 1305, 1309, 1311, 1319, 1321, 1331, 1339], "instead": [34, 36, 40, 41, 47, 51, 54, 61, 62, 110, 111, 114, 120, 121, 122, 125, 131, 132, 134, 140, 147, 148, 149, 150, 154, 163, 164, 192, 194, 210, 211, 214, 217, 228, 230, 237, 242, 243, 244, 247, 248, 249, 252, 253, 268, 269, 270, 274, 280, 284, 285, 286, 288, 311, 314, 336, 355, 370, 377, 378, 394, 408, 410, 414, 418, 421, 423, 428, 432, 433, 435, 447, 456, 459, 469, 538, 556, 570, 604, 619, 621, 623, 625, 627, 630, 632, 634, 641, 642, 662, 671, 672, 675, 680, 681, 685, 691, 692, 693, 694, 695, 696, 697, 700, 707, 722, 729, 737, 741, 747, 759, 760, 761, 762, 763, 764, 774, 775, 791, 794, 800, 805, 806, 809, 818, 833, 834, 840, 848, 857, 886, 887, 888, 890, 891, 900, 906, 907, 909, 931, 936, 952, 971, 980, 996, 997, 1012, 1025, 1027, 1031, 1038, 1041, 1044, 1049, 1053, 1054, 1056, 1068, 1078, 1094, 1103, 1109, 1112, 1119, 1121, 1123, 1160, 1194, 1219, 1222, 1226, 1227, 1236, 1247, 1256, 1257, 1260, 1265, 1266, 1270, 1276, 1277, 1278, 1279, 1282, 1285, 1292, 1311, 1312, 1331, 1335, 1339], "whether": [34, 43, 112, 114, 154, 158, 164, 177, 187, 194, 195, 197, 198, 210, 214, 241, 250, 256, 274, 311, 322, 324, 339, 340, 369, 370, 415, 434, 456, 477, 506, 507, 616, 640, 651, 721, 722, 740, 818, 834, 857, 858, 860, 861, 870, 871, 884, 889, 894, 900, 931, 936, 940, 941, 955, 956, 987, 990, 1032, 1055, 1075, 1078, 1093, 1128, 1129, 1221, 1331, 1339], "utf": [34, 43, 82, 311, 931], "bom": [34, 43, 311, 931], "header": [34, 37, 42, 43, 46, 115, 120, 121, 125, 134, 176, 232, 275, 311, 931], "end": [34, 37, 43, 120, 121, 134, 194, 311, 364, 367, 368, 402, 433, 459, 539, 655, 661, 664, 667, 677, 686, 690, 692, 693, 696, 737, 742, 758, 759, 760, 761, 762, 763, 766, 774, 775, 805, 806, 808, 818, 857, 862, 869, 880, 931, 936, 982, 1019, 1054, 1120, 1161, 1246, 1249, 1252, 1262, 1271, 1275, 1277, 1278, 1283, 1331], "each": [34, 37, 43, 54, 63, 70, 79, 121, 122, 125, 138, 143, 144, 145, 146, 148, 168, 170, 176, 183, 192, 193, 194, 195, 196, 197, 198, 212, 214, 217, 230, 241, 243, 245, 268, 273, 277, 279, 280, 288, 289, 292, 294, 296, 297, 305, 311, 336, 370, 394, 433, 447, 465, 488, 489, 492, 493, 522, 525, 526, 533, 543, 551, 558, 596, 604, 607, 614, 615, 623, 627, 630, 634, 638, 644, 651, 664, 667, 671, 672, 673, 676, 686, 688, 689, 698, 722, 737, 740, 745, 774, 775, 800, 808, 818, 839, 841, 842, 847, 853, 857, 858, 860, 861, 866, 880, 884, 902, 903, 911, 913, 914, 916, 918, 919, 927, 931, 952, 993, 1012, 1054, 1068, 1107, 1108, 1113, 1114, 1144, 1147, 1148, 1155, 1165, 1194, 1196, 1203, 1204, 1218, 1230, 1249, 1252, 1256, 1257, 1258, 1261, 1271, 1273, 1274, 1283, 1298, 1331, 1340], "quot": [34, 35, 43, 120, 121, 123, 134, 311, 931], "specifi": [34, 36, 37, 43, 54, 94, 104, 106, 125, 131, 151, 164, 165, 178, 179, 182, 193, 194, 195, 196, 197, 198, 213, 230, 241, 242, 244, 247, 248, 250, 252, 256, 268, 274, 277, 284, 285, 289, 311, 370, 376, 455, 457, 458, 459, 464, 596, 610, 611, 619, 621, 623, 625, 627, 630, 632, 634, 641, 651, 711, 722, 740, 743, 744, 745, 759, 760, 762, 763, 764, 766, 797, 800, 805, 806, 818, 834, 836, 849, 852, 856, 857, 858, 859, 860, 861, 865, 884, 886, 887, 889, 890, 894, 900, 902, 906, 907, 911, 931, 936, 995, 1076, 1077, 1079, 1080, 1086, 1200, 1226, 1309, 1331], "defin": [34, 37, 43, 69, 122, 129, 147, 148, 150, 162, 165, 175, 179, 194, 195, 197, 198, 217, 228, 231, 241, 279, 291, 297, 311, 326, 485, 519, 544, 558, 600, 604, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 667, 672, 686, 698, 735, 759, 760, 762, 763, 781, 800, 805, 806, 818, 836, 846, 849, 857, 858, 860, 861, 879, 884, 903, 913, 919, 931, 936, 943, 1102, 1141, 1176, 1194, 1204, 1252, 1257, 1271, 1283, 1331], "chrono": [34, 43, 311, 436, 439, 697, 699, 700, 704, 931, 1057, 1060, 1282, 1284, 1285, 1289], "rust": [34, 42, 43, 101, 126, 128, 132, 217, 297, 311, 665, 931, 935, 1176, 1250, 1331], "crate": [34, 43, 311, 655, 657, 658, 663, 664, 665, 666, 680, 681, 697, 699, 700, 704, 931, 936, 1240, 1242, 1243, 1248, 1249, 1250, 1251, 1265, 1266, 1282, 1284, 1285, 1289], "fraction": [34, 43, 143, 144, 145, 146, 245, 311, 434, 533, 597, 638, 697, 700, 818, 931, 1055, 1155, 1190, 1218, 1282, 1285, 1331], "second": [34, 43, 143, 144, 145, 146, 194, 214, 241, 280, 311, 413, 417, 420, 422, 427, 429, 433, 446, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 680, 681, 697, 700, 759, 760, 761, 762, 763, 764, 804, 805, 806, 808, 818, 857, 866, 884, 931, 936, 1050, 1054, 1067, 1068, 1078, 1265, 1266, 1282, 1285, 1331, 1340], "infer": [34, 43, 70, 83, 108, 110, 111, 112, 113, 114, 120, 121, 122, 125, 129, 130, 131, 132, 134, 138, 139, 162, 217, 311, 433, 447, 556, 558, 612, 668, 669, 697, 699, 700, 701, 704, 764, 778, 794, 818, 931, 1054, 1068, 1176, 1201, 1253, 1254, 1282, 1284, 1285, 1286, 1289, 1331], "timeunit": [34, 43, 69, 71, 311, 403, 405, 438, 450, 700, 759, 760, 761, 762, 763, 764, 931, 936, 1020, 1022, 1059, 1071, 1285], "frame": [34, 35, 37, 43, 47, 48, 49, 50, 51, 52, 54, 61, 62, 111, 121, 125, 131, 143, 144, 165, 166, 171, 211, 212, 217, 224, 228, 231, 242, 243, 244, 257, 273, 278, 279, 311, 836, 837, 843, 876, 879, 895, 903, 931, 936, 994, 1331, 1339, 1340], "datatyp": [34, 43, 108, 110, 111, 112, 114, 116, 125, 127, 129, 130, 133, 138, 151, 152, 154, 176, 186, 246, 249, 311, 371, 459, 643, 720, 766, 778, 818, 830, 847, 885, 888, 931, 936, 943, 985, 988, 1013, 1112, 1119, 1121, 1123, 1176, 1228, 1313, 1331], "repres": [34, 37, 43, 68, 69, 71, 80, 84, 89, 108, 110, 112, 113, 114, 122, 125, 257, 258, 268, 269, 281, 288, 311, 469, 494, 496, 541, 548, 556, 653, 667, 672, 686, 698, 728, 731, 746, 748, 764, 766, 778, 780, 781, 790, 795, 796, 799, 807, 814, 818, 895, 896, 904, 931, 936, 1219, 1223, 1238, 1252, 1257, 1271, 1283, 1311, 1320, 1331], "necessari": [34, 35, 43, 53, 92, 125, 269, 311, 931, 1311, 1331], "non_numer": [34, 43, 311, 931], "never": [34, 43, 122, 213, 242, 311, 865, 931], "strategi": [34, 43, 54, 62, 120, 147, 148, 149, 150, 151, 152, 154, 182, 194, 197, 213, 214, 227, 279, 311, 326, 464, 546, 558, 818, 852, 857, 860, 865, 866, 903, 931, 1086, 1168, 1331], "put": [34, 43, 311, 931], "around": [34, 43, 311, 931], "thei": [34, 37, 43, 53, 61, 62, 91, 92, 111, 134, 159, 214, 215, 244, 311, 682, 693, 694, 818, 931, 935, 936], "record": [34, 39, 43, 128, 140, 311, 866, 931], "termin": [34, 43, 311, 931], "indistinguish": [34, 43, 311, 931], "even": [34, 43, 120, 311, 456, 600, 604, 818, 931, 936, 1078, 1194, 1331], "invalid": [34, 43, 120, 121, 134, 311, 668, 670, 702, 723, 818, 931, 980, 1253, 1255, 1287], "g": [34, 43, 120, 124, 126, 128, 135, 137, 140, 152, 161, 172, 210, 237, 269, 278, 311, 319, 326, 396, 456, 459, 558, 643, 766, 818, 844, 882, 931, 1078, 1221, 1331, 1340], "pars": [34, 43, 47, 119, 120, 121, 123, 125, 130, 131, 134, 137, 138, 164, 193, 196, 247, 248, 252, 256, 274, 284, 285, 289, 311, 370, 376, 485, 557, 596, 611, 651, 668, 669, 679, 701, 702, 711, 722, 732, 734, 740, 743, 744, 745, 753, 757, 770, 783, 785, 788, 797, 798, 800, 802, 808, 818, 834, 856, 859, 886, 887, 890, 894, 900, 906, 907, 911, 931, 995, 1102, 1200, 1226, 1253, 1254, 1264, 1285, 1286, 1287, 1331], "valid": [34, 37, 43, 47, 69, 122, 126, 128, 132, 154, 159, 178, 213, 311, 393, 655, 657, 658, 663, 664, 665, 666, 670, 680, 681, 808, 818, 865, 931, 936, 1011, 1076, 1094, 1240, 1242, 1243, 1248, 1249, 1250, 1251, 1255, 1265, 1266, 1331], "integ": [34, 37, 43, 68, 69, 71, 75, 76, 77, 78, 84, 85, 86, 87, 88, 141, 148, 150, 153, 155, 175, 194, 241, 266, 269, 311, 323, 375, 434, 468, 469, 595, 604, 609, 615, 616, 617, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 667, 679, 698, 702, 730, 737, 770, 774, 775, 794, 818, 846, 857, 884, 931, 936, 992, 1055, 1089, 1112, 1194, 1198, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1219, 1223, 1252, 1264, 1283, 1287, 1311, 1331, 1339, 1340], "aren": [34, 43, 311, 931], "strictli": [34, 43, 53, 92, 311, 850, 931], "table_nam": [35, 37, 257, 311, 895, 931], "connect": [35, 120, 122, 123, 126, 128, 132, 137, 139, 140, 311, 831], "connectionorcursor": [35, 122, 311], "if_table_exist": [35, 311], "dbwritemod": [35, 311], "fail": [35, 36, 109, 124, 126, 130, 132, 135, 137, 138, 139, 143, 144, 161, 269, 276, 311, 337, 437, 546, 697, 699, 700, 704, 818, 901, 931, 1176, 1282, 1284, 1285, 1289, 1311, 1331], "dbwriteengin": [35, 311], "engine_opt": [35, 125, 311], "databas": [35, 122, 123, 311, 830], "new": [35, 36, 37, 125, 134, 159, 172, 188, 202, 203, 204, 217, 228, 229, 236, 237, 249, 257, 262, 268, 273, 275, 277, 278, 279, 284, 285, 311, 321, 405, 461, 471, 473, 483, 555, 564, 580, 581, 596, 611, 615, 680, 681, 688, 689, 708, 710, 711, 717, 814, 818, 830, 855, 882, 895, 899, 902, 903, 906, 907, 913, 919, 931, 936, 939, 1022, 1082, 1091, 1187, 1199, 1200, 1204, 1265, 1266, 1273, 1274, 1293, 1296, 1302, 1307, 1309, 1314, 1331, 1339], "version": [35, 36, 40, 59, 92, 124, 125, 135, 142, 147, 148, 149, 150, 154, 157, 161, 162, 163, 164, 172, 184, 187, 194, 195, 196, 197, 198, 199, 203, 218, 220, 225, 237, 238, 241, 249, 253, 257, 259, 262, 268, 269, 273, 274, 280, 286, 291, 292, 311, 326, 369, 370, 377, 378, 388, 389, 390, 391, 392, 408, 410, 414, 418, 421, 423, 425, 426, 428, 432, 433, 435, 447, 450, 456, 471, 478, 488, 492, 495, 500, 512, 526, 544, 554, 555, 557, 564, 573, 602, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 642, 656, 657, 662, 669, 673, 674, 675, 676, 679, 684, 685, 691, 697, 700, 711, 713, 716, 717, 721, 722, 729, 735, 754, 755, 756, 757, 759, 761, 779, 793, 818, 833, 834, 848, 857, 858, 859, 860, 861, 870, 884, 891, 895, 899, 900, 909, 913, 914, 931, 936, 943, 988, 996, 997, 1007, 1008, 1009, 1010, 1012, 1025, 1027, 1031, 1038, 1041, 1044, 1046, 1047, 1049, 1053, 1054, 1056, 1068, 1071, 1094, 1095, 1103, 1107, 1109, 1112, 1113, 1119, 1121, 1123, 1134, 1148, 1166, 1175, 1194, 1205, 1221, 1223, 1227, 1241, 1242, 1247, 1254, 1258, 1259, 1260, 1261, 1264, 1269, 1270, 1276, 1282, 1285, 1301, 1302, 1309, 1310, 1311, 1314, 1321, 1331], "20": [35, 36, 37, 40, 120, 125, 142, 147, 148, 149, 150, 154, 157, 163, 164, 171, 172, 180, 194, 202, 204, 224, 231, 233, 237, 239, 241, 249, 257, 268, 269, 273, 274, 280, 286, 292, 311, 334, 335, 336, 369, 370, 397, 404, 407, 408, 413, 417, 419, 420, 422, 427, 433, 434, 437, 447, 450, 456, 471, 478, 483, 564, 573, 600, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 662, 711, 721, 722, 729, 761, 770, 778, 805, 818, 833, 834, 843, 848, 857, 876, 879, 884, 895, 900, 909, 914, 931, 936, 1014, 1021, 1025, 1039, 1054, 1068, 1071, 1081, 1094, 1247, 1309, 1311, 1314, 1331], "26": [35, 142, 147, 148, 149, 150, 154, 171, 311, 411, 448, 843, 931, 1028], "instanti": [35, 37, 122, 152, 247, 268, 284, 311, 886, 906, 931, 1309, 1331], "uri": [35, 36, 122, 123, 124, 135, 136, 311], "qualifi": [35, 311], "creat": [35, 37, 53, 92, 108, 112, 114, 120, 121, 122, 123, 126, 128, 132, 135, 136, 148, 149, 150, 151, 152, 153, 154, 155, 166, 167, 194, 195, 198, 229, 232, 241, 268, 269, 280, 284, 287, 311, 405, 433, 447, 456, 546, 608, 612, 616, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 744, 758, 759, 760, 761, 762, 763, 764, 804, 805, 806, 814, 818, 837, 838, 843, 848, 857, 858, 861, 884, 906, 910, 931, 994, 998, 1012, 1022, 1054, 1068, 1078, 1187, 1194, 1197, 1201, 1309, 1311, 1331, 1339, 1340], "append": [35, 36, 150, 180, 213, 214, 311, 608, 808, 818, 865, 866, 931, 1083, 1331], "your": [35, 37, 53, 54, 92, 120, 121, 122, 123, 125, 140, 211, 217, 243, 244, 247, 265, 284, 289, 297, 311, 326, 406, 456, 471, 556, 558, 665, 697, 699, 700, 707, 781, 818, 862, 869, 871, 886, 906, 911, 919, 931, 1023, 1078, 1176, 1250, 1282, 1284, 1285, 1292, 1331, 1340], "special": [35, 120, 121, 123, 134, 273, 287, 311, 618, 664, 680, 681, 818, 910, 931, 943, 1176, 1206, 1249, 1265, 1266, 1331], "sqlalchemi": [35, 122, 142, 311], "adbc": [35, 122, 123, 311], "against": [35, 47, 97, 120, 122, 257, 311, 516, 666, 895, 931, 1138, 1251, 1339, 1340], "postgresql": [35, 122, 123, 311, 596, 818], "user": [35, 122, 123, 162, 217, 231, 291, 297, 311, 326, 556, 558, 600, 640, 735, 781, 818, 879, 913, 919, 931, 935, 943, 1176, 1224, 1331], "server": [35, 122, 123, 311], "port": [35, 120, 122, 123, 126, 128, 137, 311], "sqlite": [35, 122, 311], "db": [35, 122, 123, 311], "replac": [35, 36, 120, 121, 134, 181, 182, 238, 239, 275, 284, 285, 311, 405, 432, 463, 556, 557, 681, 682, 818, 851, 906, 907, 931, 1022, 1053, 1085, 1175, 1219, 1222, 1223, 1266, 1267, 1331], "insert": [35, 120, 121, 126, 128, 132, 134, 137, 138, 139, 203, 204, 237, 275, 277, 311, 639, 654, 707, 818, 902, 931, 1220, 1239, 1292, 1331], "mode": [35, 36, 43, 44, 45, 46, 47, 60, 61, 143, 145, 232, 257, 311, 664, 791, 794, 809, 818, 839, 840, 931, 1249, 1331, 1339], "alreadi": [35, 36, 96, 268, 311, 393, 516, 727, 818, 892, 931, 1011, 1138, 1319, 1331], "suppli": [35, 37, 108, 110, 111, 112, 114, 122, 129, 130, 138, 183, 242, 268, 311, 465, 600, 818, 853, 931, 1309, 1331], "unset": [35, 47, 149, 296, 311, 432, 546, 918, 1053], "associ": [35, 37, 48, 50, 54, 123, 125, 149, 152, 244, 311], "panda": [35, 109, 113, 142, 194, 270, 311, 425, 426, 720, 818, 857, 931, 1046, 1047, 1312, 1313, 1331], "to_sql": [35, 311], "though": [35, 122, 194, 311, 814, 857, 931], "eventu": [35, 311], "phase": [35, 278, 311], "favour": [35, 311], "solut": [35, 311], "cursor": [35, 122, 311], "adbc_ingest": [35, 311], "affect": [35, 143, 144, 145, 146, 311], "driver": [35, 122, 123, 311], "provid": [35, 37, 50, 120, 121, 123, 124, 125, 132, 134, 135, 136, 139, 150, 154, 183, 209, 257, 268, 311, 365, 366, 459, 480, 546, 556, 558, 659, 660, 663, 668, 670, 693, 694, 695, 696, 770, 800, 818, 830, 853, 895, 931, 980, 981, 1097, 1124, 1176, 1244, 1245, 1248, 1253, 1255, 1309, 1331, 1339, 1340], "otherwis": [35, 122, 125, 149, 152, 156, 217, 224, 244, 247, 268, 273, 297, 311, 360, 365, 376, 394, 455, 456, 457, 458, 546, 558, 567, 596, 600, 604, 609, 655, 659, 662, 666, 667, 672, 686, 698, 731, 764, 767, 776, 781, 790, 808, 818, 876, 886, 919, 931, 976, 980, 995, 1012, 1077, 1078, 1079, 1080, 1168, 1176, 1194, 1198, 1219, 1222, 1240, 1244, 1247, 1251, 1252, 1257, 1271, 1283, 1331], "target_t": [35, 311], "pyodbc": [35, 311], "wa": [35, 59, 143, 230, 268, 269, 288, 311, 611, 682, 764, 818, 936, 1200, 1267, 1311, 1331], "fast_executemani": [35, 311], "improv": [35, 46, 126, 137, 311, 556, 818, 931], "perform": [35, 42, 44, 46, 54, 95, 98, 105, 109, 120, 121, 122, 126, 132, 134, 137, 138, 139, 161, 164, 193, 194, 195, 196, 197, 198, 214, 217, 218, 220, 225, 235, 241, 243, 244, 259, 269, 274, 297, 311, 326, 469, 546, 556, 558, 596, 616, 656, 671, 672, 682, 697, 699, 700, 818, 834, 857, 858, 860, 861, 866, 884, 894, 900, 909, 910, 931, 1176, 1241, 1256, 1257, 1267, 1282, 1284, 1285, 1310, 1311, 1331], "pyodbc_uri": [35, 311], "mssql": [35, 311], "1433": [35, 311], "odbc": [35, 122, 311], "18": [35, 115, 171, 224, 241, 311, 387, 433, 447, 450, 483, 500, 579, 616, 711, 818, 843, 876, 880, 884, 931, 936, 1071, 1285], "create_engin": [35, 311], "deltalak": [36, 124, 135, 142, 311], "deltat": [36, 311], "ignor": [36, 122, 149, 150, 154, 220, 221, 259, 260, 279, 311, 322, 324, 348, 397, 432, 455, 457, 458, 514, 523, 588, 589, 654, 731, 733, 745, 818, 936, 940, 941, 964, 1014, 1053, 1077, 1079, 1080, 1136, 1145, 1185, 1186, 1239, 1331], "merg": [36, 213, 224, 311, 865, 876, 931], "overwrite_schema": [36, 311], "storage_opt": [36, 120, 124, 126, 128, 132, 135, 136, 137, 139, 311], "delta_write_opt": [36, 311], "delta_merge_opt": [36, 311], "tablemerg": [36, 311], "delta": [36, 124, 135, 258, 281, 311, 541, 548, 630, 631, 634, 635, 653, 728, 746, 748, 795, 796, 799, 807, 818, 830, 896, 904, 931, 1213, 1215, 1238, 1320, 1331], "handl": [36, 60, 61, 62, 115, 120, 121, 134, 140, 311, 397, 514, 662, 707, 818, 839, 840, 931, 935, 1014, 1136, 1247, 1292, 1331], "throw": [36, 110, 111, 114, 165, 311, 371, 668, 670, 818, 836, 931, 985, 1253, 1255, 1331], "add": [36, 37, 121, 180, 194, 197, 217, 284, 285, 286, 287, 311, 394, 582, 583, 584, 585, 602, 604, 711, 713, 764, 768, 808, 818, 857, 860, 865, 906, 907, 908, 909, 910, 931, 1083, 1331], "anyth": [36, 242, 311], "updat": [36, 171, 311, 843, 931], "deprec": [36, 40, 92, 93, 147, 148, 149, 150, 154, 157, 162, 163, 164, 184, 187, 194, 195, 196, 197, 198, 203, 218, 220, 225, 237, 238, 241, 253, 259, 262, 269, 274, 280, 286, 291, 292, 311, 326, 369, 370, 377, 378, 388, 389, 390, 391, 392, 408, 410, 414, 418, 421, 423, 428, 432, 433, 435, 447, 450, 456, 471, 488, 492, 495, 500, 512, 526, 544, 554, 555, 557, 573, 602, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 642, 657, 662, 669, 673, 674, 675, 676, 679, 684, 685, 691, 697, 700, 713, 716, 717, 721, 722, 729, 735, 747, 754, 755, 756, 757, 759, 761, 779, 818, 833, 834, 848, 857, 858, 859, 860, 861, 870, 884, 891, 899, 900, 909, 913, 914, 931, 943, 988, 996, 997, 1007, 1008, 1009, 1010, 1012, 1025, 1027, 1031, 1038, 1041, 1044, 1049, 1053, 1054, 1056, 1068, 1071, 1094, 1103, 1107, 1109, 1112, 1113, 1119, 1121, 1123, 1134, 1148, 1166, 1175, 1194, 1205, 1221, 1223, 1227, 1242, 1247, 1254, 1258, 1259, 1260, 1261, 1264, 1269, 1270, 1276, 1282, 1285, 1301, 1302, 1310, 1311, 1321, 1331], "sinc": [36, 40, 68, 69, 84, 92, 122, 124, 135, 147, 148, 149, 150, 154, 157, 162, 163, 164, 184, 187, 194, 195, 196, 197, 198, 203, 218, 220, 225, 237, 238, 241, 253, 259, 262, 269, 274, 280, 286, 291, 292, 311, 326, 369, 370, 377, 378, 388, 389, 390, 391, 392, 408, 410, 412, 414, 418, 421, 423, 428, 432, 433, 435, 447, 450, 456, 471, 488, 492, 495, 500, 512, 526, 544, 554, 555, 556, 557, 573, 602, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 642, 657, 662, 669, 673, 674, 675, 676, 679, 684, 685, 691, 697, 700, 713, 716, 717, 721, 722, 729, 735, 754, 755, 756, 757, 759, 761, 770, 779, 818, 833, 834, 848, 857, 858, 859, 860, 861, 870, 884, 891, 894, 899, 900, 909, 913, 914, 931, 943, 988, 996, 997, 1007, 1008, 1009, 1010, 1012, 1025, 1027, 1029, 1031, 1038, 1041, 1044, 1049, 1053, 1054, 1056, 1068, 1071, 1094, 1103, 1107, 1109, 1112, 1113, 1119, 1121, 1123, 1134, 1148, 1166, 1175, 1194, 1205, 1221, 1223, 1227, 1242, 1247, 1254, 1258, 1259, 1260, 1261, 1264, 1269, 1270, 1276, 1282, 1285, 1301, 1302, 1310, 1311, 1321, 1331], "14": [36, 142, 171, 184, 203, 217, 218, 220, 225, 238, 259, 262, 293, 295, 298, 299, 300, 301, 302, 303, 304, 311, 388, 389, 390, 391, 392, 402, 407, 408, 413, 417, 420, 422, 427, 434, 437, 483, 544, 607, 679, 716, 717, 754, 755, 756, 757, 761, 804, 805, 818, 843, 915, 917, 920, 921, 922, 923, 924, 925, 926, 931, 936, 1007, 1008, 1009, 1010, 1019, 1054, 1103, 1123, 1166, 1223, 1264, 1301, 1302, 1321, 1331], "schema_mod": [36, 311], "extra": [36, 120, 121, 124, 126, 128, 134, 135, 136, 137, 180, 194, 311, 818, 857, 931, 935, 1083, 1331], "storag": [36, 120, 124, 126, 128, 132, 135, 136, 137, 311], "backend": [36, 122, 123, 124, 135, 136, 311], "cloud": [36, 122, 124, 132, 135, 136, 137, 139, 140, 311], "configur": [36, 124, 135, 136, 159, 311], "authent": [36, 124, 135, 136, 311], "see": [36, 37, 38, 39, 60, 61, 69, 122, 123, 124, 125, 126, 128, 132, 135, 136, 139, 143, 144, 145, 146, 150, 154, 169, 194, 213, 231, 232, 311, 314, 376, 464, 501, 556, 648, 655, 663, 664, 666, 667, 680, 681, 698, 759, 760, 762, 763, 793, 805, 806, 814, 818, 839, 840, 857, 931, 935, 936, 989, 995, 1125, 1234, 1240, 1248, 1249, 1251, 1252, 1265, 1266, 1283, 1331, 1335, 1340], "here": [36, 37, 42, 108, 110, 111, 112, 114, 122, 123, 124, 129, 130, 132, 135, 136, 138, 139, 148, 150, 154, 311, 401, 556, 558, 665, 670, 742, 818, 892, 931, 936, 1018, 1255], "gc": [36, 124, 135, 136, 311], "azur": [36, 124, 132, 135, 136, 139, 311], "keyword": [36, 50, 124, 132, 135, 150, 154, 169, 193, 231, 242, 247, 248, 270, 284, 285, 289, 311, 465, 600, 711, 797, 800, 808, 818, 856, 879, 886, 887, 906, 907, 911, 931, 1312, 1331], "while": [36, 61, 121, 124, 125, 135, 150, 154, 159, 211, 223, 275, 279, 311, 672, 840, 875, 903, 931, 1094, 1257, 1331], "lake": [36, 124, 135, 311, 830], "typeerror": [36, 311], "unsupport": [36, 311], "arrowinvaliderror": [36, 311], "could": [36, 89, 95, 165, 311, 371, 750, 754, 764, 768, 818, 836, 843, 846, 931, 985, 1094, 1331], "primit": [36, 311, 490, 818], "tablenotfounderror": [36, 311], "doesn": [36, 120, 134, 194, 214, 311, 452, 818, 857, 931, 1074, 1321, 1331], "action": [36, 311], "trigger": [36, 270, 311, 818, 935, 1312, 1331], "protocol": [36, 109, 123, 161, 311], "categor": [36, 53, 72, 91, 92, 143, 144, 145, 146, 213, 266, 311, 372, 373, 394, 604, 611, 720, 818, 936, 986, 987, 988, 989, 990, 1012, 1194, 1200, 1313, 1331], "convert": [36, 109, 113, 124, 125, 131, 135, 161, 264, 265, 266, 267, 268, 269, 270, 272, 273, 311, 359, 360, 395, 406, 436, 439, 545, 546, 555, 556, 580, 606, 665, 679, 697, 699, 700, 701, 702, 704, 709, 818, 931, 935, 975, 976, 989, 1023, 1057, 1060, 1167, 1168, 1250, 1264, 1282, 1284, 1285, 1286, 1287, 1289, 1295, 1298, 1308, 1309, 1310, 1311, 1312, 1314, 1321, 1331], "normal": [36, 194, 311, 452, 501, 648, 818, 857, 931, 1074, 1125, 1234, 1331], "nullabl": [36, 311], "To": [36, 61, 181, 218, 220, 225, 259, 311, 376, 399, 400, 463, 464, 655, 662, 663, 664, 666, 680, 681, 693, 694, 695, 696, 705, 818, 851, 931, 995, 1016, 1017, 1085, 1094, 1240, 1247, 1248, 1249, 1251, 1265, 1266, 1290, 1311, 1331], "pyarrow": [36, 42, 108, 113, 120, 123, 124, 126, 128, 132, 135, 140, 142, 263, 269, 270, 311, 830, 1305, 1310, 1311, 1312, 1331], "ha": [36, 37, 54, 61, 113, 122, 134, 157, 161, 162, 184, 187, 194, 195, 196, 197, 198, 203, 238, 241, 262, 280, 286, 291, 292, 311, 326, 369, 370, 388, 389, 390, 391, 392, 393, 471, 488, 492, 495, 500, 512, 526, 544, 554, 555, 556, 557, 568, 573, 602, 617, 619, 621, 623, 625, 627, 630, 632, 634, 657, 667, 669, 673, 674, 675, 676, 679, 684, 685, 691, 698, 708, 713, 716, 717, 721, 722, 735, 754, 755, 756, 757, 767, 776, 779, 790, 814, 818, 840, 857, 858, 859, 860, 861, 870, 884, 899, 909, 913, 914, 919, 931, 943, 984, 994, 1007, 1008, 1009, 1010, 1011, 1013, 1094, 1107, 1109, 1113, 1134, 1148, 1166, 1175, 1205, 1221, 1223, 1242, 1252, 1254, 1258, 1259, 1260, 1261, 1264, 1269, 1270, 1276, 1283, 1301, 1302, 1315, 1331], "last": [36, 143, 144, 145, 146, 164, 200, 214, 216, 232, 244, 256, 261, 269, 274, 276, 305, 311, 336, 347, 356, 369, 370, 393, 409, 425, 430, 448, 492, 493, 500, 521, 540, 543, 546, 579, 580, 582, 584, 586, 587, 602, 650, 651, 667, 689, 698, 713, 715, 721, 722, 740, 803, 818, 834, 866, 894, 898, 900, 901, 927, 931, 936, 952, 963, 972, 1011, 1026, 1046, 1051, 1069, 1096, 1113, 1114, 1127, 1143, 1162, 1165, 1236, 1252, 1274, 1283, 1300, 1311, 1331], "filesystem": [36, 124, 135, 136, 311], "table_path": [36, 124, 135, 136, 311], "match": [36, 37, 62, 69, 102, 108, 110, 111, 112, 114, 122, 129, 130, 138, 143, 144, 145, 146, 165, 182, 213, 214, 242, 279, 311, 564, 565, 611, 629, 655, 656, 657, 658, 661, 663, 664, 666, 668, 670, 680, 681, 682, 690, 697, 699, 700, 808, 818, 836, 852, 865, 866, 903, 931, 936, 1075, 1112, 1121, 1200, 1212, 1240, 1241, 1242, 1243, 1246, 1248, 1249, 1251, 1253, 1255, 1265, 1266, 1267, 1275, 1282, 1284, 1285, 1331], "old": [36, 236, 311, 611, 818, 882, 931, 1200, 1331], "existing_table_path": [36, 311], "store": [36, 120, 136, 180, 211, 243, 311, 372, 614, 818, 986, 1083, 1203, 1331], "bucket": [36, 124, 135, 136, 139, 311, 433, 447, 480, 818, 1054, 1068, 1097, 1331], "prefix": [36, 120, 121, 134, 159, 311, 321, 368, 555, 565, 580, 583, 584, 586, 587, 690, 694, 695, 707, 713, 818, 936, 983, 1275, 1280, 1292], "aws_region": [36, 135, 139, 311], "the_aws_region": [36, 311], "aws_access_key_id": [36, 124, 135, 139, 311], "the_aws_access_key_id": [36, 124, 135, 136, 311], "aws_secret_access_kei": [36, 124, 135, 139, 311], "the_aws_secret_access_kei": [36, 124, 135, 136, 311], "pa": [36, 108, 140, 311], "check": [36, 69, 97, 120, 121, 134, 143, 144, 145, 146, 158, 177, 187, 194, 195, 197, 198, 209, 213, 241, 311, 343, 364, 367, 368, 456, 477, 485, 490, 511, 616, 655, 661, 666, 690, 818, 857, 858, 860, 861, 865, 870, 871, 884, 931, 959, 979, 982, 983, 1075, 1078, 1093, 1103, 1105, 1109, 1110, 1112, 1119, 1120, 1121, 1123, 1124, 1133, 1221, 1240, 1246, 1251, 1275, 1331], "doc": [36, 38, 39, 123, 126, 128, 143, 145, 169, 311], "predic": [36, 43, 44, 45, 46, 60, 61, 134, 137, 138, 139, 140, 183, 209, 242, 311, 465, 729, 768, 808, 818, 839, 840, 848, 850, 853, 870, 871, 880, 882, 892, 909, 910, 931, 1087, 1219, 1222, 1331], "source_alia": [36, 311], "target_alia": [36, 311], "when_matched_update_al": [36, 311], "when_not_matched_insert_al": [36, 311], "execut": [36, 48, 49, 51, 53, 62, 122, 123, 215, 257, 311, 396, 516, 727, 818, 835, 844, 870, 871, 880, 895, 931, 935, 1138, 1319, 1331, 1339], "workbook": [37, 125, 131, 311], "worksheet": [37, 125, 131, 311], "posit": [37, 173, 179, 193, 196, 230, 247, 248, 250, 252, 256, 277, 284, 285, 289, 311, 355, 455, 457, 458, 459, 538, 596, 604, 641, 651, 665, 666, 679, 680, 681, 702, 711, 738, 739, 740, 743, 744, 745, 766, 797, 800, 818, 845, 849, 856, 859, 886, 887, 889, 890, 894, 902, 906, 907, 911, 931, 936, 971, 1077, 1079, 1080, 1160, 1194, 1226, 1250, 1264, 1287, 1331], "tupl": [37, 63, 123, 125, 131, 162, 211, 217, 230, 242, 243, 244, 251, 273, 288, 311, 612, 818, 880, 892, 931, 936, 1201, 1331], "a1": [37, 55, 57, 311], "table_styl": [37, 311], "column_format": [37, 311], "columnformatdict": [37, 311], "dtype_format": [37, 311], "oneormoredatatyp": [37, 148, 311, 1121, 1331], "conditional_format": [37, 311], "conditionalformatdict": [37, 311], "header_format": [37, 311], "column_tot": [37, 311], "columntotalsdefinit": [37, 311], "column_width": [37, 311], "columnwidthsdefinit": [37, 311], "row_tot": [37, 311], "rowtotalsdefinit": [37, 311], "row_height": [37, 311], "sparklin": [37, 311], "sequenc": [37, 54, 83, 108, 110, 111, 112, 114, 120, 121, 122, 125, 129, 130, 131, 134, 138, 148, 149, 150, 151, 152, 164, 171, 179, 180, 213, 214, 223, 228, 230, 231, 232, 244, 256, 266, 268, 273, 274, 278, 279, 280, 311, 360, 370, 394, 472, 490, 546, 554, 556, 600, 604, 611, 651, 695, 696, 710, 722, 735, 740, 750, 751, 754, 755, 768, 770, 779, 780, 781, 790, 793, 798, 818, 834, 843, 849, 865, 866, 875, 879, 894, 900, 903, 931, 936, 976, 1012, 1013, 1083, 1168, 1194, 1200, 1223, 1296, 1331], "formula": [37, 311, 452, 818, 1074, 1331], "autofilt": [37, 311], "autofit": [37, 311], "hidden_column": [37, 311], "selectortyp": [37, 311, 936], "hide_gridlin": [37, 311], "sheet_zoom": [37, 311], "freeze_pan": [37, 311], "bytesio": [37, 38, 39, 42, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 172, 311, 396, 818, 844, 931], "open": [37, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 172, 311, 396, 818, 844, 931], "xlsxwriter": [37, 142, 311], "close": [37, 122, 194, 195, 197, 198, 241, 257, 311, 394, 485, 551, 604, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 648, 759, 760, 762, 763, 805, 806, 818, 857, 858, 860, 861, 884, 895, 931, 1012, 1102, 1194, 1234, 1331], "xlsx": [37, 125, 311], "work": [37, 70, 72, 121, 140, 237, 248, 285, 311, 322, 324, 326, 361, 375, 376, 459, 468, 516, 547, 556, 558, 579, 580, 582, 584, 586, 587, 596, 667, 671, 672, 686, 698, 724, 818, 887, 907, 931, 936, 940, 941, 977, 992, 995, 1089, 1138, 1169, 1252, 1256, 1257, 1271, 1283, 1316, 1331], "directori": [37, 42, 132, 311, 935], "sheet1": [37, 311], "medium": [37, 311], "kei": [37, 54, 59, 62, 132, 136, 139, 194, 211, 213, 214, 224, 230, 232, 236, 240, 243, 244, 279, 288, 311, 465, 558, 611, 800, 818, 850, 857, 865, 866, 876, 882, 883, 903, 931, 936, 1200, 1331], "follow": [37, 42, 59, 120, 121, 122, 124, 134, 135, 136, 143, 194, 214, 217, 231, 241, 269, 280, 311, 429, 433, 447, 456, 556, 600, 607, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 710, 723, 759, 760, 762, 763, 781, 805, 806, 808, 810, 811, 813, 818, 819, 820, 823, 825, 826, 827, 857, 866, 879, 884, 931, 1050, 1054, 1068, 1078, 1196, 1219, 1222, 1311, 1323, 1325, 1327, 1331, 1332, 1336, 1337, 1338, 1340], "first_column": [37, 311], "last_column": [37, 311], "banded_column": [37, 311], "banded_row": [37, 311], "sheet": [37, 125, 131, 311], "chart": [37, 311, 880, 931], "subsequ": [37, 52, 235, 270, 311, 546, 808, 848, 931, 1312, 1331], "colnam": [37, 134, 311], "given": [37, 47, 48, 54, 97, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 134, 138, 139, 145, 146, 147, 148, 150, 152, 153, 154, 155, 162, 178, 179, 181, 194, 195, 197, 198, 209, 217, 230, 231, 241, 242, 243, 244, 252, 253, 256, 273, 279, 311, 343, 355, 360, 370, 376, 402, 406, 436, 438, 439, 452, 456, 480, 485, 511, 538, 546, 549, 558, 596, 600, 607, 610, 612, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 641, 642, 664, 665, 677, 678, 697, 700, 707, 710, 722, 735, 766, 767, 776, 779, 780, 781, 790, 794, 795, 796, 818, 849, 857, 858, 860, 861, 870, 871, 879, 884, 890, 891, 894, 903, 913, 919, 931, 936, 943, 959, 971, 976, 995, 1019, 1023, 1057, 1059, 1060, 1074, 1076, 1078, 1097, 1102, 1124, 1133, 1160, 1168, 1171, 1174, 1176, 1187, 1196, 1201, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1220, 1226, 1227, 1249, 1250, 1262, 1263, 1282, 1285, 1292, 1318, 1322, 1331, 1339, 1340], "dd": [37, 311], "mm": [37, 311], "yyyi": [37, 311], "overridden": [37, 108, 110, 112, 114, 129, 130, 156, 311, 931], "basi": [37, 125, 150, 311], "param": [37, 108, 110, 111, 112, 114, 120, 121, 129, 130, 134, 149, 150, 154, 242, 311, 931], "It": [37, 38, 43, 44, 45, 46, 53, 60, 61, 70, 72, 92, 132, 139, 140, 171, 224, 231, 257, 268, 273, 278, 279, 287, 297, 311, 393, 394, 433, 480, 558, 567, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 795, 796, 814, 818, 835, 839, 840, 843, 870, 871, 876, 895, 903, 910, 919, 931, 990, 1011, 1012, 1054, 1097, 1194, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1219, 1222, 1309, 1314, 1331], "float_dtyp": [37, 311], "simplifi": [37, 43, 44, 45, 46, 60, 61, 311, 839, 840, 848, 850, 880, 892, 931], "uniform": [37, 311, 604, 818, 1194, 1331], "condit": [37, 175, 183, 242, 311, 465, 485, 661, 690, 741, 768, 808, 818, 846, 853, 931, 1102, 1331], "typenam": [37, 311], "3_color_scal": [37, 311], "data_bar": [37, 311], "make": [37, 62, 83, 108, 113, 120, 121, 125, 126, 128, 132, 137, 224, 228, 235, 269, 280, 311, 457, 458, 480, 586, 587, 596, 610, 688, 818, 876, 931, 935, 1079, 1080, 1097, 1273, 1311, 1331, 1339], "icon": [37, 311], "multipl": [37, 50, 60, 61, 62, 120, 121, 125, 131, 134, 137, 138, 139, 148, 150, 154, 173, 178, 180, 183, 193, 194, 202, 212, 230, 232, 244, 247, 250, 256, 279, 284, 289, 311, 369, 370, 519, 544, 563, 568, 576, 577, 596, 611, 612, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 651, 708, 721, 722, 740, 747, 754, 755, 768, 779, 780, 782, 787, 793, 798, 801, 808, 814, 818, 834, 839, 840, 845, 853, 856, 857, 886, 889, 894, 900, 903, 906, 911, 919, 931, 942, 972, 1076, 1083, 1141, 1162, 1166, 1181, 1200, 1201, 1236, 1331], "singl": [37, 48, 54, 60, 61, 62, 119, 120, 121, 122, 123, 125, 132, 134, 139, 148, 165, 173, 174, 175, 180, 189, 199, 209, 217, 230, 242, 244, 256, 268, 269, 288, 311, 326, 344, 376, 401, 429, 472, 475, 478, 512, 513, 519, 544, 556, 558, 608, 611, 612, 614, 651, 654, 667, 672, 686, 698, 729, 735, 740, 744, 745, 775, 780, 781, 798, 806, 818, 836, 839, 840, 845, 846, 894, 931, 936, 960, 995, 1018, 1050, 1083, 1095, 1134, 1135, 1141, 1197, 1200, 1201, 1203, 1239, 1252, 1257, 1271, 1283, 1305, 1311, 1331], "across": [37, 54, 123, 199, 219, 221, 226, 260, 311, 478, 732, 734, 750, 751, 753, 757, 783, 785, 788, 802, 818, 1095, 1331], "effect": [37, 186, 194, 197, 311, 411, 469, 558, 581, 583, 585, 759, 760, 818, 857, 860, 909, 910, 931, 1019, 1028], "heatmap": [37, 311], "min": [37, 42, 46, 171, 182, 226, 232, 241, 311, 378, 385, 390, 464, 596, 607, 616, 625, 626, 788, 797, 818, 843, 852, 884, 931, 935, 997, 1004, 1008, 1013, 1086, 1196, 1210, 1331, 1340], "entir": [37, 60, 61, 125, 131, 311, 839, 840, 931], "made": [37, 122, 311], "abov": [37, 143, 214, 232, 311, 808], "than": [37, 43, 44, 45, 46, 60, 61, 107, 112, 114, 120, 121, 122, 125, 131, 134, 140, 164, 166, 193, 196, 211, 214, 217, 230, 242, 243, 245, 274, 278, 297, 311, 369, 469, 471, 474, 476, 485, 503, 533, 553, 556, 558, 571, 604, 615, 638, 648, 667, 671, 677, 678, 689, 698, 707, 721, 722, 746, 759, 781, 818, 834, 839, 840, 856, 859, 866, 900, 919, 931, 1102, 1155, 1176, 1194, 1204, 1218, 1234, 1252, 1256, 1262, 1263, 1274, 1283, 1292, 1311, 1331, 1340], "bold": [37, 311], "font_color": [37, 311], "702963": [37, 311], "total": [37, 178, 292, 311, 410, 414, 418, 421, 423, 428, 435, 440, 441, 442, 443, 444, 445, 446, 504, 525, 818, 914, 1027, 1031, 1038, 1041, 1044, 1049, 1056, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1076, 1126, 1147, 1331], "export": [37, 211, 212, 243, 244, 265, 268, 311, 814, 936], "sum": [37, 47, 178, 186, 193, 194, 209, 232, 241, 260, 289, 311, 386, 387, 392, 396, 452, 465, 546, 558, 567, 569, 570, 571, 572, 611, 616, 632, 633, 729, 731, 750, 752, 753, 754, 756, 757, 768, 781, 793, 802, 818, 839, 840, 844, 848, 850, 856, 857, 878, 880, 884, 888, 892, 911, 931, 935, 936, 1005, 1006, 1010, 1074, 1076, 1214, 1331], "must": [37, 72, 109, 110, 124, 135, 136, 140, 171, 179, 194, 195, 197, 198, 214, 224, 241, 242, 311, 394, 546, 604, 611, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 808, 818, 843, 849, 857, 858, 860, 861, 866, 870, 871, 876, 884, 892, 931, 935, 1012, 1013, 1194, 1200, 1331], "funcnam": [37, 311], "averag": [37, 311, 455, 456, 457, 458, 607, 818, 1077, 1078, 1079, 1080, 1196, 1331], "count_num": [37, 311], "count": [37, 47, 140, 163, 171, 194, 228, 229, 241, 275, 280, 286, 302, 311, 327, 344, 353, 383, 388, 401, 456, 480, 504, 512, 513, 525, 531, 558, 578, 594, 616, 619, 621, 623, 625, 627, 630, 632, 634, 657, 658, 725, 727, 736, 742, 749, 777, 789, 818, 833, 843, 857, 878, 884, 909, 924, 931, 936, 960, 969, 1002, 1013, 1018, 1078, 1097, 1126, 1134, 1135, 1147, 1153, 1183, 1189, 1242, 1243, 1317, 1319, 1331], "std_dev": [37, 311], "var": [37, 155, 311, 634, 635, 818, 931, 1331], "pixel": [37, 311], "unit": [37, 69, 71, 143, 144, 145, 146, 150, 154, 178, 311, 403, 405, 412, 438, 450, 456, 462, 552, 568, 697, 700, 726, 759, 760, 761, 762, 763, 764, 770, 818, 880, 931, 935, 936, 1020, 1022, 1029, 1059, 1071, 1076, 1078, 1084, 1174, 1282, 1285, 1318, 1331, 1340], "hand": [37, 120, 121, 134, 311, 534, 535, 536, 537, 1156, 1157, 1158, 1159], "side": [37, 194, 195, 197, 198, 241, 311, 485, 534, 535, 536, 537, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 639, 759, 760, 762, 763, 805, 806, 818, 857, 858, 860, 861, 884, 931, 935, 1102, 1156, 1157, 1158, 1159, 1220, 1331], "call": [37, 51, 53, 60, 61, 92, 113, 121, 122, 125, 143, 144, 145, 146, 150, 154, 159, 193, 194, 197, 215, 217, 241, 257, 269, 310, 311, 326, 384, 387, 401, 500, 558, 579, 580, 582, 584, 586, 587, 602, 644, 713, 742, 747, 814, 818, 839, 840, 848, 850, 856, 857, 858, 860, 861, 880, 884, 892, 895, 930, 931, 935, 936, 943, 1018, 1176, 1230, 1310, 1311, 1331], "ad": [37, 111, 125, 194, 197, 275, 279, 284, 285, 311, 325, 462, 750, 751, 754, 755, 818, 857, 860, 903, 906, 907, 931, 936, 1012, 1084, 1194, 1331], "wise": [37, 54, 122, 186, 311, 328, 329, 330, 331, 332, 333, 379, 380, 381, 460, 550, 645, 646, 647, 718, 719, 754, 755, 768, 793, 818, 944, 945, 946, 947, 948, 949, 999, 1000, 1001, 1081, 1172, 1173, 1231, 1232, 1233, 1303, 1304, 1331], "particip": [37, 311], "distinct": [37, 154, 230, 288, 311, 361, 488, 489, 492, 493, 547, 607, 615, 764, 818, 977, 1107, 1108, 1113, 1114, 1169, 1196, 1204, 1331, 1340], "referenc": [37, 311, 710], "differ": [37, 120, 125, 140, 143, 145, 180, 194, 199, 211, 241, 243, 244, 265, 268, 269, 275, 311, 397, 409, 429, 430, 432, 448, 454, 469, 478, 514, 534, 536, 546, 558, 588, 589, 591, 611, 697, 725, 767, 770, 776, 790, 818, 848, 857, 884, 931, 936, 989, 1014, 1026, 1050, 1051, 1053, 1069, 1083, 1095, 1136, 1156, 1158, 1176, 1185, 1186, 1200, 1221, 1282, 1331], "row_index": [37, 311], "height": [37, 150, 175, 311], "intersect": [37, 311, 535, 936, 1157], "bodi": [37, 311], "start": [37, 118, 120, 121, 123, 126, 128, 131, 132, 134, 137, 138, 139, 156, 188, 193, 194, 196, 197, 215, 255, 262, 280, 286, 287, 311, 364, 367, 368, 401, 409, 424, 430, 433, 447, 448, 459, 473, 520, 539, 615, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 649, 655, 661, 664, 678, 686, 690, 692, 694, 695, 698, 707, 717, 737, 742, 750, 754, 758, 759, 760, 761, 762, 763, 766, 768, 774, 775, 805, 806, 808, 818, 855, 856, 857, 859, 860, 880, 893, 899, 909, 910, 931, 936, 983, 1018, 1020, 1023, 1026, 1029, 1030, 1037, 1040, 1043, 1045, 1048, 1051, 1054, 1059, 1068, 1069, 1091, 1142, 1161, 1204, 1235, 1246, 1249, 1263, 1271, 1275, 1277, 1279, 1283, 1292, 1302, 1331, 1340], "unless": [37, 54, 110, 268, 273, 311, 692, 693, 794, 931, 1277, 1321, 1331], "marker": [37, 311], "compliant": [37, 311], "case": [37, 53, 54, 61, 108, 110, 111, 112, 114, 122, 129, 130, 138, 139, 156, 162, 180, 194, 195, 197, 198, 211, 217, 232, 241, 243, 244, 265, 268, 269, 311, 402, 456, 555, 556, 567, 568, 580, 616, 619, 621, 623, 625, 627, 630, 632, 634, 655, 656, 664, 666, 680, 681, 682, 818, 840, 857, 858, 860, 861, 884, 931, 935, 936, 1019, 1078, 1083, 1240, 1241, 1249, 1251, 1265, 1266, 1267, 1309, 1331], "three": [37, 241, 272, 311, 394, 604, 616, 639, 667, 698, 818, 884, 931, 976, 1012, 1168, 1194, 1252, 1283, 1331], "avail": [37, 38, 117, 122, 123, 124, 135, 136, 148, 159, 232, 257, 310, 311, 607, 810, 811, 813, 817, 818, 819, 820, 823, 824, 825, 826, 827, 830, 850, 895, 930, 931, 935, 936, 1013, 1196, 1323, 1325, 1327, 1331, 1332, 1336, 1337, 1338, 1339], "insert_befor": [37, 311], "insert_aft": [37, 311], "respect": [37, 311, 656, 682, 936, 1241, 1267, 1314, 1331], "direct": [37, 123, 132, 136, 139, 143, 252, 268, 278, 311, 355, 538, 641, 818, 890, 931, 971, 1160, 1226, 1331], "far": [37, 311], "strongli": [37, 156, 217, 242, 297, 311, 558, 818, 1176, 1331], "advis": [37, 53, 92, 215, 311], "structur": [37, 38, 97, 98, 105, 180, 231, 244, 269, 311, 600, 818, 879, 931, 1083, 1331], "wherev": [37, 217, 297, 311, 558, 818, 1176, 1331], "possibl": [37, 97, 110, 111, 114, 120, 125, 147, 150, 154, 164, 193, 196, 211, 217, 243, 274, 276, 297, 311, 552, 558, 567, 618, 689, 726, 818, 834, 841, 847, 856, 859, 885, 894, 900, 901, 905, 931, 1176, 1206, 1274, 1331], "simpl": [37, 228, 311], "colx": [37, 52, 311, 586, 587, 936, 1340], "coli": [37, 311, 586, 587, 936, 1340], "after": [37, 52, 62, 111, 118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 180, 277, 310, 311, 459, 557, 596, 607, 707, 818, 902, 931, 1083, 1175, 1196, 1292, 1331], "befor": [37, 68, 69, 120, 122, 125, 134, 140, 143, 144, 145, 146, 156, 159, 180, 194, 197, 214, 257, 268, 273, 277, 311, 386, 387, 393, 556, 557, 596, 597, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 662, 707, 714, 795, 796, 818, 857, 860, 863, 866, 902, 931, 935, 1005, 1006, 1011, 1083, 1175, 1190, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1247, 1292, 1299, 1331], "most": [37, 49, 108, 120, 121, 123, 134, 143, 144, 145, 146, 269, 311, 568, 576, 597, 689, 818, 1181, 1190, 1274, 1311, 1331, 1339], "mandatori": [37, 311], "return_dtyp": [37, 162, 217, 311, 326, 554, 556, 557, 558, 611, 730, 735, 779, 780, 781, 818, 943, 1175, 1176, 1200, 1331], "latter": [37, 180, 311, 1083, 1331], "appropri": [37, 140, 269, 311, 607, 818, 1196, 1331], "pure": [37, 311, 564], "actual": [37, 111, 150, 154, 244, 311, 1229, 1331], "indic": [37, 68, 69, 71, 84, 118, 120, 121, 122, 126, 128, 132, 134, 139, 147, 148, 154, 194, 195, 197, 198, 241, 244, 250, 252, 266, 311, 337, 355, 472, 480, 486, 487, 488, 489, 491, 492, 493, 494, 496, 497, 498, 519, 538, 544, 562, 563, 564, 565, 566, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 639, 641, 645, 716, 740, 741, 790, 818, 857, 858, 860, 861, 884, 889, 890, 931, 935, 936, 971, 1090, 1097, 1106, 1107, 1108, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1141, 1160, 1166, 1219, 1220, 1223, 1226, 1231, 1301, 1306, 1331, 1340], "calcul": [37, 54, 171, 194, 258, 281, 311, 397, 455, 456, 457, 458, 501, 514, 534, 541, 548, 552, 629, 648, 653, 726, 728, 746, 748, 795, 796, 799, 807, 818, 843, 857, 896, 904, 931, 1013, 1014, 1077, 1078, 1079, 1080, 1125, 1136, 1156, 1212, 1234, 1238, 1320, 1331], "individu": [37, 46, 159, 241, 268, 269, 273, 311, 558, 664, 818, 839, 884, 931, 993, 1249, 1331], "gridlin": [37, 311], "zoom": [37, 311], "freez": [37, 311], "pane": [37, 311], "top": [37, 257, 274, 311, 722, 818, 895, 900, 931], "index": [37, 109, 113, 116, 120, 121, 126, 128, 132, 134, 137, 138, 139, 142, 161, 184, 188, 190, 194, 195, 197, 198, 203, 204, 209, 211, 232, 238, 239, 241, 242, 243, 252, 255, 262, 268, 269, 271, 279, 280, 286, 287, 311, 320, 334, 335, 336, 338, 341, 342, 347, 355, 360, 456, 472, 473, 475, 508, 509, 519, 520, 521, 538, 539, 544, 546, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 639, 641, 649, 655, 663, 666, 667, 686, 698, 708, 716, 717, 740, 774, 777, 818, 855, 857, 858, 860, 861, 884, 890, 893, 899, 903, 909, 910, 931, 936, 950, 951, 952, 953, 954, 957, 958, 963, 971, 976, 1078, 1090, 1091, 1124, 1130, 1131, 1141, 1142, 1143, 1160, 1161, 1166, 1168, 1187, 1219, 1220, 1223, 1226, 1235, 1248, 1251, 1252, 1271, 1283, 1301, 1302, 1331], "thu": [37, 180, 311, 746, 1083, 1331], "altern": [37, 311, 814], "a2": [37, 55, 57, 311], "occur": [37, 60, 61, 311, 344, 512, 513, 576, 607, 818, 839, 840, 848, 850, 880, 892, 931, 960, 1134, 1135, 1181, 1196, 1311, 1331], "equival": [37, 108, 110, 111, 112, 114, 124, 129, 130, 138, 194, 209, 228, 311, 319, 323, 453, 454, 456, 469, 474, 476, 503, 553, 575, 577, 590, 591, 592, 595, 601, 672, 712, 723, 730, 818, 857, 931, 1078, 1124, 1257, 1288, 1290, 1291, 1331], "top_row": [37, 311], "top_col": [37, 311], "base": [37, 67, 100, 152, 175, 183, 194, 195, 197, 198, 241, 311, 402, 411, 452, 455, 456, 457, 458, 465, 480, 484, 549, 550, 556, 558, 604, 611, 616, 620, 622, 624, 626, 628, 631, 633, 635, 679, 702, 818, 846, 853, 857, 858, 860, 861, 884, 931, 936, 1019, 1028, 1074, 1077, 1078, 1079, 1080, 1097, 1101, 1171, 1172, 1176, 1194, 1200, 1264, 1287, 1322, 1331, 1340], "scroll": [37, 311], "region": [37, 136, 311], "initi": [37, 83, 159, 311, 750, 754, 768, 808, 1339], "5th": [37, 311], "properti": [37, 161, 168, 176, 185, 201, 246, 251, 283, 287, 311, 841, 847, 885, 905, 910, 931, 936, 1331, 1340], "readthedoc": [37, 311], "html": [37, 38, 39, 109, 122, 126, 128, 161, 169, 311], "definit": [37, 311, 501, 818, 936, 1125, 1331], "take": [37, 125, 131, 150, 151, 159, 186, 188, 194, 197, 221, 224, 231, 232, 236, 262, 311, 336, 401, 429, 465, 472, 473, 519, 520, 581, 583, 585, 651, 717, 740, 742, 759, 760, 765, 767, 776, 790, 818, 855, 857, 860, 876, 882, 899, 931, 952, 1018, 1050, 1090, 1091, 1141, 1142, 1302, 1322, 1331], "care": [37, 311, 326, 558, 640, 818, 1224, 1331], "rel": [37, 123, 124, 135, 136, 143, 144, 145, 146, 311, 429, 455, 457, 458, 623, 627, 630, 634, 818, 1050, 1077, 1079, 1080, 1331], "working_with_conditional_format": [37, 311], "similarli": [37, 111, 194, 214, 241, 280, 311, 429, 433, 447, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1068], "well": [37, 120, 121, 122, 134, 311, 485, 818, 1102, 1331], "adjac": [37, 311], "two": [37, 52, 53, 91, 92, 110, 112, 114, 123, 186, 214, 223, 224, 232, 243, 272, 290, 297, 311, 320, 398, 405, 469, 472, 475, 546, 604, 650, 738, 739, 746, 748, 795, 796, 818, 875, 876, 912, 919, 931, 936, 976, 1015, 1022, 1168, 1194, 1331], "help": [37, 143, 144, 145, 146, 311, 314, 850, 931, 1331, 1335], "where": [37, 47, 54, 122, 123, 125, 175, 180, 183, 194, 211, 223, 243, 257, 258, 268, 273, 279, 281, 311, 337, 449, 452, 454, 456, 465, 541, 548, 556, 591, 610, 639, 648, 651, 653, 682, 728, 741, 746, 748, 795, 796, 799, 807, 808, 818, 846, 853, 857, 875, 895, 896, 903, 904, 931, 953, 1070, 1074, 1078, 1083, 1087, 1220, 1234, 1238, 1267, 1320, 1322, 1331, 1339], "appear": [37, 66, 111, 311, 725, 818, 936, 1317, 1331], "working_with_sparklin": [37, 311], "inject": [37, 54, 311], "locat": [37, 180, 238, 239, 271, 277, 311, 639, 818, 902, 931, 1083, 1090, 1219, 1220, 1223, 1301, 1331], "syntax": [37, 183, 217, 228, 311, 655, 663, 664, 666, 680, 681, 774, 775, 814, 853, 892, 931, 1240, 1248, 1249, 1251, 1265, 1266, 1331], "correctli": [37, 125, 311, 556, 818], "microsoft": [37, 311], "com": [37, 123, 311, 455, 457, 458, 663, 664, 665, 818, 1077, 1079, 1080, 1248, 1249, 1250, 1331], "u": [37, 50, 69, 71, 139, 152, 214, 311, 403, 405, 412, 438, 450, 697, 700, 732, 734, 759, 760, 761, 762, 763, 764, 770, 936, 1020, 1022, 1029, 1059, 1071, 1282, 1285], "offic": [37, 311], "f5ed2452": [37, 311], "2337": [37, 311], "4f71": [37, 311], "bed3": [37, 311], "c8ae6d2b276": [37, 311], "basic": [37, 311, 1340], "random": [37, 38, 126, 141, 148, 199, 245, 311, 478, 533, 607, 638, 644, 727, 818, 830, 1095, 1155, 1196, 1218, 1230, 1319, 1331], "dtm": [37, 311, 405, 936, 1022], "500": [37, 279, 311, 407, 408, 413, 417, 420, 422, 427, 434, 437, 850, 903, 931, 1037, 1040, 1048, 1207, 1208, 1210, 1331], "val": [37, 240, 311, 558, 600, 720, 808, 818, 883, 931], "10_000": [37, 311], "20_000": [37, 311], "30_000": [37, 311], "increas": [37, 54, 120, 131, 132, 139, 311, 393, 615, 818, 1011, 1204, 1331], "b4": [37, 311], "light": [37, 311], "twice": [37, 311], "titl": [37, 47, 311], "explicit": [37, 122, 134, 148, 257, 279, 311, 793, 895, 903, 931], "integr": [37, 273, 311, 1340], "multi_fram": [37, 311], "wb": [37, 311], "coordin": [37, 311], "advanc": [37, 125, 232, 311, 360, 546, 579, 582, 584, 586, 587, 976, 1168, 1340], "min_color": [37, 311], "76933c": [37, 311], "mid_color": [37, 311], "c4d79b": [37, 311], "max_color": [37, 311], "ebf1d": [37, 311], "data_bar_2010": [37, 311], "bar_color": [37, 311], "9bbb59": [37, 311], "bar_negative_color_sam": [37, 311], "bar_negative_border_color_sam": [37, 311], "white": [37, 311], "w": [37, 49, 50, 122, 194, 197, 244, 311, 658, 663, 665, 732, 734, 857, 860, 931, 936, 1243, 1248, 1250, 1278], "get_worksheet_by_nam": [37, 311], "fmt_titl": [37, 311], "add_format": [37, 311], "4f6228": [37, 311], "font_siz": [37, 311], "ital": [37, 311], "customis": [37, 311], "trend": [37, 311], "win_loss": [37, 311], "subtl": [37, 311], "tone": [37, 311], "hidden": [37, 311], "q1": [37, 311], "55": [37, 56, 311], "35": [37, 311, 397, 761, 818, 1014, 1331], "q2": [37, 311], "30": [37, 171, 180, 194, 202, 231, 237, 239, 264, 284, 311, 334, 335, 336, 397, 405, 407, 408, 413, 417, 420, 422, 424, 425, 427, 431, 432, 433, 434, 437, 440, 447, 448, 478, 564, 643, 761, 778, 804, 805, 818, 843, 848, 857, 879, 906, 931, 936, 1014, 1022, 1046, 1053, 1054, 1061, 1068, 1094, 1331, 1340], "60": [37, 180, 311, 413, 420, 422, 434, 446, 469, 632, 633, 697, 818, 1051, 1055, 1067, 1198, 1282, 1331], "q3": [37, 311], "40": [37, 171, 180, 214, 231, 311, 433, 447, 478, 548, 701, 711, 818, 843, 879, 931, 936, 1033, 1068, 1170, 1286], "80": [37, 311], "q4": [37, 311], "75": [37, 171, 311, 323, 595, 604, 619, 621, 623, 625, 630, 632, 634, 781, 818, 843, 931, 936, 1013, 1097, 1125, 1194, 1331, 1340], "account": [37, 115, 123, 136, 311, 429, 455, 457, 458, 818, 1050, 1077, 1079, 1080, 1331], "flavour": [37, 122, 311], "integer_dtyp": [37, 247, 311, 886, 931, 936], "0_": [37, 311], "just": [37, 113, 122, 134, 223, 311, 875, 931, 936], "unifi": [37, 268, 273, 311, 936], "2_color_scal": [37, 311], "95b3d7": [37, 311], "ffffff": [37, 311], "standardis": [37, 311], "z": [37, 49, 62, 83, 115, 148, 178, 206, 208, 213, 223, 243, 244, 275, 278, 311, 319, 321, 323, 478, 510, 555, 558, 580, 582, 584, 586, 587, 595, 602, 610, 611, 656, 664, 682, 697, 700, 713, 732, 734, 753, 783, 785, 788, 794, 802, 818, 865, 875, 893, 895, 931, 936, 1086, 1200, 1241, 1249, 1267, 1282, 1285, 1331, 1339], "score": [37, 311], "conjunct": [37, 91, 122, 125, 131, 148, 311, 774, 777], "a123": [37, 311], "b345": [37, 311], "c567": [37, 311], "d789": [37, 311], "e101": [37, 311], "45": [37, 171, 241, 311, 405, 433, 447, 616, 632, 633, 658, 664, 709, 738, 739, 761, 778, 804, 805, 818, 843, 884, 931, 936, 1022, 1054, 1068, 1243, 1249, 1295, 1340], "85": [37, 311, 1125, 1331, 1340], "font": [37, 311], "consola": [37, 311], "stdev": [37, 311], "ipccompress": [38, 39, 311], "futur": [38, 61, 125, 161, 171, 218, 220, 225, 259, 311, 759, 840, 843, 931, 1321, 1331], "arrow": [38, 39, 44, 108, 122, 123, 126, 128, 137, 211, 243, 244, 263, 265, 269, 311, 931, 1305, 1311, 1331], "ipc": [38, 39, 44, 126, 127, 128, 137, 140, 311, 830, 931], "binari": [38, 122, 125, 311, 364, 365, 366, 367, 368, 659, 936, 979, 980, 982, 983, 1244], "feather": [38, 126, 137, 311, 830], "access": [38, 55, 56, 57, 58, 126, 132, 136, 137, 139, 161, 211, 242, 243, 257, 311, 665, 708, 841, 847, 885, 895, 905, 908, 931, 1250, 1340], "lz4": [38, 39, 42, 44, 46, 311, 931], "zstd": [38, 39, 42, 44, 46, 311, 931], "intern": [38, 122, 141, 211, 311, 469, 818, 1339], "might": [38, 120, 121, 134, 156, 164, 269, 274, 311, 326, 558, 725, 818, 834, 894, 900, 931], "implement": [38, 42, 109, 122, 161, 199, 217, 297, 311, 314, 478, 500, 558, 579, 580, 582, 584, 586, 587, 602, 708, 713, 781, 818, 919, 1095, 1176, 1219, 1222, 1331, 1335], "unstabl": [38, 43, 44, 45, 46, 60, 61, 70, 72, 122, 132, 139, 140, 257, 268, 273, 278, 279, 311, 393, 394, 433, 480, 558, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 795, 796, 818, 839, 840, 895, 903, 931, 990, 1011, 1012, 1054, 1097, 1194, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1309, 1314, 1331], "break": [38, 40, 43, 44, 45, 46, 60, 61, 70, 72, 132, 139, 140, 164, 257, 268, 273, 274, 278, 279, 280, 311, 326, 369, 370, 393, 394, 433, 447, 480, 558, 604, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 721, 722, 795, 796, 818, 834, 839, 840, 895, 900, 903, 931, 988, 990, 1011, 1012, 1054, 1068, 1097, 1194, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1309, 1314, 1331], "batch": [39, 60, 61, 117, 121, 122, 128, 138, 140, 243, 273, 311, 839, 840, 870, 871, 931], "iobas": [40, 41, 129, 130, 172, 249, 311, 396, 570, 573, 818, 844, 888, 931], "row_ori": [40, 311], "pretti": [40, 311], "serial": [40, 41, 172, 311, 396, 573, 818, 844, 931], "orient": [40, 55, 57, 112, 114, 311, 931], "slower": [40, 112, 114, 125, 193, 196, 217, 230, 280, 297, 311, 558, 781, 818, 856, 859, 919, 931, 1176, 1331], "common": [40, 54, 60, 61, 62, 120, 121, 134, 279, 311, 555, 580, 818, 824, 839, 840, 848, 850, 880, 892, 903, 931], "31": [40, 58, 164, 171, 172, 194, 241, 249, 257, 274, 311, 369, 370, 404, 405, 409, 419, 425, 429, 440, 662, 697, 721, 722, 758, 761, 770, 778, 818, 834, 843, 857, 884, 900, 931, 936, 1019, 1021, 1022, 1026, 1039, 1046, 1061, 1247, 1282, 1340], "next": [40, 56, 164, 194, 214, 241, 274, 280, 311, 363, 369, 370, 401, 429, 433, 447, 607, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 721, 722, 759, 760, 762, 763, 805, 806, 818, 834, 857, 866, 884, 900, 931, 988, 1018, 1050, 1054, 1068, 1196, 1331], "releas": [40, 61, 125, 164, 274, 280, 311, 326, 369, 370, 433, 447, 558, 721, 722, 818, 834, 840, 900, 931, 1054, 1068, 1331, 1340], "regular": [40, 116, 211, 242, 243, 280, 287, 311, 459, 655, 657, 658, 663, 664, 665, 666, 680, 681, 742, 766, 818, 910, 931, 936, 1240, 1242, 1243, 1248, 1249, 1250, 1251, 1265, 1266], "write_ndjson": [40, 311], "newlin": [41, 130, 138, 311], "delimit": [41, 43, 130, 138, 232, 266, 311, 654, 931, 1239, 1306, 1331], "parquetcompress": [42, 311], "compression_level": [42, 46, 311, 931], "statist": [42, 46, 120, 121, 132, 139, 171, 311, 457, 458, 501, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 648, 818, 843, 931, 1013, 1079, 1080, 1125, 1212, 1234, 1331], "row_group_s": [42, 46, 311, 931], "data_page_s": [42, 311], "use_pyarrow": [42, 120, 126, 128, 132, 269, 311, 1310, 1311, 1331], "pyarrow_opt": [42, 124, 132, 135, 311], "parquet": [42, 46, 132, 133, 139, 311, 830, 931], "gzip": [42, 46, 311, 931], "lzo": [42, 46, 311, 931], "brotli": [42, 46, 311, 931], "choos": [42, 44, 46, 194, 232, 311, 857, 931], "good": [42, 44, 46, 211, 311, 931], "fast": [42, 44, 46, 153, 155, 311, 462, 640, 818, 931, 935, 1084, 1224, 1331, 1340], "decompress": [42, 44, 46, 311, 931], "backward": [42, 46, 182, 214, 311, 363, 401, 426, 464, 818, 852, 866, 931, 1018, 1047, 1086, 1331], "guarante": [42, 46, 120, 121, 164, 171, 199, 274, 276, 311, 369, 370, 478, 721, 722, 818, 834, 843, 850, 900, 901, 931, 1094, 1095, 1331], "deal": [42, 46, 211, 311, 322, 324, 432, 433, 447, 607, 697, 700, 731, 732, 733, 734, 761, 818, 931, 940, 941, 1053, 1054, 1068, 1196, 1282, 1285, 1331], "older": [42, 46, 311, 931], "reader": [42, 46, 117, 120, 121, 125, 126, 128, 132, 311, 931], "higher": [42, 46, 171, 234, 303, 311, 605, 627, 628, 792, 818, 843, 881, 925, 931, 1013, 1195, 1211, 1331], "mean": [42, 46, 120, 121, 126, 134, 171, 182, 193, 194, 214, 221, 232, 241, 280, 289, 311, 429, 433, 447, 461, 464, 469, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 648, 654, 663, 759, 760, 762, 763, 764, 785, 805, 806, 808, 818, 843, 852, 856, 857, 866, 870, 871, 884, 911, 931, 1013, 1050, 1054, 1068, 1082, 1086, 1094, 1208, 1234, 1239, 1248, 1331], "smaller": [42, 46, 178, 311, 850, 931, 1076, 1331], "disk": [42, 43, 44, 45, 46, 126, 311, 892, 931], "22": [42, 46, 142, 150, 311, 409, 430, 433, 447, 449, 450, 618, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 697, 761, 818, 931, 936, 1054, 1068, 1071, 1206, 1282, 1331, 1340], "behavior": [42, 46, 175, 213, 311, 347, 471, 519, 521, 544, 557, 662, 767, 776, 790, 818, 846, 865, 931, 963, 1012, 1141, 1143, 1166, 1175, 1194, 1247, 1331], "512": [42, 122, 211, 311, 601, 818, 1190, 1331], "page": [42, 46, 126, 132, 137, 139, 311, 818, 830, 931, 1331], "At": [42, 311], "moment": [42, 169, 311, 501, 648, 818, 1125, 1234, 1331], "write_t": [42, 311], "partition_col": [42, 123, 311], "write_to_dataset": [42, 311], "spark": [42, 311], "partit": [42, 123, 124, 132, 135, 139, 140, 212, 230, 311], "we": [42, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 171, 172, 194, 214, 241, 280, 311, 396, 429, 433, 447, 480, 516, 546, 556, 558, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 665, 679, 702, 758, 759, 760, 761, 762, 763, 778, 805, 806, 808, 818, 843, 844, 857, 866, 870, 871, 884, 931, 943, 1050, 1054, 1068, 1097, 1138, 1176, 1250, 1264, 1287, 1331], "use_pyarrow_write_to_dataset": [42, 311], "first": [42, 54, 120, 121, 125, 126, 128, 132, 134, 143, 144, 145, 146, 162, 192, 194, 197, 200, 214, 216, 217, 227, 231, 232, 241, 261, 266, 267, 275, 276, 280, 287, 294, 311, 336, 338, 347, 393, 397, 426, 429, 433, 450, 469, 479, 488, 489, 505, 514, 516, 521, 522, 546, 556, 557, 558, 568, 600, 616, 639, 651, 655, 662, 663, 666, 667, 668, 670, 680, 681, 698, 743, 750, 768, 772, 808, 818, 839, 857, 860, 862, 866, 869, 879, 884, 901, 908, 910, 916, 931, 936, 952, 963, 1011, 1013, 1014, 1047, 1050, 1054, 1071, 1096, 1107, 1108, 1127, 1136, 1138, 1143, 1144, 1168, 1175, 1176, 1220, 1236, 1247, 1248, 1250, 1251, 1252, 1253, 1255, 1265, 1266, 1283, 1300, 1306, 1308, 1311, 1331, 1340], "watermark": [42, 311], "partitioned_object": [42, 311], "maintain_ord": [43, 44, 45, 46, 164, 193, 196, 230, 232, 256, 274, 276, 280, 290, 293, 295, 298, 299, 300, 301, 302, 303, 304, 311, 320, 361, 369, 370, 472, 475, 547, 558, 651, 721, 722, 724, 740, 818, 834, 840, 848, 850, 856, 859, 880, 892, 894, 900, 901, 912, 915, 917, 920, 921, 922, 923, 924, 925, 926, 931, 977, 1169, 1316, 1331], "type_coercion": [43, 44, 45, 46, 60, 61, 839, 840, 848, 850, 880, 892, 931], "predicate_pushdown": [43, 44, 45, 46, 60, 61, 839, 840, 848, 850, 870, 871, 880, 892, 931], "projection_pushdown": [43, 44, 45, 46, 60, 61, 839, 840, 848, 850, 870, 871, 880, 892, 931], "simplify_express": [43, 44, 45, 46, 60, 61, 839, 840, 848, 850, 880, 892, 931], "slice_pushdown": [43, 44, 45, 46, 60, 61, 839, 840, 848, 850, 870, 871, 880, 892, 931], "no_optim": [43, 44, 45, 46, 60, 61, 839, 840, 850, 870, 871, 880, 931], "evalu": [43, 44, 45, 46, 181, 183, 214, 311, 323, 337, 339, 340, 393, 465, 482, 506, 507, 546, 595, 731, 733, 737, 741, 759, 760, 762, 763, 765, 774, 775, 791, 794, 800, 805, 806, 808, 809, 818, 839, 853, 863, 865, 866, 931, 953, 955, 956, 1011, 1087, 1128, 1129, 1322, 1331], "queri": [43, 44, 45, 46, 47, 49, 60, 61, 122, 123, 126, 134, 137, 138, 139, 180, 215, 231, 257, 311, 556, 558, 670, 818, 839, 840, 848, 850, 862, 869, 880, 892, 895, 909, 910, 913, 919, 931, 1083, 1176, 1255, 1331, 1339], "ram": [43, 44, 45, 46, 931], "maintain": [43, 44, 45, 46, 164, 256, 274, 311, 361, 369, 370, 547, 639, 651, 721, 722, 724, 740, 818, 834, 843, 894, 900, 931, 977, 1169, 1220, 1316, 1331], "slightli": [43, 44, 45, 46, 469, 818, 931], "faster": [43, 44, 45, 46, 122, 125, 180, 269, 278, 311, 326, 558, 725, 818, 931, 943, 1083, 1176, 1331], "coercion": [43, 44, 45, 46, 60, 61, 610, 818, 839, 840, 848, 850, 880, 892, 931], "optim": [43, 44, 45, 46, 60, 61, 132, 134, 137, 138, 139, 211, 215, 231, 235, 243, 276, 311, 835, 839, 840, 848, 850, 870, 871, 880, 892, 901, 909, 910, 919, 931, 991, 1219, 1331], "pushdown": [43, 44, 45, 46, 60, 61, 839, 840, 848, 850, 870, 871, 880, 882, 892, 909, 910, 931, 1219, 1222, 1331], "project": [43, 44, 45, 46, 60, 61, 134, 136, 137, 138, 139, 326, 650, 651, 818, 839, 840, 848, 850, 870, 871, 880, 882, 888, 892, 931], "run": [43, 44, 45, 46, 60, 61, 69, 122, 150, 153, 154, 155, 193, 196, 215, 217, 232, 248, 276, 285, 297, 311, 326, 393, 516, 556, 558, 614, 615, 672, 797, 818, 839, 840, 848, 850, 856, 859, 870, 871, 875, 880, 887, 892, 901, 907, 931, 936, 1011, 1138, 1176, 1203, 1204, 1257, 1331, 1339, 1340], "slice": [43, 44, 45, 46, 55, 60, 61, 178, 200, 212, 261, 311, 522, 543, 558, 567, 569, 617, 619, 621, 623, 625, 627, 630, 632, 634, 667, 698, 818, 839, 840, 848, 850, 870, 871, 880, 892, 931, 935, 1076, 1096, 1144, 1165, 1205, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1252, 1283, 1300, 1331], "off": [43, 44, 45, 46, 60, 61, 120, 121, 134, 401, 742, 839, 840, 848, 850, 870, 871, 880, 931, 1018], "certain": [43, 44, 45, 46, 61, 124, 135, 203, 204, 280, 311, 693, 694, 839, 840, 880, 931, 1331], "lf": [43, 44, 45, 46, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 863, 864, 865, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 885, 886, 888, 890, 892, 893, 894, 896, 897, 898, 900, 901, 903, 904, 905, 906, 908, 909, 910, 914, 918, 931, 1339, 1340], "scan_csv": [43, 44, 45, 46, 120, 121, 931], "my_larger_than_ram_fil": [43, 44, 45, 46, 931], "ndjson": [45, 931], "data_pagesize_limit": [46, 931], "reduc": [46, 120, 121, 132, 134, 137, 138, 139, 243, 298, 299, 301, 304, 311, 643, 751, 768, 818, 920, 921, 923, 926, 931, 1178, 1193, 1228, 1299, 1331], "pressur": [46, 120, 121, 132, 134, 138, 139, 643, 818, 931, 1228, 1331], "speed": [46, 326, 558, 818, 931, 1340], "eager": [47, 48, 49, 50, 51, 52, 194, 214, 232, 278, 311, 403, 406, 409, 412, 425, 426, 429, 430, 432, 433, 438, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 737, 741, 759, 760, 762, 763, 770, 774, 775, 791, 794, 800, 805, 806, 809, 817, 818, 857, 871, 931, 1019, 1020, 1023, 1026, 1028, 1029, 1030, 1036, 1037, 1040, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1339], "eagerli": [47, 546], "init": [47, 159], "itself": [47, 148, 311, 314, 369, 370, 558, 618, 619, 621, 623, 625, 627, 629, 630, 632, 634, 721, 722, 795, 796, 818, 834, 868, 900, 931, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1331, 1335, 1339], "impact": [47, 194, 197, 311, 857, 860, 931, 1339], "declar": [47, 108, 110, 111, 112, 114, 122, 129, 130, 138, 268, 273, 311, 931, 936], "godfath": 47, "1972": 47, "6_000_000": 47, "134_821_952": 47, "dark": 47, "knight": 47, "2008": 47, "185_000_000": 47, "533_316_061": 47, "schindler": 47, "1993": 47, "22_000_000": 47, "96_067_179": 47, "pulp": 47, "fiction": 47, "1994": 47, "8_000_000": 47, "107_930_000": 47, "shawshank": 47, "redempt": 47, "25_000_000": 47, "28_341_469": 47, "release_year": 47, "budget": 47, "gross": 47, "imdb_scor": 47, "ctx": [47, 48, 49, 50, 51, 52], "film": 47, "1990": [47, 120], "BY": [47, 49, 895, 931], "desc": [47, 49, 936], "AS": [47, 257, 311, 798, 895, 931, 1339], "decad": 47, "total_gross": 47, "n_film": 47, "2000": [47, 404, 415, 419, 425, 426, 429, 936, 1021, 1032, 1039, 1046, 1047, 1050, 1055], "533316061": 47, "232338648": 47, "1970": [47, 68, 69, 140], "134821952": 47, "register_glob": [48, 50, 52, 1339], "register_mani": [48, 49, 52], "unregist": [48, 49, 50, 1339], "frame_data": [48, 51], "collect": [48, 49, 52, 57, 60, 61, 134, 135, 136, 140, 150, 151, 154, 175, 215, 232, 257, 263, 276, 277, 311, 459, 490, 558, 744, 766, 770, 800, 818, 833, 834, 836, 837, 840, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 862, 864, 865, 866, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 886, 888, 890, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 906, 908, 909, 910, 911, 912, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 931, 936, 1110, 1331, 1339, 1340], "global": [49, 53, 91, 92, 125, 141, 150, 158, 257, 311, 611, 818, 895, 931, 987, 989, 1200, 1331, 1339], "scope": [49, 52, 159, 829, 936, 1339], "map": [49, 50, 83, 110, 111, 120, 121, 122, 123, 126, 127, 132, 133, 134, 137, 150, 165, 185, 211, 217, 236, 242, 243, 244, 246, 264, 311, 321, 433, 447, 555, 556, 557, 558, 579, 581, 582, 584, 586, 587, 611, 727, 780, 818, 836, 882, 885, 931, 936, 1013, 1054, 1068, 1175, 1176, 1200, 1319, 1331, 1339], "recent": [49, 143, 144, 145, 146, 269, 311, 597, 818, 1190, 1311, 1331, 1339], "df1": [49, 51, 52, 54, 62, 143, 144, 177, 180, 224, 257, 282, 311, 876, 931], "df2": [49, 51, 52, 54, 62, 143, 144, 177, 180, 282, 311], "join": [49, 53, 54, 60, 61, 62, 92, 183, 214, 279, 311, 465, 483, 596, 818, 839, 840, 848, 850, 853, 866, 880, 892, 903, 908, 931], "named_fram": [50, 1339], "lf1": [50, 52, 895, 931], "m": [50, 69, 71, 213, 311, 402, 403, 405, 411, 412, 436, 438, 439, 450, 663, 697, 699, 700, 704, 759, 760, 761, 762, 763, 764, 770, 865, 931, 936, 1019, 1020, 1022, 1028, 1029, 1057, 1059, 1060, 1071, 1248, 1282, 1284, 1285, 1289], "o": [50, 126, 137, 369, 370, 393, 662, 721, 722, 818, 984, 1011, 1247, 1277, 1315, 1331], "lf2": [50, 52, 895, 931], "p": [50, 56, 231, 311, 600, 800, 818, 879, 931, 936, 1251, 1252], "q": [50, 244, 311, 800], "r": [50, 120, 121, 134, 311, 600, 658, 662, 663, 664, 665, 680, 681, 818, 936, 1243, 1247, 1248, 1249, 1250, 1265, 1266, 1283], "lf3": [50, 931], "lf4": [50, 931], "either": [50, 83, 150, 209, 213, 214, 215, 218, 220, 225, 230, 241, 242, 259, 268, 269, 311, 456, 556, 604, 611, 616, 697, 731, 740, 800, 818, 865, 866, 868, 884, 931, 935, 936, 1078, 1194, 1200, 1282, 1331, 1340], "tbl1": [50, 52], "tbl2": [50, 52], "arg": [50, 53, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 183, 231, 311, 336, 600, 740, 769, 818, 853, 879, 931, 935, 1176, 1331], "tbl3": 50, "tbl4": 50, "statement": [51, 808], "hello_world": 51, "baz": [51, 204, 205, 232, 277, 311, 665, 687, 689, 767, 776, 790, 814, 864, 902, 931, 936, 1250, 1274], "hello_data": 51, "foo_bar": [51, 562, 566, 687, 778], "registr": [52, 257, 311, 830, 895, 931], "lifetim": [52, 159, 829], "context": [52, 53, 91, 92, 156, 228, 257, 311, 320, 326, 465, 516, 556, 558, 567, 650, 651, 727, 735, 747, 749, 767, 770, 776, 777, 781, 790, 794, 797, 817, 818, 829, 830, 895, 908, 931, 1138, 1319, 1331, 1339], "manag": [52, 53, 91, 92, 829, 830, 1339], "often": [52, 123, 159, 194, 195, 197, 198, 241, 311, 344, 512, 513, 610, 616, 818, 857, 858, 860, 861, 884, 931, 960, 1134, 1135], "want": [52, 61, 111, 113, 125, 180, 217, 228, 257, 311, 401, 465, 556, 558, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 656, 671, 682, 742, 750, 759, 768, 791, 794, 809, 818, 840, 862, 869, 895, 931, 936, 1018, 1083, 1176, 1241, 1256, 1267, 1331], "df0": [52, 224, 311, 876, 931], "exit": [52, 53, 91, 159, 1339], "construct": [52, 53, 91, 92, 108, 110, 111, 112, 113, 114, 115, 122, 311, 471, 791, 794, 809, 814, 818, 844, 931, 987, 1331], "persist": 52, "through": [52, 109, 122, 814, 936, 1331, 1339], "tbl0": 52, "remain": [52, 120, 121, 134, 175, 178, 183, 232, 311, 399, 400, 465, 515, 611, 688, 689, 818, 846, 853, 870, 871, 931, 1016, 1017, 1076, 1087, 1137, 1200, 1273, 1274, 1331], "text": [52, 119, 122, 456, 667, 671, 672, 680, 681, 683, 686, 698, 798, 818, 1078, 1252, 1256, 1257, 1268, 1271, 1283, 1331, 1340], "misc": 52, "testing1234": 52, "test1": 52, "test2": 52, "test3": 52, "disabl": [53, 91, 92, 151, 211, 311, 839, 931], "cach": [53, 60, 61, 91, 92, 126, 134, 137, 139, 143, 144, 145, 146, 158, 611, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 697, 699, 700, 704, 818, 829, 839, 840, 848, 850, 880, 892, 931, 987, 1200, 1282, 1284, 1285, 1289, 1331], "under": [53, 55, 56, 57, 58, 91, 92, 257, 311, 810, 811, 813, 814, 819, 820, 823, 825, 826, 827, 895, 931, 1323, 1325, 1327, 1332, 1336, 1337, 1338], "physic": [53, 66, 92, 120, 121, 214, 311, 373, 720, 818, 835, 865, 866, 931, 988, 989, 1313, 1331], "equal": [53, 92, 120, 121, 122, 134, 143, 144, 145, 146, 164, 187, 194, 197, 214, 224, 256, 274, 311, 369, 370, 394, 447, 453, 454, 456, 474, 503, 546, 591, 604, 610, 617, 618, 619, 621, 623, 625, 627, 630, 632, 634, 651, 677, 678, 707, 721, 722, 740, 795, 796, 808, 814, 818, 834, 857, 860, 866, 876, 894, 900, 931, 1012, 1054, 1078, 1168, 1194, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1221, 1262, 1263, 1292, 1331, 1340], "concaten": [53, 62, 91, 92, 186, 231, 311, 600, 654, 744, 745, 818, 879, 931, 993, 1182, 1239, 1331], "introduc": [53, 92, 697, 699, 700, 1282, 1284, 1285], "overhead": [53, 92, 134, 137, 138, 139], "amount": [53, 71, 92, 326, 558, 764, 818], "depend": [53, 59, 92, 122, 142, 341, 342, 508, 509, 558, 567, 604, 607, 764, 767, 770, 776, 790, 818, 957, 958, 1130, 1131, 1194, 1196, 1331, 1340], "categori": [53, 72, 92, 266, 311, 372, 373, 394, 480, 604, 818, 986, 988, 1012, 1097, 1194, 1306, 1331], "nest": [53, 115, 151, 152, 178, 311, 612, 818, 830, 1076, 1201, 1331, 1339, 1340], "clear": [53, 91, 167, 311, 838, 931, 998, 1331], "outermost": 53, "s1": [53, 91, 92, 145, 146, 186, 311, 976, 1075, 1092, 1124, 1132, 1168, 1197, 1322, 1331], "color": [53, 91, 92, 297, 364, 365, 366, 367, 368, 659, 727, 818, 919, 979, 980, 981, 982, 983, 1244, 1319, 1331], "red": [53, 91, 92, 297, 727, 818, 919, 1319, 1331], "green": [53, 91, 92, 297, 727, 818, 919, 1319, 1331], "blue": [53, 91, 92, 364, 365, 366, 367, 368, 727, 818, 1319, 1331], "concat": [53, 91, 92, 96, 121, 214, 311, 993, 1092, 1182, 1197, 1331], "decor": [53, 55, 56, 57, 58, 150, 154, 217, 311, 558, 818, 829, 830, 1176, 1331], "dure": [53, 120, 121, 134, 159, 180, 311, 1083, 1331], "afterward": [53, 808], "construct_categor": 53, "frametyp": [54, 1339], "joinstrategi": [54, 213, 311, 865, 931], "descend": [54, 164, 250, 256, 274, 311, 336, 356, 370, 540, 607, 640, 650, 651, 722, 727, 740, 818, 834, 889, 894, 900, 931, 952, 972, 1120, 1162, 1196, 1224, 1236, 1319, 1331], "fill": [54, 62, 166, 181, 182, 252, 253, 278, 311, 363, 384, 387, 463, 464, 470, 483, 484, 619, 621, 625, 632, 641, 642, 674, 684, 769, 791, 794, 809, 818, 851, 852, 890, 891, 908, 931, 1085, 1086, 1100, 1101, 1187, 1207, 1208, 1210, 1213, 1214, 1215, 1226, 1227, 1259, 1269, 1331], "sort": [54, 55, 143, 144, 164, 194, 195, 197, 198, 214, 224, 231, 232, 241, 250, 274, 280, 294, 305, 311, 336, 369, 370, 373, 456, 465, 558, 596, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 640, 651, 721, 722, 727, 729, 740, 781, 818, 834, 848, 857, 858, 860, 861, 866, 876, 879, 880, 884, 889, 892, 900, 916, 927, 931, 936, 952, 988, 1078, 1120, 1224, 1316, 1319, 1331, 1340], "origin": [54, 120, 121, 134, 175, 183, 276, 311, 399, 400, 432, 433, 447, 465, 500, 515, 557, 579, 596, 609, 610, 611, 612, 614, 657, 658, 663, 670, 738, 739, 818, 846, 853, 901, 931, 1012, 1016, 1017, 1053, 1054, 1068, 1087, 1137, 1175, 1194, 1200, 1201, 1203, 1242, 1243, 1248, 1255, 1331], "In": [54, 61, 122, 124, 135, 136, 139, 150, 154, 159, 178, 180, 194, 195, 197, 198, 214, 217, 228, 241, 269, 311, 556, 558, 616, 759, 818, 840, 857, 858, 860, 861, 884, 931, 1076, 1083, 1197, 1331], "duplic": [54, 96, 206, 213, 214, 276, 279, 311, 321, 486, 500, 579, 604, 818, 865, 866, 901, 903, 931, 1104, 1194, 1331], "outer": [54, 62, 279, 311, 903, 931], "suitabl": [54, 62, 122, 148, 217, 311, 558, 639, 818, 1176, 1220, 1331], "get": [54, 61, 127, 133, 140, 164, 168, 176, 185, 189, 191, 194, 195, 197, 198, 200, 201, 206, 208, 209, 216, 219, 226, 227, 232, 241, 242, 246, 251, 255, 261, 270, 274, 283, 294, 305, 311, 320, 334, 335, 336, 338, 346, 349, 361, 370, 372, 384, 385, 386, 387, 388, 389, 390, 391, 392, 401, 412, 466, 472, 479, 499, 502, 505, 518, 524, 547, 559, 560, 561, 567, 569, 574, 588, 589, 598, 599, 605, 615, 616, 649, 653, 662, 714, 715, 721, 722, 724, 728, 740, 742, 767, 772, 776, 781, 782, 783, 784, 786, 787, 788, 790, 799, 803, 807, 818, 834, 839, 840, 841, 847, 854, 857, 858, 860, 861, 862, 867, 869, 884, 885, 893, 898, 900, 905, 916, 927, 931, 935, 950, 951, 952, 953, 954, 962, 965, 977, 986, 993, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1018, 1029, 1073, 1088, 1092, 1096, 1102, 1104, 1122, 1127, 1140, 1146, 1169, 1177, 1179, 1180, 1182, 1184, 1185, 1186, 1191, 1192, 1195, 1204, 1235, 1238, 1247, 1300, 1306, 1312, 1316, 1320, 1321, 1331], "speedup": [54, 211, 217, 311, 558, 818, 1176, 1331], "receiv": [54, 122, 134, 217, 231, 297, 311, 558, 600, 818, 879, 931, 1340], "now": [54, 125, 194, 241, 269, 311, 433, 447, 456, 818, 857, 884, 931, 1054, 1068, 1285, 1311, 1331], "One": [54, 171, 228, 232, 268, 273, 311, 323, 595, 736, 747, 767, 773, 776, 784, 786, 789, 790, 798, 818, 843, 931, 936, 1013, 1331], "whose": [54, 214, 232, 311, 459, 766, 818, 866, 931, 936], "uniqu": [54, 147, 148, 149, 152, 154, 163, 208, 213, 228, 232, 244, 302, 311, 327, 338, 353, 394, 499, 531, 578, 604, 697, 699, 700, 704, 725, 727, 736, 789, 818, 833, 865, 924, 931, 935, 954, 969, 1012, 1122, 1153, 1183, 1194, 1282, 1284, 1285, 1289, 1317, 1319, 1331], "post": 54, "constrain": [54, 175, 311, 846, 931, 936], "newli": 54, "boolean": [54, 150, 164, 183, 186, 256, 274, 311, 322, 323, 324, 339, 340, 343, 364, 367, 368, 370, 415, 465, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 506, 507, 511, 593, 595, 598, 599, 651, 668, 722, 729, 730, 740, 741, 800, 808, 818, 834, 853, 894, 900, 931, 936, 940, 941, 953, 955, 956, 959, 979, 1032, 1087, 1102, 1103, 1104, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1116, 1117, 1118, 1122, 1128, 1129, 1133, 1188, 1191, 1192, 1222, 1240, 1322, 1331], "know": [54, 122, 232, 311, 546, 556, 818, 1321, 1331], "2022": [54, 165, 171, 192, 311, 405, 433, 447, 697, 759, 760, 762, 763, 764, 770, 836, 843, 931, 936, 1022, 1033, 1054, 1068, 1282], "df3": [54, 311], "set_tbl_format": 54, "09": [54, 120, 171, 241, 311, 401, 405, 425, 426, 616, 701, 758, 759, 761, 806, 818, 843, 884, 931, 936, 1018, 1286], "02": [54, 165, 171, 192, 194, 241, 280, 311, 401, 403, 405, 412, 425, 426, 429, 432, 438, 441, 444, 446, 450, 616, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 697, 699, 700, 704, 742, 758, 759, 760, 761, 762, 763, 764, 818, 836, 843, 857, 884, 931, 936, 976, 1020, 1022, 1024, 1025, 1029, 1030, 1036, 1037, 1043, 1046, 1047, 1048, 1053, 1054, 1058, 1059, 1062, 1065, 1067, 1068, 1168, 1282, 1284, 1285, 1289], "03": [54, 115, 120, 165, 194, 214, 241, 280, 311, 403, 405, 406, 412, 425, 426, 429, 432, 433, 436, 438, 439, 440, 441, 444, 446, 447, 450, 456, 469, 616, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 699, 704, 758, 759, 760, 761, 762, 763, 764, 818, 836, 857, 884, 931, 936, 1020, 1022, 1023, 1029, 1030, 1036, 1037, 1046, 1047, 1048, 1053, 1054, 1057, 1059, 1060, 1061, 1062, 1065, 1067, 1284, 1289], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 120, 121, 134, 276, 279, 280, 311, 471, 500, 556, 557, 572, 580, 611, 743, 818, 901, 903, 931, 1175, 1200, 1331], "easili": [54, 247, 273, 284, 289, 311, 800, 886, 906, 911, 931], "dot": [54, 818, 892, 931, 1331], "product": [54, 169, 213, 311, 386, 391, 398, 818, 850, 865, 931, 1005, 1009, 1015, 1331], "fill_nul": [54, 181, 311, 463, 818, 851, 908, 931, 1085, 1331], "sum_horizont": [54, 259, 311, 801], "167": 54, "47": [54, 171, 311, 632, 633, 818, 843, 931, 936], "callabl": [55, 56, 57, 58, 134, 162, 186, 217, 231, 236, 291, 297, 311, 326, 360, 546, 554, 555, 556, 558, 580, 581, 600, 617, 618, 735, 750, 751, 754, 755, 768, 779, 780, 781, 793, 818, 870, 871, 879, 882, 913, 919, 931, 943, 976, 1168, 1176, 1205, 1206, 1331], "by_first_letter_of_column_nam": 55, "f": [55, 121, 122, 192, 212, 263, 269, 275, 278, 311, 319, 360, 546, 643, 662, 697, 700, 735, 744, 779, 818, 936, 976, 1168, 1247, 1282, 1285], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 364, 367, 564, 655, 661, 895, 931, 936, 1246], "to_seri": [55, 189, 311, 697, 741, 794, 1282], "xy": [55, 57], "yz": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "ceil": [56, 818, 1331], "previou": [56, 159, 401, 579, 580, 582, 584, 586, 587, 597, 602, 710, 713, 818, 1018, 1190, 1331], "floor": [56, 469, 818, 1331], "nearest": [56, 171, 214, 234, 303, 311, 375, 468, 483, 605, 627, 628, 792, 818, 843, 866, 881, 925, 931, 992, 1013, 1089, 1100, 1195, 1211, 1331], "24": [56, 142, 194, 214, 217, 241, 257, 280, 311, 386, 393, 409, 429, 430, 433, 441, 447, 449, 577, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 764, 805, 806, 818, 857, 866, 884, 931, 1011, 1050, 1054, 1062, 1068, 1124, 1331], "001": [56, 707, 764, 1063, 1064, 1066, 1292], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "32": [56, 68, 73, 76, 86, 209, 214, 241, 311, 577, 616, 643, 818, 884, 931, 1015, 1051, 1190, 1211, 1331], "128": [56, 70, 1190, 1331], "split_by_column_dtyp": 57, "collect_al": [57, 61, 839, 840, 931], "42": [58, 171, 199, 224, 241, 311, 616, 818, 843, 876, 884, 931, 1095, 1331], "961": 58, "1764": 58, "4160": 58, "detail": [59, 109, 122, 123, 143, 145, 161, 194, 311, 857, 931, 1339, 1340], "build": [59, 109, 936, 1340], "compil": [59, 341, 342, 508, 509, 957, 958, 1130, 1131], "host": [59, 120, 126, 128, 137, 139], "git": 59, "flag": [59, 147, 269, 311, 640, 655, 663, 664, 666, 680, 681, 818, 848, 870, 871, 931, 936, 1224, 1240, 1248, 1249, 1251, 1265, 1266, 1311, 1331], "lazy_fram": [60, 61], "iter": [60, 61, 62, 72, 108, 122, 153, 155, 164, 173, 183, 193, 194, 195, 196, 197, 198, 210, 211, 212, 241, 242, 243, 244, 247, 248, 250, 256, 274, 275, 284, 285, 288, 289, 311, 370, 393, 401, 465, 596, 651, 711, 722, 732, 734, 740, 742, 743, 744, 745, 753, 757, 783, 785, 788, 797, 800, 802, 808, 814, 818, 834, 845, 853, 856, 857, 858, 859, 860, 861, 884, 886, 887, 889, 894, 900, 906, 907, 911, 931, 935, 1011, 1018, 1219, 1331, 1340], "comm_subplan_elim": [60, 61, 839, 840, 848, 850, 880, 892, 931], "comm_subexpr_elim": [60, 61, 839, 840, 848, 850, 880, 892, 931], "cluster_with_column": [60, 61, 839, 840, 848, 850, 880, 892, 931], "comput": [60, 62, 95, 178, 193, 214, 270, 276, 289, 303, 311, 318, 328, 329, 330, 331, 332, 333, 350, 351, 352, 357, 358, 362, 374, 379, 380, 381, 384, 385, 386, 387, 388, 389, 390, 391, 392, 398, 452, 460, 501, 527, 528, 529, 530, 534, 535, 536, 537, 541, 548, 549, 550, 551, 576, 596, 597, 603, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 645, 646, 647, 648, 652, 718, 719, 727, 732, 734, 738, 739, 740, 746, 748, 765, 785, 795, 796, 808, 818, 839, 856, 863, 865, 866, 901, 908, 911, 925, 931, 938, 944, 945, 946, 947, 948, 949, 966, 967, 968, 973, 974, 978, 991, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1074, 1076, 1081, 1125, 1149, 1150, 1151, 1152, 1156, 1157, 1158, 1159, 1163, 1170, 1171, 1172, 1173, 1181, 1190, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1231, 1232, 1233, 1234, 1237, 1303, 1304, 1312, 1319, 1331], "graph": [60, 122, 215, 311, 839, 863, 908, 931], "parallel": [60, 62, 117, 123, 132, 139, 194, 197, 214, 215, 231, 248, 285, 311, 393, 516, 727, 808, 818, 830, 857, 860, 865, 866, 887, 907, 919, 931, 1011, 1138, 1319, 1331], "threadpool": 60, "Will": [60, 61, 839, 840, 848, 850, 880, 892, 931, 1331], "try": [60, 61, 105, 120, 121, 126, 132, 134, 137, 139, 839, 840, 848, 850, 880, 892, 931], "branch": [60, 61, 839, 840, 848, 850, 880, 892, 931], "subplan": [60, 61, 839, 840, 848, 850, 880, 892, 931], "union": [60, 61, 62, 537, 839, 840, 848, 850, 880, 892, 931, 936, 1159], "subexpress": [60, 61, 839, 840, 848, 850, 880, 892, 931], "reus": [60, 61, 839, 840, 848, 850, 880, 892, 931], "combin": [60, 61, 62, 183, 194, 199, 214, 241, 280, 311, 323, 337, 447, 456, 469, 595, 611, 616, 675, 685, 691, 692, 693, 694, 759, 760, 762, 763, 805, 806, 808, 818, 839, 840, 848, 850, 857, 866, 880, 884, 892, 931, 1054, 1068, 1078, 1200, 1260, 1270, 1276, 1277, 1278, 1279, 1331], "sequenti": [60, 61, 248, 285, 311, 839, 840, 848, 850, 880, 887, 892, 907, 931], "independ": [60, 61, 147, 150, 154, 273, 311, 839, 840, 848, 850, 880, 892, 931], "explain": [60, 61, 839, 840, 931], "gevent": [61, 142, 840, 931], "await": [61, 122, 840, 931], "_geventdataframeresult": [61, 840, 931], "asynchron": [61, 122, 840, 931], "them": [61, 108, 110, 111, 112, 114, 122, 123, 129, 130, 131, 132, 134, 138, 139, 179, 180, 194, 214, 224, 241, 273, 280, 311, 348, 456, 485, 523, 588, 589, 596, 616, 744, 759, 760, 762, 763, 805, 806, 818, 840, 849, 857, 866, 876, 884, 931, 936, 964, 1078, 1083, 1145, 1185, 1186, 1331], "schedul": [61, 840, 931], "insid": [61, 840, 931], "almost": [61, 217, 297, 311, 697, 699, 700, 840, 931, 1176, 1282, 1284, 1285, 1331], "instantli": [61, 840, 931], "asyncio": [61, 122, 840, 931], "greenlet": [61, 840, 931], "task": [61, 840, 931], "wrapper": [61, 840, 931], "event": [61, 840, 931], "asyncresult": [61, 840, 931], "timeout": [61, 840, 931], "collect_async": [61, 931], "set_except": [61, 840, 931], "rerais": [61, 840, 931], "polarstyp": 62, "concatmethod": 62, "vertic": [62, 180, 218, 220, 225, 259, 278, 282, 311, 654, 1239], "rechunk": [62, 108, 113, 120, 121, 126, 128, 132, 134, 137, 138, 139, 180, 311, 818, 993, 1083, 1092, 1182, 1331], "vertical_relax": 62, "diagon": [62, 275, 311], "diagonal_relax": 62, "vstack": [62, 180, 311], "addition": [62, 242, 311, 936], "coerc": [62, 610, 818], "supertyp": [62, 182, 269, 273, 311, 325, 818, 852, 931, 935, 1331], "mismatch": [62, 103, 130, 138, 143, 145], "find": [62, 184, 190, 311, 639, 655, 656, 818, 1220, 1241, 1331], "miss": [62, 120, 121, 134, 181, 311, 363, 455, 457, 458, 463, 470, 494, 496, 546, 818, 851, 931, 1077, 1079, 1080, 1085, 1321, 1331], "stack": [62, 202, 282, 311], "length": [62, 63, 79, 131, 134, 148, 152, 192, 194, 195, 197, 198, 241, 255, 311, 314, 393, 433, 447, 539, 546, 568, 611, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 649, 667, 671, 672, 674, 676, 677, 678, 684, 686, 698, 707, 791, 794, 795, 796, 809, 818, 857, 858, 860, 861, 880, 884, 893, 931, 935, 993, 1011, 1022, 1054, 1068, 1161, 1168, 1187, 1200, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1235, 1252, 1256, 1257, 1259, 1261, 1262, 1263, 1269, 1271, 1283, 1292, 1331], "don": [62, 194, 214, 217, 276, 278, 311, 326, 393, 516, 558, 818, 857, 901, 931, 936, 1011, 1138, 1176, 1221, 1321, 1331], "auto": [62, 108, 110, 111, 112, 114, 129, 130, 132, 138, 139, 275, 311, 931, 1340], "logic": [62, 217, 297, 311, 314, 322, 324, 396, 558, 720, 731, 732, 733, 734, 781, 818, 844, 848, 865, 888, 919, 931, 940, 941, 1176, 1311, 1313, 1331, 1335], "align_fram": 62, "pattern": [62, 120, 121, 134, 137, 138, 139, 211, 311, 565, 655, 656, 657, 658, 663, 664, 665, 666, 680, 681, 682, 919, 936, 1219, 1222, 1240, 1241, 1242, 1243, 1248, 1249, 1250, 1251, 1265, 1266, 1267, 1331], "collis": 62, "need": [62, 115, 120, 121, 123, 194, 195, 197, 198, 241, 244, 254, 311, 546, 616, 643, 701, 764, 791, 794, 809, 818, 857, 858, 860, 861, 884, 931, 1228, 1286, 1331, 1340], "sure": [62, 108, 113, 120, 121, 126, 128, 132, 194, 195, 197, 198, 235, 241, 311, 616, 818, 857, 858, 860, 861, 884, 931, 935], "contigu": [62, 108, 113, 120, 121, 126, 128, 132, 134, 137, 138, 139, 235, 269, 311], "relev": 62, "df_h1": 62, "l1": 62, "l2": 62, "df_h2": 62, "r1": 62, "r2": 62, "r3": 62, "df_d1": 62, "df_d2": 62, "df_a1": 62, "df_a2": 62, "df_a3": 62, "inner": [63, 79, 149, 213, 279, 311, 348, 359, 398, 523, 545, 558, 610, 720, 818, 865, 888, 903, 931, 964, 975, 1015, 1145, 1167, 1176, 1313, 1331], "polarsdatatyp": [63, 79, 120, 121, 134, 147, 148, 149, 150, 151, 154, 162, 165, 217, 268, 273, 311, 326, 371, 459, 554, 556, 557, 558, 611, 668, 669, 735, 766, 778, 779, 780, 781, 791, 794, 809, 814, 818, 836, 931, 936, 943, 985, 1175, 1176, 1200, 1253, 1254, 1331], "pythondatatyp": [63, 79], "within": [63, 79, 143, 144, 145, 146, 193, 194, 195, 196, 197, 198, 199, 214, 241, 280, 311, 478, 607, 651, 818, 857, 858, 860, 861, 866, 884, 931, 1095, 1331, 1339], "attribut": [63, 66, 69, 70, 71, 72, 79, 83, 147, 311, 810, 811, 813, 814, 819, 820, 823, 825, 826, 827, 931, 1323, 1325, 1327, 1331, 1332, 1336, 1337, 1338], "categoricalord": [66, 373, 988], "encod": [66, 72, 82, 120, 121, 134, 266, 311, 365, 471, 614, 659, 709, 818, 980, 1203, 1244, 1306, 1331], "lexic": [66, 373, 936, 988, 990], "calendar": [68, 69, 194, 214, 241, 280, 311, 404, 416, 419, 429, 433, 447, 451, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 764, 805, 806, 818, 857, 866, 884, 931, 1021, 1033, 1039, 1050, 1054, 1068, 1072, 1078, 1331], "bit": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 609, 655, 818, 1198, 1240, 1331], "sign": [68, 69, 71, 75, 76, 77, 78, 84, 429, 609, 680, 681, 707, 818, 936, 1050, 1112, 1198, 1265, 1266, 1292, 1331], "dai": [68, 69, 84, 194, 197, 212, 214, 241, 280, 311, 401, 425, 426, 429, 430, 433, 436, 439, 440, 447, 449, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 742, 758, 759, 760, 761, 762, 763, 764, 805, 806, 818, 857, 860, 866, 884, 931, 936, 1018, 1046, 1047, 1050, 1051, 1054, 1057, 1060, 1061, 1068, 1070, 1078, 1331], "unix": [68, 69, 412, 770, 1029], "epoch": [68, 69, 770], "time_unit": [69, 71, 403, 405, 412, 438, 450, 700, 759, 760, 761, 762, 763, 764, 770, 936, 1020, 1022, 1029, 1059, 1071, 1285], "time_zon": [69, 406, 408, 432, 700, 759, 760, 761, 762, 763, 936, 1019, 1023, 1028, 1053, 1285], "timezon": [69, 124, 135, 408, 936], "microsecond": [69, 71, 194, 211, 214, 241, 243, 244, 265, 280, 311, 429, 433, 442, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 761, 762, 763, 764, 804, 805, 806, 818, 857, 866, 880, 884, 931, 936, 1050, 1054, 1063, 1068, 1078, 1331], "zone": [69, 150, 151, 154, 402, 406, 432, 456, 700, 759, 760, 761, 762, 763, 818, 936, 1019, 1023, 1053, 1078, 1285, 1331], "zoneinfo": [69, 936], "available_timezon": [69, 936], "progress": [70, 72], "expect": [70, 72, 99, 102, 107, 120, 122, 134, 546, 558, 778, 818, 868, 870, 871, 931], "digit": [70, 600, 636, 637, 664, 818, 936, 1216, 1217, 1243, 1249, 1331, 1340], "offset": [71, 120, 121, 125, 126, 128, 132, 134, 137, 138, 139, 188, 194, 195, 197, 198, 241, 255, 262, 280, 286, 287, 311, 401, 402, 411, 425, 426, 429, 433, 447, 473, 520, 539, 616, 649, 686, 717, 818, 855, 857, 858, 860, 861, 884, 893, 899, 909, 910, 931, 1018, 1019, 1028, 1046, 1047, 1050, 1054, 1068, 1091, 1142, 1161, 1235, 1271, 1285, 1302, 1331], "integer_list": 79, "float_list": 79, "wrap": [81, 115, 485, 556, 818], "arbitrari": [81, 396, 612, 818, 844, 931, 936, 1201, 1331], "schemadict": [83, 108, 110, 111, 112, 113, 114, 120, 122, 123, 125, 131, 132, 134, 139, 311, 800, 870, 871, 913, 919, 931], "composit": [83, 1340], "nanosecond": [84, 194, 214, 241, 280, 311, 429, 433, 434, 445, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 764, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1055, 1066, 1068, 1078, 1331], "midnight": 84, "unsign": [85, 86, 87, 88, 609, 818, 936, 1112, 1198, 1331], "static": [89, 913, 919], "enable_string_cach": 91, "stringcach": [91, 92, 213, 311, 830, 987, 989], "reliabl": [91, 92], "wai": [91, 92, 108, 110, 111, 112, 114, 129, 130, 138, 193, 212, 231, 256, 289, 311, 596, 600, 651, 663, 747, 814, 818, 856, 879, 894, 911, 919, 931, 1248], "until": [91, 194, 197, 215, 311, 677, 678, 707, 857, 860, 931, 1262, 1263, 1292], "19": [92, 125, 150, 162, 184, 187, 194, 195, 196, 197, 198, 203, 214, 218, 220, 225, 237, 238, 241, 253, 259, 262, 280, 291, 311, 326, 377, 378, 388, 389, 390, 391, 392, 404, 410, 414, 418, 421, 423, 428, 432, 433, 435, 447, 488, 492, 495, 500, 512, 526, 544, 554, 555, 557, 602, 616, 617, 621, 622, 624, 625, 626, 628, 642, 657, 669, 673, 674, 675, 676, 679, 684, 685, 691, 697, 700, 701, 713, 716, 717, 735, 754, 755, 756, 757, 759, 761, 779, 818, 857, 858, 859, 860, 861, 866, 870, 884, 891, 899, 913, 931, 943, 988, 996, 997, 1007, 1008, 1009, 1010, 1012, 1021, 1027, 1031, 1038, 1041, 1044, 1049, 1053, 1054, 1056, 1068, 1103, 1107, 1109, 1112, 1113, 1119, 1121, 1123, 1134, 1148, 1166, 1175, 1194, 1205, 1221, 1223, 1227, 1242, 1254, 1258, 1259, 1260, 1261, 1264, 1269, 1270, 1276, 1282, 1285, 1286, 1301, 1302, 1310, 1321, 1331], "longer": [92, 120, 121, 134, 620, 622, 624, 626, 628, 631, 633, 635, 818], "accept": [92, 118, 120, 121, 124, 126, 128, 132, 150, 164, 173, 193, 196, 247, 248, 252, 256, 274, 284, 285, 289, 311, 319, 370, 376, 459, 485, 557, 596, 611, 651, 711, 722, 730, 732, 734, 740, 743, 744, 745, 753, 757, 766, 783, 785, 788, 797, 800, 802, 808, 818, 834, 845, 856, 859, 886, 887, 890, 894, 900, 906, 907, 911, 931, 935, 995, 1102, 1200, 1226, 1331], "disable_string_cach": 92, "unabl": [96, 125], "hstack": [96, 311], "is_in": [97, 183, 311, 818, 1331], "least": [99, 597, 663, 665, 818, 1190, 1248, 1250, 1331], "unexpect": [101, 103, 122, 556, 558, 818, 1176, 1331], "caus": [101, 103, 109, 120, 121, 134, 143, 161, 180, 269, 311, 556, 818, 1083, 1311, 1331], "panic": 101, "incompat": 105, "arrai": [108, 112, 120, 121, 132, 178, 179, 263, 268, 269, 270, 311, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 377, 378, 384, 385, 386, 387, 388, 389, 390, 391, 392, 510, 527, 528, 529, 530, 532, 541, 542, 545, 548, 550, 556, 612, 619, 621, 625, 632, 640, 765, 818, 849, 931, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 996, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1015, 1076, 1132, 1149, 1150, 1151, 1152, 1154, 1162, 1163, 1164, 1167, 1170, 1172, 1173, 1201, 1207, 1208, 1210, 1213, 1214, 1215, 1224, 1229, 1305, 1309, 1311, 1312, 1321, 1331], "chunkedarrai": [108, 227, 311], "recordbatch": [108, 212, 311], "schemadefinit": [108, 110, 111, 112, 114, 129, 130, 138, 311, 931], "schema_overrid": [108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 125, 129, 130, 131, 134, 212, 269, 311, 931, 936], "part": [108, 125, 268, 273, 311, 596, 664, 688, 689, 818, 848, 850, 880, 892, 908, 931, 1249, 1273, 1274], "closest": [108, 214, 311], "pair": [108, 110, 111, 112, 114, 129, 130, 138, 236, 311, 882, 931, 1340], "sever": [108, 110, 111, 112, 114, 129, 130, 138, 311, 931, 1340], "form": [108, 110, 111, 112, 114, 129, 130, 138, 211, 243, 278, 311, 597, 818, 931, 1190, 1331], "dimens": [108, 110, 112, 114, 129, 130, 138, 311, 612, 818, 931, 1201, 1311, 1331], "supportsinterchang": 109, "allow_copi": [109, 161, 269, 311, 1311, 1331], "interchang": [109, 161], "__dataframe__": 109, "convers": [109, 125, 161, 211, 212, 243, 244, 265, 269, 270, 311, 406, 697, 699, 700, 704, 830, 1023, 1094, 1282, 1284, 1285, 1289, 1310, 1311, 1312, 1331], "latest": [109, 124, 135, 161, 432, 433, 447, 470, 568, 697, 700, 761, 818, 1053, 1054, 1068, 1282, 1285], "from_panda": 109, "from_arrow": 109, "effici": [109, 122, 125, 210, 212, 311, 556, 818], "pd": [109, 113, 720, 818, 1312, 1313, 1331], "df_pd": 109, "dfi": [109, 161], "strict": [110, 111, 114, 165, 311, 365, 371, 655, 659, 666, 679, 697, 699, 700, 702, 704, 818, 836, 931, 936, 980, 985, 1221, 1240, 1244, 1251, 1264, 1282, 1284, 1285, 1287, 1289, 1331], "clone": [110, 111, 112, 113, 114, 166, 269, 311, 837, 931, 994, 1321, 1331], "dimension": [110, 112, 114, 269, 311, 931, 1331], "exactli": [110, 111, 114, 143, 144, 145, 146, 149, 150, 154, 311, 688, 689, 695, 696, 764, 931, 1229, 1273, 1274, 1280, 1281, 1331], "infer_schema_length": [111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 311, 668, 669, 931, 1253, 1254], "NOT": [111, 210, 311, 546, 566, 1339], "typic": [111, 122, 125, 139, 217, 311, 411, 936, 1028, 1176, 1331], "clearer": 111, "partial": [111, 120, 134, 311, 931], "scan": [111, 114, 120, 121, 122, 125, 129, 131, 134, 135, 136, 137, 138, 139, 140, 194, 195, 197, 198, 241, 311, 668, 669, 850, 857, 858, 860, 861, 862, 869, 884, 931, 1253, 1254], "slow": [111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 311, 326, 393, 558, 618, 668, 669, 818, 919, 931, 1011, 1206, 1253, 1254, 1331], "present": [111, 150, 490, 557, 693, 694, 818, 850, 892, 931, 1175, 1321, 1331], "np": [112, 183, 269, 311, 472, 639, 716, 818, 853, 931, 1090, 1106, 1111, 1115, 1116, 1219, 1220, 1301, 1331], "ndarrai": [112, 183, 269, 311, 472, 639, 716, 818, 853, 931, 1090, 1219, 1220, 1223, 1301, 1311, 1331], "numpi": [112, 142, 169, 211, 243, 244, 265, 269, 270, 311, 556, 588, 589, 618, 818, 931, 1106, 1111, 1115, 1116, 1185, 1186, 1206, 1311, 1312, 1321, 1331], "columnar": [112, 114, 211, 243, 311], "interpret": [112, 114, 120, 121, 134, 311, 931], "yield": [112, 114, 120, 121, 122, 134, 178, 180, 210, 275, 311, 469, 556, 596, 818, 931, 1076, 1083, 1331], "conclus": [112, 114, 311, 931], "datetimeindex": 113, "nan_to_nul": [113, 311, 931, 1331], "include_index": 113, "instal": [113, 120, 121, 123, 126, 128, 169, 270, 311, 401, 742, 892, 931, 1018, 1312, 1331], "nan": [113, 150, 161, 181, 269, 270, 311, 399, 400, 453, 454, 463, 474, 476, 483, 494, 496, 497, 498, 503, 553, 559, 574, 588, 589, 590, 591, 618, 723, 746, 818, 851, 931, 945, 949, 1016, 1017, 1085, 1115, 1116, 1185, 1186, 1206, 1311, 1312, 1331, 1340], "nameless": 113, "enumer": [113, 120, 121, 134, 212, 311], "regardless": [113, 193, 196, 214, 311, 406, 670, 808, 1023, 1255], "pleas": [113, 122, 123, 194, 311, 314, 456, 619, 621, 623, 625, 627, 630, 632, 634, 747, 759, 764, 818, 857, 931, 1078, 1331, 1335], "reset_index": [113, 194, 311, 857, 931], "prior": 113, "pd_df": 113, "pd_seri": 113, "its": [115, 142, 178, 269, 311, 405, 433, 447, 456, 614, 651, 808, 818, 841, 847, 905, 931, 989, 1022, 1054, 1068, 1076, 1078, 1203, 1311, 1331], "repr": 115, "trim": 115, "whitespac": [115, 675, 685, 691, 692, 693, 694, 1260, 1270, 1276, 1277, 1278, 1279], "prompt": 115, "extract": [115, 257, 311, 404, 407, 409, 410, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 430, 431, 434, 435, 437, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 600, 664, 665, 668, 669, 670, 686, 688, 818, 1021, 1024, 1025, 1026, 1027, 1030, 1031, 1033, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1055, 1056, 1058, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1072, 1249, 1250, 1253, 1254, 1255, 1271], "to_init_repr": [115, 311, 1331], "truncat": [115, 120, 121, 134, 192, 194, 197, 211, 243, 244, 265, 311, 857, 860, 880, 931], "identifi": [115, 122, 223, 230, 276, 288, 311, 875, 901, 931], "compound": [115, 244, 311, 936], "neither": [115, 125, 131, 245, 311, 360, 546, 976, 1168], "source_ac": 115, "source_cha": 115, "ident": [115, 166, 167, 311, 436, 614, 615, 818, 837, 838, 931, 994, 998, 1057, 1203, 1204, 1331], "timestamp": [115, 124, 135, 194, 197, 311, 432, 433, 447, 770, 857, 860, 931, 1053, 1054, 1068], "tor_id": 115, "nnel_id": 115, "\u03bc": [115, 165, 194, 211, 241, 243, 244, 265, 280, 311, 402, 403, 405, 406, 407, 408, 411, 413, 417, 420, 422, 425, 426, 427, 429, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 450, 616, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 697, 700, 761, 762, 763, 764, 770, 818, 836, 857, 866, 884, 931, 936, 1019, 1020, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1036, 1037, 1043, 1046, 1047, 1048, 1050, 1053, 1054, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1071, 1282, 1285], "asia": [115, 936, 1024, 1025, 1058], "tokyo": [115, 936], "123456780": 115, "9876543210": 115, "56": [115, 718, 818], "59": [115, 171, 311, 405, 422, 434, 469, 761, 804, 805, 806, 818, 843, 931, 936, 1022, 1043, 1055], "663053": 115, "jst": [115, 936], "803065983": 115, "2055938745": 115, "38": [115, 147, 150], "050545": 115, "source_actor_id": 115, "source_channel_id": 115, "to_list": [115, 241, 311, 1240, 1251, 1331], "uint32": [116, 142, 165, 178, 241, 287, 311, 336, 341, 342, 382, 456, 472, 475, 504, 508, 509, 525, 610, 615, 616, 657, 658, 671, 672, 716, 720, 747, 774, 777, 818, 836, 884, 910, 931, 936, 953, 957, 958, 985, 1076, 1078, 1112, 1130, 1131, 1147, 1204, 1221, 1242, 1243, 1256, 1257, 1313, 1314, 1331], "uint64": [116, 199, 241, 287, 311, 341, 342, 456, 478, 508, 509, 609, 616, 818, 884, 910, 931, 936, 957, 958, 1078, 1095, 1130, 1131, 1198, 1314, 1331], "bigidx": 116, "over": [117, 120, 121, 122, 124, 125, 134, 150, 151, 162, 180, 210, 211, 212, 217, 242, 243, 244, 257, 275, 288, 291, 297, 311, 326, 393, 396, 456, 464, 555, 556, 558, 567, 569, 570, 571, 572, 580, 581, 607, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 735, 750, 751, 754, 755, 768, 779, 780, 781, 793, 818, 895, 913, 919, 931, 936, 943, 1011, 1078, 1083, 1176, 1207, 1208, 1210, 1214, 1331], "fetch": [117, 134, 215, 311, 839, 862, 869, 931], "ideal": 117, "read_csv_batch": 117, "tpch": [117, 121], "tables_scale_100": [117, 121], "lineitem": [117, 121, 123], "tbl": [117, 121], "try_parse_d": [117, 120, 121, 134], "n_row": [118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 212, 311, 850, 931], "handler": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 172, 311, 396, 818, 844, 931], "builtin": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 172, 311, 396, 818, 844, 931], "instanc": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 150, 154, 159, 165, 180, 186, 311, 371, 568, 619, 621, 623, 625, 627, 630, 632, 634, 750, 754, 768, 814, 818, 836, 871, 909, 910, 931, 985, 1083, 1331], "stop": [118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 818, 1020, 1023, 1029, 1030, 1037, 1040, 1043, 1048, 1054, 1059], "read_csv": [119, 125, 134], "write_clipboard": [119, 311], "has_head": [120, 121, 125, 134], "new_column": [120, 121, 125, 134, 237, 238, 311], "comment_prefix": [120, 121, 134], "skip_row": [120, 121, 134], "missing_utf8_is_empty_str": [120, 121, 134], "ignore_error": [120, 121, 130, 134, 138], "n_thread": [120, 121], "8192": 120, "csvencod": [120, 121, 134], "low_memori": [120, 121, 132, 134, 138, 139], "skip_rows_after_head": [120, 121, 134], "row_index_nam": [120, 121, 126, 128, 132, 134, 137, 138, 139], "row_index_offset": [120, 121, 126, 128, 132, 134, 137, 138, 139], "sample_s": [120, 121], "eol_char": [120, 121, 134], "raise_if_empti": [120, 121, 125, 131, 134], "truncate_ragged_lin": [120, 121, 134], "decimal_comma": [120, 121, 134], "glob": [120, 121, 132, 134, 137, 138, 139], "fsspec": [120, 121, 126, 128, 132, 135, 136, 137, 142], "remot": [120, 121, 126, 128], "autogener": [120, 121, 134], "column_x": [120, 121, 134], "shorter": [120, 121, 134, 546, 774, 775], "comment": [120, 121, 134], "skip": [120, 121, 125, 132, 134, 139, 214, 278, 311, 943, 1176, 1331], "escap": [120, 121, 123, 134], "complet": [120, 122, 134], "wherea": [120, 134, 241, 311, 433, 447, 588, 589, 612, 616, 818, 862, 869, 884, 931, 1054, 1068, 1185, 1186, 1201, 1331], "would": [120, 121, 134, 269, 273, 311, 336, 347, 401, 521, 556, 558, 567, 596, 607, 740, 742, 818, 952, 963, 1018, 1143, 1196, 1311, 1331], "prefer": [120, 121, 124, 125, 134, 155, 180, 211, 217, 242, 243, 297, 311, 459, 558, 818, 931, 1083, 1176, 1331, 1340], "treat": [120, 121, 134, 456, 655, 658, 666, 680, 681, 808, 818, 1078, 1240, 1243, 1251, 1265, 1266, 1331], "10000": [120, 212, 311], "issu": [120, 121, 122, 125, 134, 311, 386, 387, 714, 818, 1005, 1006, 1299, 1331], "iso8601": [120, 121, 134], "succe": [120, 121, 134], "cpu": [120, 121, 268, 311, 1309, 1331], "buffer": [120, 121, 122, 178, 211, 311, 1076, 1331], "modifi": [120, 121, 134, 156, 159, 180, 202, 210, 211, 282, 311, 337, 432, 450, 655, 663, 664, 666, 680, 681, 818, 942, 1053, 1071, 1083, 1240, 1248, 1249, 1251, 1265, 1266, 1288, 1290, 1291, 1331], "upper": [120, 121, 122, 178, 194, 197, 311, 376, 377, 480, 485, 546, 581, 726, 737, 759, 760, 762, 763, 805, 806, 818, 857, 860, 931, 995, 996, 1076, 1097, 1102, 1174, 1318, 1331], "bound": [120, 121, 178, 194, 197, 311, 347, 376, 377, 378, 485, 519, 521, 544, 546, 552, 726, 737, 759, 760, 762, 763, 805, 806, 818, 857, 860, 931, 963, 995, 996, 997, 1076, 1102, 1141, 1143, 1166, 1174, 1318, 1331], "lossi": [120, 121, 134], "decod": [120, 121, 668], "expens": [120, 121, 132, 134, 138, 139, 153, 155, 194, 195, 197, 198, 211, 217, 241, 242, 243, 244, 275, 276, 311, 326, 558, 818, 841, 843, 847, 857, 858, 860, 861, 884, 885, 901, 905, 931, 1083, 1176, 1331, 1340], "aggreg": [120, 121, 132, 186, 193, 194, 196, 197, 218, 220, 222, 225, 228, 232, 233, 234, 241, 258, 259, 278, 281, 289, 290, 293, 295, 311, 320, 465, 481, 554, 556, 558, 596, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 731, 732, 733, 734, 750, 751, 752, 753, 754, 755, 756, 757, 768, 773, 782, 783, 785, 787, 788, 793, 801, 802, 818, 857, 858, 860, 861, 871, 872, 873, 874, 877, 878, 881, 884, 896, 897, 904, 911, 912, 915, 917, 931, 935, 1098, 1205, 1206, 1207, 1208, 1210, 1213, 1214, 1215, 1331], "parser": 120, "regard": [120, 746], "sens": [120, 126, 128, 137, 224, 280, 311, 596, 818, 876, 931], "particular": [120, 126, 128, 137, 178, 311, 1076, 1331], "usernam": [120, 123, 126, 128, 137], "password": [120, 123, 126, 128, 137], "sampl": [120, 121, 297, 311, 648, 818, 919, 1234, 1331], "estim": [120, 121, 163, 178, 311, 327, 457, 458, 501, 736, 818, 833, 931, 1076, 1079, 1080, 1125, 1331], "alloc": [120, 121, 178, 235, 311, 818, 935, 1076, 1331], "encount": [120, 121, 134, 194, 197, 311, 588, 589, 668, 670, 746, 750, 768, 818, 857, 860, 931, 1185, 1186, 1253, 1255, 1331], "window": [120, 121, 134, 194, 195, 197, 198, 241, 311, 393, 433, 447, 455, 457, 458, 558, 570, 596, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 744, 795, 796, 818, 857, 858, 860, 861, 884, 931, 1011, 1054, 1068, 1077, 1079, 1080, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1331], "rn": [120, 121, 134], "nodataerror": [120, 121, 125, 131, 134], "period": [120, 121, 134, 194, 195, 197, 198, 241, 311, 433, 447, 455, 457, 458, 597, 616, 759, 760, 762, 763, 805, 806, 818, 857, 858, 860, 861, 884, 931, 1054, 1068, 1077, 1079, 1080, 1190, 1331], "expand": [120, 132, 134, 139, 461, 563, 565, 610, 818, 935, 936, 1082, 1331], "rule": [120, 132, 134, 139, 186, 311, 656, 682, 1241, 1267], "lazili": [120, 121, 134, 135, 136, 137, 138, 139, 840, 931], "incorrectli": [120, 194, 195, 197, 198, 241, 311, 456, 546, 616, 818, 857, 858, 860, 861, 884, 931, 1078, 1331], "continu": [120, 394, 604, 648, 818, 1012, 1194, 1234, 1331], "benchmark": 120, "demonstr": [120, 469, 818, 936], "birthdai": 120, "alic": 120, "1995": 120, "bob": [120, 224, 311, 876, 931], "charli": 120, "2002": [120, 415, 429, 1032, 1050, 1072], "08": [120, 143, 144, 145, 146, 171, 214, 241, 257, 311, 401, 405, 425, 426, 433, 616, 697, 762, 764, 818, 843, 884, 931, 936, 1018, 1054, 1068, 1282], "50000": 121, "batchedcsvread": 121, "upon": 121, "creation": 121, "gather": [121, 188, 262, 311, 336, 473, 520, 544, 716, 717, 740, 818, 855, 899, 931, 952, 1091, 1142, 1166, 1301, 1302, 1331], "done": [121, 140, 159, 163, 165, 214, 311, 325, 327, 371, 596, 818, 833, 836, 866, 931, 985, 1331], "next_batch": 121, "big": 121, "interest": [121, 436, 439, 1057, 1060], "seen_group": 121, "big_fil": 121, "df_current_batch": 121, "partition_df": 121, "partition_bi": [121, 212, 311, 570], "as_dict": [121, 230, 311], "fh": 121, "els": [121, 808], "iter_batch": 122, "execute_opt": [122, 123], "client": 122, "packag": [122, 401, 742, 935, 1018], "establish": 122, "async": [122, 840, 931], "aris": 122, "happen": [122, 406, 604, 818, 1023, 1194, 1331], "report": 122, "resultset": 122, "manner": [122, 194, 241, 311, 456, 818, 857, 884, 931], "veri": [122, 211, 275, 311, 558, 818, 919], "poor": 122, "mani": [122, 123, 180, 311, 682, 1083, 1267, 1331], "trip": 122, "still": [122, 123], "exact": [122, 148, 150, 154, 214, 254, 311, 327, 469, 662, 695, 696, 697, 699, 700, 723, 818, 1247, 1282, 1284, 1285, 1310, 1331], "incom": 122, "read_arrow_batches_from_odbc": 122, "read_database_uri": 122, "wide": [122, 192, 223, 278, 311, 875, 931], "snowflak": [122, 123], "variou": [122, 311, 818, 931, 936, 1331], "facil": 122, "initialis": [122, 159, 931], "flight": 122, "flightsql": 122, "flight_sql": 122, "about": [122, 164, 274, 311, 369, 370, 648, 655, 663, 664, 666, 680, 681, 721, 722, 818, 834, 900, 931, 935, 1234, 1240, 1248, 1249, 1251, 1265, 1266, 1331, 1340], "notabl": 122, "dremio": 122, "influxdb": 122, "notic": [122, 311, 931, 1331], "dbapi2": 122, "connectorx": [122, 123, 142], "optimis": [122, 217, 244, 297, 311, 931, 1176, 1222, 1331, 1340], "translat": 122, "conn": 122, "url": [122, 123, 132, 139, 663, 665, 1248, 1250], "render_as_str": 122, "hide_password": 122, "abl": 122, "relat": [122, 159, 680, 681, 936, 1265, 1266], "k\u00f9zudb": 122, "cypher": 122, "test_data": 122, "user_conn": 122, "normalised_scor": 122, "uint8": [122, 165, 267, 268, 269, 278, 311, 386, 387, 611, 714, 730, 818, 836, 931, 936, 1005, 1006, 1200, 1299, 1314, 1331, 1340], "parameteris": 122, "metric": 122, "alchemy_conn": 122, "qmark": 122, "variad": 122, "1000": [122, 178, 267, 287, 311, 327, 818, 910, 931, 1063, 1172, 1308, 1331, 1340], "localhost": 122, "5432": 122, "uid": 122, "usr": 122, "pwd": 122, "max_text_s": 122, "max_binary_s": 122, "do_someth": 122, "kuzu_db_conn": 122, "session": 122, "ext": 122, "create_async_engin": 122, "async_engin": 122, "aiosqlit": 122, "surrealdb": 122, "surreal": 122, "surrealhttp": 122, "surreal_query_to_fram": 122, "8000": 122, "rpc": 122, "partition_on": 123, "partition_rang": 123, "partition_num": 123, "dbreadengin": 123, "raw": 123, "warehous": 123, "role": 123, "caller": [123, 224, 311, 546, 871, 876, 913, 919, 931], "respons": [123, 224, 311, 876, 931], "come": [123, 194, 311, 401, 425, 426, 501, 546, 742, 818, 857, 930, 931, 1018, 1046, 1047, 1125, 1331], "transfer": 123, "document": [123, 125, 311, 314, 436, 439, 670, 697, 699, 700, 704, 814, 989, 1057, 1060, 1255, 1282, 1284, 1285, 1289, 1331, 1335], "redshift": 123, "mysql": 123, "mariadb": 123, "clickhous": 123, "oracl": 123, "bigqueri": 123, "github": [123, 311], "sfu": 123, "connector": 123, "destin": 123, "develop": [123, 150, 154], "read_databas": 123, "usual": [123, 273, 311, 402, 1019], "urllib": 123, "quote_plu": 123, "word": [123, 680, 681, 693, 694], "3f": [123, 697, 700, 1282, 1285], "20word": 123, "explicitli": [123, 125, 148, 150, 159, 311, 800, 829], "test_tabl": 123, "compani": 123, "testdb": 123, "public": [123, 311, 818, 830, 931, 1331], "myrol": 123, "delta_table_opt": [124, 135], "root": [124, 135, 374, 500, 555, 569, 579, 580, 582, 584, 586, 587, 602, 652, 713, 817, 818, 991, 1237, 1331], "absolut": [124, 135, 136, 143, 144, 145, 146, 318, 455, 457, 458, 818, 938, 1077, 1079, 1080, 1331], "info": [124, 135, 136, 142, 311, 314, 1331, 1335], "avoid": [124, 150, 154, 243, 311, 321, 818, 841, 847, 885, 905, 931], "year": [124, 135, 194, 214, 241, 257, 280, 311, 401, 415, 416, 429, 430, 433, 447, 448, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 742, 758, 759, 760, 761, 762, 763, 805, 806, 818, 857, 866, 884, 931, 936, 1018, 1032, 1033, 1050, 1051, 1054, 1068, 1069], "2021": [124, 135, 165, 171, 192, 194, 280, 311, 697, 778, 836, 843, 857, 931, 936, 1024, 1025, 1033, 1058, 1121, 1282, 1331], "travel": [124, 135], "2020": [124, 135, 165, 171, 192, 214, 241, 311, 314, 401, 406, 411, 432, 436, 439, 440, 441, 442, 443, 444, 445, 446, 456, 616, 697, 699, 700, 742, 818, 836, 843, 884, 931, 936, 1018, 1023, 1028, 1053, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1078, 1282, 1284, 1285, 1331], "tzinfo": [124, 135], "utc": [124, 135, 402, 406, 408, 411, 432, 697, 700, 936, 1019, 1023, 1028, 1053, 1282, 1285], "aw": [124, 132, 135, 139], "googl": [124, 135, 136], "service_account": [124, 135], "service_account_json_absolute_path": [124, 135], "az": [124, 135, 136], "adl": [124, 135, 136], "abf": [124, 135, 136], "azure_storage_account_nam": [124, 135, 136], "azure_storage_account_kei": [124, 135, 136], "without_fil": [124, 135, 136], "track": [124, 135, 136, 217, 311, 546, 1339], "sheet_id": [125, 131], "sheet_nam": [125, 131], "excelspreadsheetengin": 125, "read_opt": 125, "calamin": 125, "fastexcel": [125, 142], "xlsb": 125, "xl": 125, "pyxlsb": [125, 142], "openpyxl": [125, 142], "sheetnam": [125, 131], "nor": [125, 131, 245, 311], "xlsx2csv": [125, 142], "refin": 125, "major": [125, 268, 311], "dramat": 125, "modul": [125, 817, 936, 1340], "bind": 125, "significantli": [125, 217, 297, 311, 1176, 1331, 1340], "potenti": [125, 134, 137, 138, 211, 242, 244, 311, 579, 843, 931, 935], "julian": 125, "primari": [125, 1340], "constructor": [125, 154], "load_workbook": 125, "open_workbook": 125, "excelread": 125, "load_sheet_by_nam": 125, "influenc": [125, 850, 871, 931], "pipelin": [125, 273, 311], "becom": [125, 152, 679], "skip_empty_lin": 125, "correct": [125, 131, 457, 458, 501, 629, 648, 818, 870, 871, 931, 935, 1079, 1080, 1125, 1212, 1234, 1331], "forc": [125, 214, 217, 269, 297, 311, 546, 865, 866, 919, 931, 1176, 1311, 1331], "best": [125, 217, 297, 311, 558, 818, 1176, 1331], "known": [125, 126, 360, 546, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 818, 913, 919, 976, 1168], "ambigu": [125, 432, 433, 447, 697, 700, 761, 1053, 1054, 1068, 1282, 1285], "memory_map": [126, 132, 137], "greatli": [126, 137], "repeat": [126, 137, 608, 610, 791, 809, 818], "That": [126, 870, 871, 931], "filenam": 126, "my_fil": 126, "write_ipc": [126, 311], "read_ndjson": 129, "stringio": [129, 130, 172, 311, 396, 471, 570, 818, 844, 888, 931], "With": [129, 209, 252, 311, 355, 538, 641, 818, 890, 931, 971, 1124, 1160, 1226, 1331], "becaus": [130, 138, 178, 194, 197, 215, 217, 278, 297, 311, 469, 516, 818, 857, 860, 919, 931, 943, 1076, 1138, 1176, 1331], "openoffic": 131, "od": [131, 830], "parallelstrategi": [132, 139], "use_statist": [132, 139], "hive_partit": [132, 139], "hive_schema": [132, 139], "retri": [132, 137, 139], "row_group": [132, 139], "hive": [132, 139], "prune": [132, 139, 871, 931], "gcp": [132, 136, 139], "stabl": [132, 164, 169, 171, 199, 245, 257, 274, 311, 478, 551, 818, 834, 843, 875, 894, 895, 900, 931, 1095, 1331], "read_tabl": 132, "scan_parquet": [132, 140], "scan_pyarrow_dataset": [132, 139], "with_column_nam": 134, "push": [134, 137, 138, 139, 140], "down": [134, 137, 138, 139, 140, 468, 818, 1089, 1331], "therebi": [134, 137, 138], "realloc": [134, 137, 138, 180, 311, 1083, 1331], "headerless": 134, "my_long_fil": 134, "thing": [134, 141], "less": [134, 214, 311, 469, 503, 553, 556, 689, 818, 866, 931, 1274, 1340], "breezah": 134, "languag": [134, 194, 214, 241, 280, 311, 429, 433, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1068, 1078, 1331], "hard": [134, 870, 871, 931], "mydf": 134, "lambda": [134, 162, 186, 217, 231, 232, 236, 297, 311, 326, 360, 455, 456, 457, 458, 546, 554, 555, 556, 558, 580, 581, 750, 751, 768, 780, 781, 793, 818, 870, 871, 879, 882, 919, 931, 943, 976, 1077, 1078, 1079, 1080, 1168, 1176, 1331], "lower": [134, 171, 194, 197, 234, 303, 311, 376, 378, 485, 552, 555, 580, 605, 609, 627, 628, 737, 759, 760, 762, 763, 792, 805, 806, 818, 843, 857, 860, 881, 925, 931, 995, 997, 1013, 1102, 1174, 1195, 1198, 1211, 1318, 1331], "simpli": [134, 750, 768], "idx": [134, 194, 212, 287, 311, 347, 360, 546, 857, 910, 931, 976, 1168, 1251], "uint16": [134, 386, 387, 714, 818, 936, 1005, 1006, 1299, 1311, 1314, 1331], "u16": [134, 1340], "eu": [135, 136], "central": [135, 136, 501, 648, 818, 1125, 1234, 1331], "iceberg": [136, 830], "pyiceberg": [136, 142], "secret": [136, 139], "adlf": 136, "my": [136, 140, 705, 1290], "oauth": 136, "token": 136, "ya29": 136, "dr": 136, "afm": 136, "py": 136, "impl": 136, "fsspecfileio": 136, "give": [137, 138, 214, 223, 276, 311, 412, 469, 501, 610, 723, 727, 818, 830, 875, 901, 931, 1029, 1125, 1310, 1319, 1331], "read_parquet": 139, "east": 139, "allow_pyarrow_filt": 140, "comparison": 140, "dset": 140, "folder": 140, "04": [140, 165, 171, 194, 280, 311, 405, 406, 425, 426, 432, 433, 436, 439, 440, 441, 444, 446, 450, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 697, 742, 758, 761, 762, 764, 818, 836, 843, 857, 931, 936, 1023, 1037, 1043, 1046, 1047, 1048, 1053, 1057, 1060, 1061, 1062, 1065, 1067, 1071, 1282], "seed": [141, 199, 245, 311, 478, 533, 607, 638, 644, 818, 1095, 1155, 1196, 1218, 1230, 1331], "shuffl": [141, 245, 273, 297, 311, 533, 638, 818, 919, 1155, 1218, 1331], "platform": 142, "maco": 142, "arm64": 142, "arm": 142, "64bit": [142, 609, 818, 1198, 1331], "main": [142, 840, 931], "feb": 142, "2024": [142, 401, 407, 408, 413, 417, 420, 422, 427, 434, 437, 742, 758, 761, 764, 936, 1018], "21": [142, 171, 224, 259, 311, 404, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 761, 770, 818, 843, 876, 931, 936, 1021], "clang": 142, "1500": [142, 153], "adbc_driver_manag": 142, "cloudpickl": 142, "17": [142, 150, 178, 214, 289, 311, 456, 618, 636, 770, 805, 818, 911, 999, 1001, 1054, 1078, 1206, 1331, 1340], "hvplot": [142, 311, 314, 1331, 1335], "matplotlib": [142, 880, 892, 931], "nest_asyncio": 142, "pydant": 142, "torch": [142, 273, 311, 1314, 1331], "check_row_ord": [143, 144], "check_column_ord": [143, 144], "check_dtyp": [143, 144, 145, 146, 1075, 1331], "check_exact": [143, 144, 145, 146], "rtol": [143, 144, 145, 146], "atol": [143, 144, 145, 146], "categorical_as_str": [143, 144, 145, 146], "assert": [143, 144, 145, 146, 150, 154, 241, 311, 830, 936], "assertionerror": [143, 144, 145, 146], "compar": [143, 144, 145, 146, 177, 187, 311, 453, 454, 474, 476, 485, 503, 553, 590, 591, 818, 989, 1075, 1221, 1331], "unsort": [143, 144], "toler": [143, 144, 145, 146, 214, 311, 866, 931], "inexact": [143, 144, 145, 146], "share": [143, 144, 145, 146, 178, 311, 1076, 1331], "assert_series_equ": [143, 146, 1075, 1331, 1340], "assert_frame_not_equ": [143, 146], "pytest": [143, 145], "worthwhil": [143, 145], "shorten": [143, 145], "traceback": [143, 144, 145, 146, 269, 311, 1311, 1331], "tb": [143, 145, 178, 311, 1076, 1331], "short": [143, 145], "tend": [143, 145], "unhelpfulli": [143, 145], "assert_frame_equ": [144, 145, 177, 311, 1340], "assert_series_not_equ": [144, 145], "check_nam": [145, 146], "searchstrategi": [147, 149, 150, 151, 152, 154], "allow_nul": [147, 150, 154, 1340], "null_prob": [147, 150, 154], "percentag": [147, 150, 154, 597, 818, 1190, 1331], "chanc": [147, 150, 154, 1340], "1755e": [147, 150], "575050513": [147, 150], "inf": [147, 150, 154, 333, 394, 480, 487, 491, 604, 723, 818, 949, 1001, 1012, 1097, 1106, 1111, 1174, 1190, 1194, 1318, 1331], "min_col": [148, 150], "max_col": [148, 150], "comprehens": 148, "standalon": [148, 936], "mincol": 148, "assign": [148, 194, 296, 311, 360, 546, 596, 607, 688, 689, 818, 857, 918, 931, 976, 1168, 1196, 1273, 1274, 1331], "minimum": [148, 149, 150, 152, 154, 186, 225, 226, 311, 455, 457, 458, 574, 589, 599, 607, 787, 788, 818, 877, 931, 1042, 1077, 1079, 1080, 1186, 1192, 1196, 1331, 1340], "especi": [148, 615, 818, 850, 931, 1204, 1331], "hypothesi": [148, 150, 153, 154, 1340], "test_unique_xyz": 148, "assert_someth": 148, "inner_dtyp": [149, 152], "select_from": [149, 152, 154], "min_siz": [149, 150, 152, 154, 1340], "max_siz": [149, 150, 152, 154, 1340], "anoth": [149, 165, 177, 187, 193, 214, 311, 393, 403, 484, 519, 544, 562, 566, 611, 620, 622, 624, 626, 628, 631, 633, 635, 666, 818, 836, 856, 908, 931, 1011, 1020, 1075, 1083, 1101, 1141, 1200, 1221, 1251, 1331], "randomli": 149, "innermost": [149, 152], "2x": 149, "lst": 149, "11330": 149, "24030": 149, "116": 149, "include_col": 150, "allow_chunk": [150, 154], "allowed_dtyp": [150, 151, 154, 1340], "excluded_dtyp": [150, 151, 154], "allow_time_zon": [150, 151, 154], "describ": [150, 192, 311, 931, 1331], "desir": [150, 360, 450, 546, 976, 1071, 1168, 1331], "onto": 150, "exclud": [150, 154, 194, 311, 370, 384, 387, 401, 485, 564, 722, 742, 818, 857, 931, 936, 1018, 1102, 1121, 1331], "pct": 150, "preced": [150, 936], "allow_infin": [150, 154], "disallow": 150, "usag": [150, 154, 254, 311, 936, 1229, 1331], "deploi": [150, 154], "characterist": [150, 154], "concret": [150, 154], "test_df_height": 150, "interact": [150, 154, 171, 311, 843, 931], "col0": [150, 1340], "col1": [150, 232, 311, 931, 1340], "col2": [150, 232, 311, 931, 1340], "1844": 150, "06": [150, 165, 280, 311, 401, 405, 424, 431, 432, 433, 434, 447, 448, 758, 761, 836, 931, 936, 1018, 1053, 1054, 1068], "848808": 150, "1436e16": 150, "9914e218": 150, "2068": 150, "412277": 150, "7415e16": 150, "2095": 150, "647961": 150, "15836": 150, "nesting_level": 151, "pick": [151, 808], "prioriti": [151, 164, 274, 311, 369, 721, 722, 818, 834, 900, 931], "complex": [151, 369, 370, 393, 721, 722, 818, 984, 1011, 1315, 1331], "fulli": [152, 231, 245, 269, 311], "profil": [153, 155, 839, 931], "balanc": [153, 155, 1340], "set_environ": 153, "polars_hypothesis_profil": [153, 155], "max_data_s": 154, "test_series_len": 154, "zz": [154, 171, 257, 311, 843, 931], "polars_max_thread": 156, "behind": 156, "lock": 156, "reason": [156, 171, 311, 546, 556, 818, 843, 931], "temporarili": [156, 159, 194, 195, 197, 198, 241, 311, 616, 818, 857, 858, 860, 861, 884, 931], "pyspark": 156, "udf": [156, 162, 217, 231, 291, 297, 311, 326, 396, 558, 600, 735, 781, 818, 844, 879, 913, 919, 931, 943, 1176, 1331], "recommend": [156, 171, 211, 231, 311, 835, 843, 931, 936], "thread_pool_s": 157, "easi": 159, "restor": 159, "restore_default": 159, "set_tbl_row": 159, "whatev": 159, "were": [159, 218, 220, 225, 259, 311, 611, 814, 818, 1200, 1331], "enter": 159, "advantag": [159, 231, 311], "set_": 159, "set_verbos": 159, "do_various_th": 159, "cleaner": 159, "breviti": 159, "vein": 159, "durat": [159, 214, 280, 311, 402, 410, 411, 414, 418, 421, 423, 428, 435, 440, 441, 442, 443, 444, 445, 446, 450, 456, 720, 759, 760, 762, 763, 805, 806, 818, 866, 931, 936, 1019, 1027, 1028, 1031, 1038, 1041, 1044, 1049, 1056, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1071, 1078, 1311, 1313, 1331], "set_ascii_t": 159, "write_ascii_frame_to_stdout": 159, "sy": 159, "stdout": [159, 192, 311, 571], "nan_as_nul": 161, "polarsdatafram": 161, "notimplementederror": 161, "num_row": 161, "get_column": [161, 271, 311], "dtypekind": 161, "inference_s": [162, 217, 311], "256": [162, 217, 311, 1190, 1331], "map_row": [162, 311], "tri": [162, 217, 311], "approxim": [163, 311, 327, 456, 736, 818, 833, 931, 1078, 1331, 1340], "hyperloglog": [163, 311, 327, 736, 818, 833, 931], "algorithm": [163, 311, 327, 656, 682, 736, 818, 833, 931, 1241, 1267], "cardin": [163, 311, 327, 736, 818, 833, 931], "k": [164, 244, 274, 275, 311, 369, 370, 383, 501, 721, 722, 818, 834, 900, 931, 984, 1002, 1125, 1315, 1331], "intoexpr": [164, 193, 194, 195, 196, 197, 198, 241, 247, 248, 252, 256, 274, 284, 285, 289, 311, 325, 344, 364, 367, 368, 370, 401, 456, 462, 480, 484, 485, 512, 513, 534, 535, 536, 537, 596, 611, 620, 622, 624, 626, 628, 631, 633, 635, 639, 641, 642, 651, 656, 682, 687, 688, 689, 695, 696, 711, 722, 732, 734, 740, 743, 744, 745, 746, 748, 750, 753, 754, 757, 761, 768, 783, 785, 788, 794, 797, 800, 802, 818, 834, 856, 857, 858, 859, 860, 861, 884, 886, 887, 890, 894, 900, 906, 907, 911, 931, 935, 960, 979, 982, 983, 1018, 1078, 1084, 1101, 1102, 1135, 1200, 1220, 1226, 1272, 1273, 1274, 1280, 1281, 1331], "nulls_last": [164, 256, 274, 311, 336, 356, 369, 370, 540, 650, 651, 721, 722, 740, 818, 834, 894, 900, 931, 952, 972, 1120, 1162, 1236, 1331], "smallest": [164, 274, 311, 369, 370, 722, 818, 834, 900, 931, 984, 1331], "bottom": [164, 311, 370, 818, 834, 931], "largest": [164, 274, 311, 370, 721, 722, 818, 834, 900, 931, 1315, 1331], "lowest": [164, 274, 311, 369, 552, 721, 722, 818, 834, 900, 931], "wors": [164, 274, 311, 834, 894, 900, 931], "search": [164, 214, 274, 311, 546, 656, 682, 834, 866, 894, 900, 931, 1241, 1267], "There": [164, 274, 311, 369, 370, 705, 721, 722, 818, 834, 900, 931, 1290], "top_k": [164, 311, 369, 370, 722, 818, 834, 931, 984, 1331], "columnnameorselector": [165, 173, 175, 223, 230, 232, 244, 266, 276, 277, 278, 311, 836, 845, 846, 875, 901, 902, 931], "due": [165, 194, 214, 241, 244, 280, 311, 321, 371, 411, 429, 433, 447, 500, 579, 580, 582, 584, 586, 587, 602, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 713, 742, 759, 760, 762, 763, 805, 806, 818, 836, 857, 866, 884, 931, 985, 1028, 1050, 1054, 1068, 1331], "overflow": [165, 311, 371, 386, 387, 679, 702, 714, 818, 836, 931, 985, 1005, 1006, 1264, 1287, 1299, 1331], "u8": [165, 266, 267, 278, 311, 611, 730, 818, 836, 931, 936, 1200, 1306, 1331, 1340], "tempor": [165, 194, 195, 197, 198, 211, 241, 243, 244, 265, 311, 376, 485, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 818, 830, 836, 857, 858, 860, 861, 884, 931, 936, 995, 1102, 1121, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1331], "to_dict": [165, 311, 836, 931, 936], "as_seri": [165, 264, 311, 836, 931, 936, 1012, 1194, 1331], "greater": [166, 214, 311, 474, 476, 485, 648, 677, 678, 689, 707, 818, 866, 931, 1102, 1234, 1262, 1263, 1274, 1292, 1331], "cheap": [166, 167, 248, 285, 311, 837, 838, 887, 907, 931, 994, 998, 1331], "deepcopi": [166, 311, 837, 931, 994, 1331], "13": [166, 167, 171, 181, 182, 191, 204, 215, 227, 241, 284, 293, 295, 298, 299, 300, 301, 302, 303, 304, 311, 321, 401, 407, 408, 410, 413, 414, 417, 418, 420, 421, 422, 423, 427, 428, 434, 435, 437, 567, 569, 616, 701, 744, 750, 753, 761, 768, 802, 804, 807, 818, 837, 838, 843, 851, 852, 868, 884, 906, 915, 917, 920, 921, 922, 923, 924, 925, 926, 931, 1018, 1027, 1031, 1038, 1041, 1044, 1049, 1054, 1056, 1068, 1069, 1109, 1112, 1119, 1121, 1176, 1286, 1331], "appl": [168, 202, 213, 236, 239, 264, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 311, 370, 613, 661, 690, 722, 818, 865, 882, 914, 915, 917, 918, 920, 921, 922, 923, 924, 925, 926, 931, 1246, 1275], "banana": [168, 264, 293, 295, 298, 299, 300, 301, 302, 303, 304, 311, 370, 613, 661, 690, 722, 818, 915, 917, 920, 921, 922, 923, 924, 925, 926], "orang": [168, 292, 293, 295, 296, 298, 299, 301, 303, 304, 311, 370, 722, 818, 914, 915, 917, 918, 920, 921, 923, 925, 926], "pairwis": [169, 311], "pearson": [169, 311, 501, 648, 746, 818, 1125, 1234, 1331], "correl": [169, 311, 746, 795], "coeffici": [169, 311, 648, 818, 1234, 1331], "corrcoef": [169, 311], "percentil": [171, 311, 843, 931, 1013, 1331], "interpol": [171, 234, 303, 311, 464, 484, 561, 605, 627, 628, 792, 818, 843, 881, 925, 931, 1013, 1101, 1195, 1211, 1331], "rollinginterpolationmethod": [171, 234, 303, 311, 605, 627, 628, 792, 818, 843, 881, 925, 931, 1013, 1195, 1211, 1331], "summari": [171, 311, 843, 931, 1013, 1331], "midpoint": [171, 234, 303, 311, 605, 627, 628, 792, 818, 843, 881, 925, 931, 1013, 1195, 1211, 1331], "linear": [171, 205, 234, 303, 311, 483, 484, 510, 561, 605, 627, 628, 744, 745, 792, 818, 843, 864, 881, 925, 931, 1013, 1100, 1101, 1132, 1195, 1211, 1331], "deem": [171, 311, 843, 931], "programmat": [171, 311, 843, 931], "versu": [171, 311, 843, 931], "explor": [171, 311, 843, 931], "glimps": [171, 200, 311], "median": [171, 232, 311, 464, 623, 624, 818, 843, 908, 931, 1013, 1209, 1331], "null_count": [171, 175, 311, 393, 818, 843, 931, 1011, 1013, 1331], "266667": [171, 311, 843, 931], "666667": [171, 205, 281, 299, 311, 455, 784, 818, 843, 864, 904, 921, 931, 1077, 1331], "std": [171, 311, 630, 631, 818, 843, 931, 1013, 1213, 1331], "101514": [171, 311, 843, 931], "071068": [171, 311, 843, 931], "36": [171, 311, 843, 931], "41": [171, 311, 632, 633, 818, 843, 931, 1340], "34": [171, 311, 697, 843, 931, 1282], "43": [171, 241, 311, 387, 616, 632, 633, 818, 843, 884, 931], "70": [171, 311, 730, 818, 843, 931, 1125, 1331], "88": [171, 311, 843, 931], "90": [171, 311, 701, 843, 931, 1286], "49": [171, 311, 843, 931, 936], "33": [171, 224, 311, 636, 818, 843, 876, 931, 1211, 1331], "subset": [175, 228, 276, 311, 846, 901, 931], "preserv": [175, 183, 193, 196, 213, 217, 269, 270, 311, 399, 400, 401, 425, 426, 465, 515, 645, 662, 818, 846, 853, 865, 931, 1016, 1017, 1018, 1087, 1137, 1231, 1247, 1312, 1331], "all_horizont": [175, 311, 731, 846, 931], "is_nul": [175, 311, 818, 846, 931, 1331], "null_equ": [177, 187, 311, 1075, 1221, 1331], "sizeunit": [178, 311, 1076, 1331], "heap": [178, 311, 818, 935, 1076, 1331], "bitmap": [178, 311, 1076, 1331], "therefor": [178, 311, 558, 808, 818, 1076, 1331], "structarrai": [178, 311, 1076, 1331], "constant": [178, 241, 311, 402, 456, 462, 818, 884, 931, 1019, 1076, 1078, 1084, 1331], "unchang": [178, 311, 557, 611, 720, 818, 870, 871, 913, 919, 931, 1076, 1175, 1200, 1313, 1331], "capac": [178, 254, 311, 1076, 1229, 1331], "ffi": [178, 311, 1076, 1331], "kb": [178, 311, 1076, 1331], "mb": [178, 311, 1076, 1331], "gb": [178, 311, 1076, 1331], "revers": [178, 311, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 555, 580, 582, 584, 602, 713, 749, 818, 931, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1331], "1_000_000": [178, 311, 1076, 1331], "17888890": [178, 311], "0601749420166": [178, 311], "more_column": [179, 250, 277, 311, 459, 766, 818, 849, 889, 902, 931, 936], "long": [179, 223, 278, 311, 849, 875, 931], "letter": [179, 294, 305, 311, 459, 656, 664, 682, 766, 818, 849, 916, 927, 931, 936, 1241, 1249, 1267], "onlin": [180, 311, 1083, 1331], "rerun": [180, 311, 1083, 1331], "finish": [180, 311, 1083, 1331], "conveni": [180, 273, 311, 942, 1083, 1331], "Not": [181, 311, 463, 494, 496, 818, 851, 931, 1085, 1331], "fillnullstrategi": [182, 311, 464, 818, 852, 931, 1086, 1331], "matches_supertyp": [182, 311, 852, 931], "forward": [182, 214, 252, 311, 355, 401, 425, 464, 470, 538, 641, 818, 852, 866, 890, 931, 971, 1018, 1046, 1086, 1160, 1226, 1331], "consecut": [182, 311, 363, 464, 470, 654, 818, 852, 931, 1086, 1239, 1331], "fill_nan": [182, 311, 464, 818, 852, 931, 1086, 1331], "intoexprcolumn": [183, 311, 343, 347, 348, 355, 369, 370, 376, 377, 378, 433, 462, 465, 511, 520, 523, 533, 538, 597, 601, 638, 641, 663, 667, 670, 686, 692, 693, 694, 698, 702, 707, 721, 722, 737, 742, 759, 760, 762, 763, 774, 775, 805, 806, 808, 818, 853, 890, 931, 959, 963, 964, 971, 995, 996, 997, 1054, 1084, 1133, 1142, 1145, 1155, 1160, 1190, 1248, 1252, 1255, 1271, 1277, 1278, 1279, 1283, 1292, 1331], "constraint": [183, 311, 465, 500, 579, 580, 582, 584, 586, 587, 602, 713, 808, 818, 853, 931, 936], "discard": [183, 311, 465, 818, 853, 931, 1087, 1331], "behav": [183, 311, 465, 558, 693, 694, 818, 853, 931], "eq": [183, 311, 454, 465, 818, 853, 931, 1331], "implicitli": [183, 311, 465, 808, 818, 853, 931], "get_column_index": [184, 311], "reduct": [186, 311], "supercast": [186, 311], "parent": [186, 311], "arithmet": [186, 311], "zip_with": [186, 311, 1331], "foo11": [186, 311], "bar22": [186, 311], "nth": [188, 262, 311, 473, 689, 717, 818, 855, 899, 931, 1091, 1274, 1302, 1331], "th": [188, 262, 311, 473, 520, 534, 648, 667, 698, 717, 818, 855, 899, 931, 1091, 1142, 1156, 1234, 1252, 1283, 1302, 1331], "retriev": [189, 268, 311, 341, 342, 508, 509, 708, 790, 957, 958, 1130, 1131, 1293, 1309, 1331], "max_items_per_column": [192, 311], "max_colname_length": [192, 311], "return_as_str": [192, 311, 571], "preview": [192, 311], "few": [192, 311], "exce": [192, 311], "ellipsi": [192, 311], "head": [192, 216, 261, 311, 325, 505, 596, 818, 869, 931, 1127, 1300, 1331], "tail": [192, 200, 311, 325, 648, 818, 931, 1096, 1234, 1331], "usd": [192, 311, 1340], "eur": [192, 311, 1340], "named_bi": [193, 311, 856, 931], "groupbi": [193, 232, 311, 326, 558, 735, 781, 818, 931], "consist": [193, 196, 230, 269, 311, 697, 856, 859, 931, 936, 942, 1083, 1282, 1311, 1331], "agg": [193, 194, 197, 232, 241, 311, 320, 370, 465, 467, 472, 475, 556, 558, 570, 596, 650, 651, 722, 729, 781, 818, 839, 840, 848, 850, 856, 857, 858, 860, 861, 880, 884, 892, 931, 936], "Or": [193, 194, 214, 241, 256, 280, 289, 311, 456, 596, 616, 651, 759, 760, 762, 763, 805, 806, 808, 818, 856, 857, 866, 884, 894, 911, 931, 1078, 1331], "index_column": [194, 195, 197, 198, 241, 311, 616, 818, 857, 858, 860, 861, 884, 931], "timedelta": [194, 195, 197, 198, 214, 241, 280, 311, 429, 433, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 858, 860, 861, 866, 884, 931, 936, 1034, 1042, 1050, 1054, 1068, 1078, 1185, 1186, 1238, 1320, 1331], "include_boundari": [194, 197, 311, 857, 860, 931], "closedinterv": [194, 195, 197, 198, 241, 311, 485, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 858, 860, 861, 884, 931, 1102, 1331], "label": [194, 268, 273, 311, 394, 604, 617, 618, 619, 621, 623, 625, 627, 630, 632, 634, 818, 857, 880, 931, 1012, 1194, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1331], "group_bi": [194, 196, 228, 232, 241, 280, 310, 311, 320, 370, 465, 467, 472, 475, 556, 558, 596, 650, 651, 722, 729, 781, 818, 839, 840, 848, 850, 857, 859, 880, 884, 892, 930, 931, 936], "start_bi": [194, 197, 311, 857, 860, 931], "startbi": [194, 197, 311, 857, 860, 931], "check_sort": [194, 195, 197, 198, 241, 311, 456, 616, 818, 857, 858, 860, 861, 884, 931, 1078, 1331], "dynamicgroupbi": [194, 197, 311], "member": [194, 311, 857, 931, 1110, 1331], "earliest": [194, 197, 311, 432, 433, 447, 697, 700, 761, 857, 860, 931, 1053, 1054, 1068, 1282, 1285], "datapoint": [194, 197, 311, 857, 860, 931], "descript": [194, 311, 857, 931], "ascend": [194, 195, 197, 198, 241, 311, 616, 818, 857, 858, 860, 861, 884, 931], "dynam": [194, 197, 311, 360, 546, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 818, 857, 860, 931, 935, 976, 1168, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1331], "matter": [194, 195, 197, 198, 211, 241, 243, 244, 265, 311, 616, 693, 694, 818, 857, 858, 860, 861, 884, 931], "interv": [194, 195, 197, 198, 241, 280, 311, 394, 433, 447, 480, 485, 604, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 858, 860, 861, 884, 931, 1012, 1026, 1029, 1030, 1037, 1040, 1043, 1045, 1048, 1051, 1052, 1054, 1059, 1068, 1069, 1097, 1102, 1194, 1331], "_lower_boundari": [194, 311, 857, 931], "_upper_boundari": [194, 311, 857, 931], "harder": [194, 197, 311, 857, 860, 931], "inclus": [194, 195, 197, 198, 241, 311, 485, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 687, 688, 737, 759, 760, 762, 763, 774, 775, 805, 806, 818, 857, 858, 860, 861, 884, 931, 1102, 1272, 1273, 1331], "boundari": [194, 311, 376, 377, 378, 480, 818, 857, 931, 995, 996, 997, 1097, 1331], "mondai": [194, 197, 311, 401, 447, 449, 742, 857, 860, 931, 1018, 1068, 1070], "tuesdai": [194, 197, 311, 857, 860, 931], "wednesdai": [194, 197, 311, 436, 439, 857, 860, 931, 1057, 1060], "thursdai": [194, 197, 311, 401, 742, 857, 860, 931, 1018], "fridai": [194, 197, 311, 401, 436, 439, 742, 857, 860, 931, 1018, 1057, 1060], "saturdai": [194, 197, 311, 857, 860, 931], "sundai": [194, 197, 311, 401, 436, 439, 449, 742, 857, 860, 931, 1018, 1057, 1060, 1070], "weekli": [194, 197, 311, 447, 857, 860, 931, 1068], "week": [194, 197, 214, 241, 280, 311, 401, 429, 433, 447, 449, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 742, 759, 760, 762, 763, 764, 805, 806, 818, 857, 860, 866, 884, 931, 936, 1018, 1050, 1054, 1068, 1070, 1078, 1331], "shift": [194, 197, 253, 311, 363, 397, 470, 514, 597, 642, 744, 818, 857, 860, 891, 931, 1014, 1136, 1190, 1227, 1331], "front": [194, 197, 311, 857, 860, 931], "sorted": [194, 195, 197, 198, 241, 311, 456, 818, 857, 858, 860, 861, 884, 931], "verifi": [194, 195, 197, 198, 241, 311, 456, 818, 857, 858, 860, 861, 884, 931], "incorrect": [194, 195, 197, 198, 241, 311, 450, 456, 556, 616, 640, 818, 857, 858, 860, 861, 884, 913, 919, 931, 1071, 1078, 1224, 1331], "quick": [194, 241, 311, 456, 814, 818, 857, 884, 931, 1013, 1331, 1340], "safe": [194, 241, 311, 433, 447, 456, 609, 620, 622, 624, 626, 628, 631, 633, 635, 818, 857, 884, 931, 1054, 1068, 1198, 1285, 1310, 1331], "roll": [194, 195, 198, 311, 401, 425, 426, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 744, 795, 796, 818, 857, 858, 861, 931, 1018, 1046, 1047, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1331], "re": [194, 210, 311, 425, 426, 436, 439, 857, 931, 1046, 1047, 1057, 1060, 1339], "1d": [194, 214, 241, 280, 311, 403, 429, 433, 441, 444, 447, 450, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 764, 778, 805, 806, 818, 857, 866, 884, 931, 936, 1020, 1029, 1036, 1050, 1054, 1059, 1062, 1065, 1068, 1078, 1331], "set_index": [194, 311, 857, 931], "resampl": [194, 311, 857, 931], "unlik": [194, 311, 857, 931], "evenli": [194, 311, 857, 931], "upsampl": [194, 311, 857, 931], "1n": [194, 214, 241, 280, 311, 429, 433, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1068, 1078, 1331], "1u": [194, 214, 241, 280, 311, 429, 433, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1068, 1078, 1331], "1m": [194, 214, 241, 280, 311, 429, 433, 446, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1063, 1064, 1066, 1067, 1068, 1078, 1331], "millisecond": [194, 214, 241, 280, 311, 413, 422, 429, 433, 443, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 764, 805, 806, 818, 857, 866, 884, 931, 936, 1050, 1054, 1064, 1068, 1078, 1331], "minut": [194, 214, 241, 280, 311, 413, 417, 420, 427, 429, 433, 434, 444, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 761, 762, 763, 764, 804, 805, 806, 818, 857, 866, 884, 931, 936, 1050, 1054, 1065, 1068, 1078, 1331], "1h": [194, 214, 241, 280, 311, 411, 429, 433, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1028, 1030, 1050, 1054, 1068, 1078, 1331], "hour": [194, 214, 241, 280, 311, 417, 420, 422, 427, 429, 433, 434, 441, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 761, 762, 763, 764, 804, 805, 806, 818, 857, 866, 884, 931, 936, 1050, 1054, 1062, 1068, 1078, 1331], "1w": [194, 214, 241, 280, 311, 429, 433, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1068, 1078, 1331], "1mo": [194, 214, 241, 280, 311, 406, 425, 426, 429, 432, 433, 440, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1023, 1045, 1046, 1047, 1050, 1051, 1052, 1053, 1054, 1061, 1068, 1069, 1078, 1331], "month": [194, 214, 241, 280, 311, 409, 425, 426, 429, 433, 436, 439, 447, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 758, 759, 760, 761, 762, 763, 764, 805, 806, 818, 857, 866, 884, 931, 1026, 1046, 1047, 1050, 1054, 1057, 1060, 1068, 1078, 1331], "1q": [194, 214, 241, 280, 311, 429, 433, 447, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1068], "quarter": [194, 214, 241, 280, 311, 429, 433, 447, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1068], "1y": [194, 214, 241, 280, 311, 429, 433, 447, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1050, 1054, 1068], "1i": [194, 241, 280, 311, 456, 616, 619, 621, 623, 625, 627, 630, 632, 634, 818, 857, 884, 931, 1078, 1331], "3d12h4m25": [194, 214, 241, 280, 311, 433, 447, 456, 616, 759, 760, 762, 763, 805, 806, 818, 857, 866, 884, 931, 1054, 1068, 1078, 1331], "correspond": [194, 214, 241, 269, 280, 311, 370, 416, 429, 433, 447, 558, 607, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 722, 759, 760, 762, 763, 805, 806, 818, 839, 857, 866, 884, 931, 1033, 1050, 1054, 1068, 1196, 1331], "daylight": [194, 214, 241, 280, 311, 402, 411, 429, 433, 447, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 759, 760, 762, 763, 764, 805, 806, 818, 857, 866, 884, 931, 1028, 1050, 1054, 1068], "10i": [194, 311, 857, 931], "datetime_rang": [194, 311, 403, 406, 425, 426, 429, 432, 433, 440, 441, 442, 443, 444, 445, 446, 447, 450, 619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 759, 818, 857, 931, 1019, 1020, 1023, 1028, 1029, 1030, 1036, 1037, 1040, 1043, 1046, 1047, 1048, 1050, 1053, 1054, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068], "30m": [194, 311, 433, 447, 857, 931, 1054, 1068], "lower_bound": [194, 311, 376, 378, 485, 818, 857, 931, 995, 997, 1102, 1318, 1331], "upper_bound": [194, 311, 376, 377, 485, 546, 818, 857, 931, 995, 996, 1102, 1174, 1331], "bys": [194, 311, 857, 931], "int_rang": [194, 278, 287, 297, 311, 737, 777, 857, 871, 910, 919, 931], "2i": [194, 311, 857, 931], "3i": [194, 311, 857, 931], "a_agg_list": [194, 311, 857, 931], "rollinggroupbi": [195, 198, 241, 311], "more_bi": [196, 230, 256, 311, 651, 818, 859, 894, 931], "group_by_dynam": [197, 241, 311, 860, 884, 931], "_lower_bound": [197, 311, 860, 931], "_upper_bound": [197, 311, 860, 931], "seed_1": [199, 311, 478, 818, 1095, 1331], "seed_2": [199, 311, 478, 818, 1095, 1331], "seed_3": [199, 311, 478, 818, 1095, 1331], "hash": [199, 311, 818, 1331], "Its": [199, 311, 478, 818, 1095, 1331], "u64": [199, 287, 311, 478, 609, 818, 880, 910, 931, 936, 1095, 1198, 1331], "10783150408545073287": [199, 311], "1438741209321515184": [199, 311], "10047419486152048166": [199, 311], "2047317070637311557": [199, 311], "ab": [200, 216, 261, 284, 311, 708, 710, 818, 906, 931, 936, 1096, 1127, 1300, 1331], "in_plac": [202, 254, 282, 311, 1197, 1229, 1236, 1331], "grown": [202, 311], "insert_column": [203, 311], "intermedi": [205, 311, 864, 931, 1340], "333333": [205, 311, 500, 579, 818, 864, 931, 1190, 1215, 1331], "mask": [206, 208, 311, 365, 486, 488, 489, 492, 493, 499, 598, 599, 655, 659, 666, 818, 980, 1087, 1094, 1102, 1104, 1107, 1108, 1113, 1114, 1122, 1191, 1192, 1222, 1240, 1244, 1251, 1322, 1331], "visual": [206, 208, 311, 892, 931], "scalar": [209, 217, 242, 311, 556, 639, 667, 672, 686, 698, 735, 778, 781, 818, 935, 1124, 1220, 1252, 1257, 1271, 1283, 1331], "buffer_s": [211, 311], "fit": [211, 254, 278, 311, 643, 794, 818, 1228, 1229, 1331], "signific": [211, 217, 311, 326, 558, 637, 818, 1176, 1217, 1331], "4x": [211, 311], "materialis": [211, 212, 242, 243, 311], "rows_by_kei": [211, 243, 311], "iter_row": [212, 242, 243, 244, 311], "17_500": [212, 311], "klmnoopqrstuvwxyz": [212, 311], "__name__": [212, 311], "7500": [212, 311], "15_000": [212, 311], "record_batch": [212, 311], "to_arrow": [212, 311, 1311, 1331], "to_batch": [212, 311], "date32": [212, 311], "large_str": [212, 263, 270, 311], "15000": [212, 311], "2500": [212, 273, 311], "left_on": [213, 214, 279, 311, 865, 866, 903, 931], "right_on": [213, 214, 279, 311, 865, 866, 903, 931], "suffix": [213, 214, 247, 284, 289, 311, 321, 367, 370, 494, 496, 497, 498, 555, 563, 580, 582, 585, 586, 587, 596, 602, 613, 661, 693, 696, 722, 818, 865, 866, 886, 906, 908, 911, 931, 936, 982, 1246, 1281], "_right": [213, 214, 311, 865, 866, 931], "joinvalid": [213, 311, 865, 931], "join_nul": [213, 311, 865, 931], "coalesc": [213, 279, 311, 483, 697, 818, 865, 903, 931, 1282], "fashion": [213, 311, 848, 850, 880, 892, 931], "semi": [213, 311, 865, 931], "anti": [213, 311, 865, 919, 931, 1219, 1222, 1331], "cross": [213, 311, 865, 931], "cartesian": [213, 311, 865, 931], "many_to_mani": [213, 311, 865, 931], "one_to_on": [213, 311, 865, 931], "one_to_mani": [213, 311, 865, 931], "many_to_on": [213, 311, 865, 931], "join_asof": [213, 311, 865, 931], "other_df": [213, 311], "ham_right": [213, 311, 865, 931], "by_left": [214, 311, 866, 931], "by_right": [214, 311, 866, 931], "asofjoinstrategi": [214, 311, 866, 931], "allow_parallel": [214, 311, 865, 866, 931], "force_parallel": [214, 311, 865, 866, 931], "asof": [214, 311, 866, 931], "rather": [214, 311, 471, 556, 571, 604, 615, 707, 818, 866, 931, 1194, 1204, 1292, 1331], "asof_join": [214, 311], "distanc": [214, 311, 480, 818, 866, 931, 1097, 1331], "plan": [214, 215, 311, 396, 818, 835, 839, 844, 848, 865, 866, 888, 892, 931], "gdp": [214, 311, 866, 931], "date_rang": [214, 280, 311, 409, 412, 430, 438, 449, 1026, 1045, 1051, 1052, 1069, 1070], "2016": [214, 311, 866, 931], "4164": [214, 311, 866, 931], "4411": [214, 311, 866, 931], "4566": [214, 311, 866, 931], "4696": [214, 311, 866, 931], "4827": [214, 311], "2017": [214, 311, 866, 931], "2018": [214, 311, 432, 866, 931, 1053], "2019": [214, 311, 866, 931], "popul": [214, 311, 866, 931], "82": [214, 311, 866, 931], "66": [214, 279, 311, 632, 633, 730, 818, 866, 903, 931, 1125, 1211, 1331], "83": [214, 311, 866, 931], "quit": [214, 311], "earlier": [214, 311], "later": [214, 311, 570, 888, 931], "countri": [214, 311, 402, 1019], "gdp_date": [214, 311], "gdp2": [214, 311], "germani": [214, 311], "netherland": [214, 311], "784": [214, 311], "833": [214, 311], "914": [214, 311], "910": [214, 311, 664, 1249], "909": [214, 311], "pop2": [214, 311], "request": [215, 311], "describe_plan": [215, 311], "unoptim": [215, 311], "describe_optimized_plan": [215, 311], "show_graph": [215, 311, 931], "un": [215, 311], "graphviz": [215, 311, 892, 931], "much": [217, 278, 297, 311, 393, 519, 544, 558, 671, 672, 781, 818, 919, 1011, 1141, 1166, 1176, 1256, 1257, 1331], "intens": [217, 297, 311, 596, 818, 1176, 1331], "materi": [217, 244, 297, 311, 839, 880, 919, 931, 936, 1176, 1331], "parallelis": [217, 297, 311, 1176, 1331], "achiev": [217, 297, 311, 558, 672, 818, 1012, 1176, 1194, 1257, 1331], "black": [217, 311, 364, 365, 366, 367, 368], "arbitrarili": [217, 311], "rearrang": [217, 311], "transform": [217, 257, 311, 556, 703, 705, 706, 818, 895, 931], "map_el": [217, 311, 326, 556, 730, 818, 943, 1331], "lru_cach": [217, 311, 558, 818, 1176, 1331], "column_1": [217, 275, 311], "better": [217, 268, 269, 297, 311, 558, 672, 818, 835, 919, 931, 1219, 1222, 1257, 1331], "axi": [218, 220, 223, 225, 259, 311, 738, 739, 875, 931], "max_horizont": [218, 311, 782], "null_strategi": [220, 259, 311], "nullstrategi": [220, 259, 311], "mean_horizont": [220, 311, 784], "propag": [220, 259, 311, 348, 454, 523, 588, 589, 591, 654, 745, 818, 964, 1145, 1185, 1186, 1239, 1331], "spam": [220, 311, 664, 1249], "ignore_nul": [221, 260, 311, 322, 324, 348, 455, 457, 458, 523, 654, 731, 733, 745, 818, 940, 941, 964, 1077, 1079, 1080, 1145, 1239, 1321, 1331], "id_var": [223, 311, 875, 931], "value_var": [223, 311, 875, 931], "variable_nam": [223, 311, 875, 931], "value_nam": [223, 311, 875, 931], "unpivot": [223, 311, 875, 931], "massag": [223, 311, 875, 931], "measur": [223, 311, 875, 931], "steve": [224, 311, 876, 931], "elis": [224, 311, 876, 931], "ag": [224, 311, 876, 931], "anna": [224, 311, 876, 931], "megan": [224, 311, 876, 931], "thoma": [224, 311, 876, 931], "min_horizont": [225, 311, 787, 797], "what": [228, 311, 314, 401, 556, 656, 682, 818, 1018, 1241, 1267, 1321, 1331, 1335], "pack": [228, 311], "expr_unique_subset": [228, 311], "df_nuniqu": [228, 311], "df_agg_nuniqu": [228, 311], "include_kei": [230, 244, 311], "offer": [231, 311, 600, 818, 879, 931], "cast_str_to_int": [231, 311, 879, 931], "col_nam": [231, 311, 558, 808, 818, 879, 931], "tdf": [231, 311, 879, 931], "aggregate_funct": [232, 311, 936], "pivotagg": [232, 311], "sort_column": [232, 311], "section": [232, 311, 655, 663, 664, 666, 680, 681, 759, 760, 762, 763, 805, 806, 1240, 1248, 1249, 1251, 1265, 1266], "predefin": [232, 311], "predict": [232, 235, 280, 311], "transpos": [232, 311], "discoveri": [232, 311], "col3": [232, 311, 1340], "tanh": [232, 311, 818, 1331], "998347": [232, 311], "964028": [232, 311], "999954": [232, 311], "unique_column_valu": [232, 311], "ix": [232, 311], "column_nam": [236, 237, 275, 311, 882, 931], "coo": [236, 311, 882, 931], "car": [236, 264, 311, 613, 818, 882, 931], "cam": [236, 311, 882, 931], "replace_column": [238, 311], "t_0": [241, 311, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 818, 884, 931], "t_1": [241, 311, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 818, 884, 931, 1078, 1331], "t_n": [241, 311, 456, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 818, 884, 931, 1078, 1331], "strptime": [241, 311, 432, 616, 818, 884, 931, 1053], "set_sort": [241, 280, 311, 616, 818, 866, 884, 931, 1331], "2d": [241, 268, 269, 311, 429, 616, 778, 818, 884, 931, 1019, 1026], "sum_a": [241, 311, 616, 818, 884, 931], "min_a": [241, 311, 616, 818, 884, 931], "max_a": [241, 311, 616, 818, 884, 931], "by_pred": [242, 311], "accord": [242, 311, 557, 604, 759, 760, 762, 763, 805, 806, 818, 1033, 1194, 1331], "mutual": [242, 311], "exclus": [242, 311, 730, 737, 774, 775, 818], "clariti": [242, 311], "toomanyrowsreturnederror": [242, 311], "norowsreturnederror": [242, 311], "inherit": [242, 311, 396, 818, 844, 931], "rowserror": [242, 311], "littl": [243, 311], "peak": [243, 311, 598, 599, 818, 1191, 1192, 1331], "flat": [244, 311, 517, 612, 818, 1139, 1201, 1331], "high": [244, 311, 604, 818, 830, 1194, 1331], "cost": [244, 311], "reoconstruct": [244, 311], "defaultdict": [244, 311], "assum": [244, 311, 870, 871, 913, 919, 931], "with_replac": [245, 311, 533, 638, 818, 1155, 1218, 1331], "ordereddict": [246, 311, 581, 583, 585, 800, 885, 931], "named_expr": [247, 248, 284, 285, 311, 711, 797, 800, 886, 887, 906, 907, 931], "threshold": [247, 311, 886, 931], "set_auto_structifi": [247, 284, 311, 886, 906, 931], "auto_structifi": [247, 284, 311, 886, 906, 931], "is_odd": [247, 311, 886, 931, 936], "_is_odd": [247, 311, 886, 931], "bit_set": [249, 311, 888, 931], "fill_valu": [252, 253, 278, 311, 641, 642, 818, 890, 891, 931, 1226, 1227, 1331], "opposit": [252, 311, 355, 538, 641, 818, 890, 931, 971, 1160, 1226, 1331], "lag": [252, 311, 355, 538, 641, 744, 818, 890, 931, 971, 1160, 1226, 1331], "shrink": [254, 311, 643, 818, 1228, 1229, 1331], "hold": [254, 269, 311, 1311, 1331], "multithread": [256, 311, 369, 370, 651, 721, 722, 740, 818, 834, 894, 900, 931, 972, 1162, 1236, 1331], "although": [257, 311, 895, 931], "sqlcontext": [257, 311, 830, 895, 931, 1339], "1999": [257, 311, 429, 936, 1050], "2010": [257, 311, 936], "2077": [257, 311, 936], "alias": [257, 311, 564, 895, 931], "a_is_even": [257, 311, 895, 931], "concat_w": [257, 311, 895, 931], "b_b": [257, 311], "float4": [257, 311, 895, 931], "ddof": [258, 281, 311, 357, 362, 541, 548, 630, 631, 634, 635, 653, 728, 746, 748, 795, 796, 799, 807, 818, 896, 904, 931, 973, 978, 1163, 1170, 1213, 1215, 1238, 1320, 1331], "deviat": [258, 311, 457, 630, 631, 653, 799, 818, 896, 931, 1079, 1238, 1331], "degre": [258, 281, 311, 541, 548, 606, 630, 631, 634, 635, 653, 728, 739, 746, 748, 795, 796, 799, 807, 818, 896, 904, 931, 1213, 1215, 1238, 1320, 1331], "freedom": [258, 281, 311, 541, 548, 630, 631, 634, 635, 653, 728, 746, 748, 795, 796, 799, 807, 818, 896, 904, 931, 1213, 1215, 1238, 1320, 1331], "divisor": [258, 281, 311, 541, 548, 630, 631, 634, 635, 653, 728, 746, 748, 795, 796, 799, 807, 818, 896, 904, 931, 1213, 1215, 1238, 1320, 1331], "816497": [258, 311], "gather_everi": [262, 311, 717, 818, 899, 931, 1302, 1331], "mostli": [263, 311, 465, 818], "categoricaltyp": [263, 311], "fruit": [264, 311, 613, 661, 690, 698, 818, 1246, 1275, 1283], "beetl": [264, 311, 613, 818], "audi": [264, 311, 613, 818], "28": [264, 269, 311, 319, 432, 450, 818, 1053, 1071, 1311, 1331, 1340], "300": [264, 311, 477, 594, 818, 936, 1207, 1208, 1210, 1331], "drop_first": [266, 311, 1306, 1331], "dummi": [266, 311, 1306, 1331], "foo_1": [266, 311], "foo_2": [266, 311], "bar_3": [266, 311], "bar_4": [266, 311], "ham_a": [266, 311], "ham_b": [266, 311], "instantiat": [267, 311, 1308, 1331], "from_repr": [267, 311, 1308, 1331], "df_from_str_repr": [267, 311], "eval": [267, 311, 556, 558, 765, 818, 1176, 1308, 1331], "return_typ": [268, 273, 311], "jaxexporttyp": [268, 311], "devic": [268, 311, 1309, 1331], "jax": [268, 311, 1309, 1331], "indexord": [268, 269, 311], "fortran": [268, 269, 311], "gpu": [268, 311, 1309, 1331], "tpu": [268, 311, 1309, 1331], "design": [268, 273, 311], "32bit": [268, 311], "jax_enable_x64": [268, 311], "startup": [268, 311], "to_dummi": [268, 273, 311, 1331], "to_numpi": [268, 273, 311, 556, 818, 1331], "to_torch": [268, 311, 1331], "lbl": [268, 273, 311], "feat1": [268, 273, 311], "feat2": [268, 273, 311], "gpudevic": [268, 311], "process_index": [268, 311], "gpu_devic": [268, 311], "downstream": [269, 311, 640, 818, 1224, 1331], "applic": [269, 311, 558, 619, 621, 623, 625, 627, 630, 632, 634, 818], "prevent": [269, 311, 321, 386, 387, 500, 579, 714, 818, 931, 1005, 1006, 1299, 1331], "reshap": [269, 311, 517, 818, 1139, 1331], "immut": [269, 311, 1311, 1331], "arr": [269, 311, 810, 1311, 1323, 1331], "writeabl": [269, 311, 1311, 1331], "runtimeerror": [269, 311, 1311, 1331], "c_contigu": [269, 311], "u1": [269, 311], "f4": [269, 311], "use_pyarrow_extension_arrai": [270, 311, 1312, 1331], "extens": [270, 311, 1312, 1331], "na": [270, 311, 690, 1312, 1331], "doubl": [270, 311], "four": [272, 311], "five": [272, 311, 1340], "torchexporttyp": [273, 311], "tensor": [273, 311, 1314, 1331], "polarsdataset": [273, 311], "pytorch": [273, 311, 1314, 1331], "tensordataset": [273, 311], "label_column": [273, 311], "to_jax": [273, 311, 1331], "0000": [273, 311, 1314, 1331, 1340], "5000": [273, 311, 1314, 1331], "opt": [273, 311], "half": [273, 311, 433, 455, 456, 457, 458, 818, 1054, 1077, 1078, 1079, 1080, 1331], "experiment": [273, 311], "model": [273, 311], "float16": [273, 311], "dataload": [273, 311], "util": [273, 311, 770, 850, 931, 935], "dl": [273, 311], "scikit": [273, 311], "learn": [273, 311], "sklearn": [273, 311], "fetch_california_h": [273, 311], "hous": [273, 311], "feature_nam": [273, 311], "train": [273, 311], "loader": [273, 311], "bottom_k": [274, 311, 370, 721, 722, 818, 900, 931, 1315, 1331], "header_nam": [275, 311], "perhap": [275, 311], "column_2": [275, 311], "name_gener": [275, 311], "base_nam": [275, 311], "my_column_": [275, 311], "my_column_0": [275, 311], "my_column_1": [275, 311], "my_column_2": [275, 311], "j": [275, 311], "new_id": [275, 311], "uniquekeepstrategi": [276, 311, 901, 931], "kept": [276, 311, 901, 931], "decompos": [277, 311, 902, 931], "t_a": [277, 311, 902, 931], "t_b": [277, 311, 902, 931], "t_c": [277, 311, 902, 931], "t_d": [277, 311, 902, 931], "womp": [277, 311, 902, 931], "t_": [277, 311, 456, 818, 902, 931, 1078, 1331], "t_struct": [277, 311, 902, 931], "step": [278, 311, 469, 737, 774, 775, 818], "unstackdirect": [278, 311], "pivot": [278, 311, 936], "ascii_uppercas": [278, 311], "h": [278, 311, 319, 436, 439, 643, 680, 681, 697, 700, 704, 818, 1265, 1266, 1282, 1285, 1289], "x_0": [278, 311, 455, 456, 457, 458, 818, 1077, 1078, 1079, 1080, 1331], "x_1": [278, 311, 456, 818, 1078, 1331], "y_0": [278, 311, 455, 456, 457, 458, 818, 1077, 1078, 1079, 1080, 1331], "y_1": [278, 311], "z_0": [278, 311], "z_1": [278, 311], "include_nul": [279, 311, 903, 931], "implicit": [279, 311, 903, 931], "syntact": [279, 311, 611, 731, 733, 736, 747, 749, 752, 766, 771, 772, 773, 782, 784, 786, 787, 789, 791, 792, 797, 799, 801, 803, 807, 809, 818, 903, 931, 1200, 1237, 1331], "sugar": [279, 311, 611, 731, 733, 736, 747, 749, 752, 766, 771, 772, 773, 782, 784, 786, 787, 789, 791, 792, 797, 799, 801, 803, 807, 809, 818, 903, 931, 1200, 1237, 1331], "400": [279, 311, 442, 443, 445, 903, 931, 1207, 1208, 1210, 1331], "600": [279, 311, 442, 443, 445, 903, 931, 936], "700": [279, 311, 903, 931], "new_df": [279, 311, 903, 931], "time_column": [280, 311], "frequenc": [280, 311], "chain": [280, 311, 433, 447, 500, 579, 580, 582, 584, 586, 587, 602, 713, 808, 818, 1054, 1068], "offset_bi": [280, 311, 433, 447, 764, 1054, 1068], "forward_fil": [280, 311, 363, 384, 387, 641, 818], "varianc": [281, 311, 458, 501, 634, 635, 728, 807, 818, 904, 931, 1080, 1125, 1215, 1320, 1331], "grow": [282, 311], "not_": [284, 311, 495, 818, 906, 931, 936, 1331], "not_c": [284, 311, 906, 931], "52": [284, 311, 448, 636, 818, 866, 906, 931], "diff": [284, 311, 440, 441, 442, 443, 444, 445, 446, 534, 818, 906, 931, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1156, 1331], "_diff": [284, 311, 906, 931], "row_nr": [286, 311, 909, 931], "1001": [287, 311, 910, 931], "1002": [287, 311, 910, 931], "named_agg": [289, 911], "_sum": [289, 911], "_mean_squar": [289, 911], "b_sum": [289, 911], "c_mean_squar": [289, 911], "sub": [291, 297, 341, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 362, 523, 531, 818, 957, 958, 959, 962, 963, 964, 965, 966, 967, 968, 969, 973, 974, 978, 1145, 1153], "map_group": [291, 735, 913], "toward": [292, 504, 525, 749, 818, 914, 1126, 1147, 1331], "nr": [294, 305, 916, 927], "triangl": [297, 919], "group_df": [297, 919], "maxim": [298, 334, 818, 920, 950, 1331], "833333": [299, 921], "minim": [301, 335, 342, 509, 643, 651, 818, 923, 951, 958, 1131, 1180, 1228, 1331], "overview": [311, 818, 830, 931, 1331, 1340], "frameinittyp": [311, 931], "entri": [311, 931, 1339], "workaround": 311, "pola": 311, "2846": 311, "df4": 311, "df5": 311, "df6": 311, "approx_n_uniqu": [311, 818, 931], "corr": 311, "deseri": [311, 471, 570, 818, 888, 931], "drop_in_plac": 311, "drop_nul": [311, 399, 818, 931, 1016, 1331], "estimated_s": [311, 1331], "explod": [311, 370, 467, 596, 612, 722, 818, 931, 935, 1201, 1331], "find_idx_by_nam": 311, "fold": [311, 568, 743, 750, 751, 754, 755, 793], "frame_equ": 311, "group_by_rol": [311, 931], "groupby_dynam": [311, 931], "groupby_rol": [311, 931], "hash_row": 311, "insert_at_idx": 311, "is_dupl": [311, 818, 1331], "is_empti": [311, 1331], "is_uniqu": [311, 818, 1331], "iter_column": 311, "iter_slic": 311, "melt": [311, 931], "merge_sort": [311, 931], "n_chunk": [311, 942, 1083, 1197, 1331], "n_uniqu": [311, 327, 818, 1331], "pipe": [311, 818, 931], "plot": [311, 880, 892, 931, 1331], "hvplottabularpolar": [311, 1331], "defer": [311, 314, 1331, 1335], "galleri": [311, 314, 1331, 1335], "scatter": [311, 314, 1223, 1331], "speci": [311, 314], "setosa": [311, 314], "versicolor": [311, 314], "stock_1": [311, 314], "stock_2": [311, 314], "quantil": [311, 604, 627, 628, 818, 931, 1194, 1211, 1331], "replace_at_idx": 311, "select_seq": [311, 931], "shift_and_fil": [311, 818, 931, 1331], "shrink_to_fit": [311, 1331], "take_everi": [311, 818, 931, 1331], "to_panda": [311, 1331], "to_struct": [311, 664], "unnest": [311, 394, 604, 614, 664, 665, 688, 689, 710, 711, 727, 818, 931, 976, 1012, 1168, 1194, 1203, 1273, 1274, 1331], "unstack": 311, "with_columns_seq": [311, 931], "with_row_count": [311, 931], "write_avro": 311, "write_databas": 311, "write_delta": 311, "write_excel": 311, "write_ipc_stream": 311, "write_json": 311, "write_parquet": 311, "cum_prod": [319, 391, 818, 1009, 1331], "ghi": [319, 664, 818, 936, 1249], "94": [320, 818], "to_uppercas": [321, 586, 665, 818], "confus": [322, 494, 496, 682, 818], "kleen": [322, 324, 731, 732, 733, 734, 818, 940, 941, 1331], "bitwis": [323, 595, 730, 731, 732, 733, 734, 818], "upcast": [325, 818], "skip_nul": [326, 558, 818, 943, 1176, 1331], "pass_nam": [326, 558, 818], "mapelementsstrategi": [326, 558, 818], "thread_loc": [326, 558, 818], "unknown": [326, 663, 778, 818, 1248], "alpha": [326, 455, 457, 458, 818, 848, 850, 880, 892, 931, 936, 1077, 1079, 1080, 1331], "stage": [326, 818], "code": [326, 364, 365, 366, 367, 368, 396, 558, 640, 818, 844, 850, 868, 931, 1224, 1331], "gil": [326, 558, 818], "approx": [327, 818], "1005": [327, 818], "invers": [328, 329, 330, 331, 332, 333, 818, 944, 945, 946, 947, 948, 949, 1311, 1331], "cosin": [328, 329, 379, 380, 556, 818, 944, 945, 999, 1000, 1331], "570796": [328, 330, 818, 944, 946, 1331], "hyperbol": [329, 331, 333, 380, 647, 719, 818, 945, 947, 949, 1000, 1233, 1304, 1331], "sine": [330, 331, 556, 646, 647, 818, 946, 947, 1232, 1233, 1331], "881374": [331, 818, 947, 1331], "tangent": [332, 333, 718, 719, 818, 948, 949, 1303, 1304, 1331], "785398": [332, 738, 739, 818, 948, 1331], "rank": [336, 516, 740, 746, 765, 818, 952, 1138, 1331], "arg_wher": [337, 818], "subarrai": [339, 340, 955, 956], "membership": [343, 511, 959, 1133], "number_of_two": [344, 513], "null_on_oob": [347, 519, 521, 544, 963, 1141, 1143, 1166], "sublist": [347, 508, 509, 511, 514, 518, 519, 520, 521, 522, 523, 524, 534, 539, 543, 544, 546, 963, 1110, 1130, 1131, 1133, 1136, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1156, 1161, 1165, 1166, 1168, 1331], "x_y": [348, 523], "707107": [357, 457, 630, 631, 818, 973, 1079, 1331], "i8": [359, 360, 409, 413, 417, 420, 422, 424, 427, 430, 431, 434, 448, 449, 545, 643, 791, 794, 809, 818, 975, 976, 1014, 1026, 1030, 1043, 1045, 1052, 1055, 1069, 1070, 1167, 1202, 1228, 1318, 1331], "field_0": [360, 546, 976, 1168], "field_1": [360, 546, 976, 1168], "field_n": [360, 546, 976, 1168], "n0": [360, 546], "n1": [360, 546], "c1": 360, "c2": 360, "c3": 360, "seen": [363, 470, 818], "substr": [364, 367, 368, 655, 661, 666, 680, 681, 686, 687, 688, 689, 690, 936, 979, 982, 983, 1240, 1246, 1251, 1265, 1266, 1271, 1272, 1273, 1274, 1275], "ends_with": [364, 368, 655, 690, 936, 1275], "yellow": [364, 365, 366, 367, 368], "x00": [364, 365, 366, 367, 368, 659, 979, 980, 981, 982, 983, 1244], "xff": [364, 365, 366, 367, 368, 659, 979, 980, 981, 982, 983, 1244], "contains_with_lit": 364, "contains_with_expr": 364, "transferencod": [365, 366, 659, 660, 980, 981, 1244, 1245], "hex": [365, 366, 659, 660, 702, 980, 981, 1244, 1245, 1287], "base64": [365, 366, 659, 660, 980, 981, 1244, 1245], "000000": [365, 366, 659, 980, 981, 1244], "ffff00": [365, 366, 659, 980, 981, 1244], "0000ff": [365, 366, 659, 980, 981, 1244], "anywher": [367, 368, 697, 699, 700, 1282, 1284, 1285], "ends_with_lit": 367, "ends_with_expr": 367, "starts_with_lit": 368, "starts_with_expr": 368, "top_k_bi": [369, 370, 721, 818], "bottom_k_bi": [369, 721, 722, 818], "_btm_by_a": [370, 818], "_btm_by_b": [370, 818], "a_btm_by_a": [370, 818], "b_btm_by_a": [370, 818], "c_btm_by_a": [370, 818], "a_btm_by_b": [370, 818], "b_btm_by_b": [370, 818], "c_btm_by_b": [370, 818], "_by_ca": [370, 722, 818], "_by_cb": [370, 722, 818], "a_by_ca": [370, 722, 818], "b_by_ca": [370, 722, 818], "c_by_ca": [370, 722, 818], "a_by_cb": [370, 722, 818], "b_by_cb": [370, 722, 818], "c_by_cb": [370, 722, 818], "to_fram": [372, 412, 433, 438, 447, 697, 1012, 1194, 1219, 1222, 1273, 1274, 1282, 1331], "259921": [374, 818, 991, 1331], "587401": [374, 818], "numericliter": [376, 377, 378, 818, 995, 996, 997, 1331], "temporalliter": [376, 377, 378, 818, 995, 996, 997, 1035, 1036, 1331], "outsid": [376, 818, 995, 1331], "clip": [377, 378, 818, 996, 997, 1331], "543081": [380, 818, 1000, 1331], "cotang": [381, 818, 1001, 1331], "cumul": [383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 749, 750, 751, 752, 753, 754, 755, 756, 757, 818, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1331], "cum_count_revers": [383, 818], "cum_max_revers": [384, 818], "cum_max_all_fil": [384, 818], "cum_min_revers": [385, 818], "cum_prod_revers": [386, 818], "cum_sum_revers": [387, 818], "value_cum_sum": [387, 818], "value_cum_sum_all_fil": [387, 818], "cum_count": [388, 818, 1331], "cum_max": [389, 818, 1007, 1331], "cum_min": [390, 818, 1008, 1331], "cum_sum": [392, 482, 712, 753, 756, 818, 863, 931, 1010, 1124, 1331], "min_period": [393, 455, 457, 458, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 795, 796, 818, 1011, 1077, 1079, 1080, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1331], "slide": [393, 818, 1011, 1331], "slot": [393, 397, 514, 818, 1011, 1014, 1136, 1331], "realli": [393, 656, 682, 818, 1011, 1241, 1267, 1331], "visit": [393, 818, 1011, 1331], "left_clos": [394, 604, 818, 1012, 1194, 1331], "include_break": [394, 604, 818, 1012, 1194, 1331], "bin": [394, 480, 604, 702, 730, 811, 818, 1012, 1097, 1194, 1287, 1325, 1331], "discret": [394, 397, 452, 480, 514, 534, 604, 818, 1012, 1014, 1074, 1097, 1136, 1156, 1194, 1331], "plu": [394, 551, 818, 1012, 1173, 1194, 1331], "endpoint": [394, 604, 818, 1012, 1194, 1331], "observ": [394, 455, 456, 457, 458, 604, 818, 1012, 1077, 1078, 1079, 1080, 1194, 1331], "fall": [394, 604, 818, 1012, 1194, 1331], "qcut": [394, 818, 1012, 1331], "breakpoint": [394, 480, 604, 818, 1012, 1097, 1194, 1331], "brk": [394, 604, 818], "foo_bin": [394, 604, 818], "radian": [395, 738, 818], "720": [395, 606, 818], "540": [395, 606, 818], "360": [395, 606, 818], "180": [395, 606, 818], "pickl": [396, 818, 844, 931], "secur": [396, 818, 844, 931], "implic": [396, 818, 844, 931], "trust": [396, 818, 844, 931], "meta": [396, 818], "ba": [396, 459, 570, 690, 766, 818, 936], "null_behavior": [397, 514, 818, 1014, 1136, 1331], "nullbehavior": [397, 514, 818, 1014, 1136, 1331], "drop_nan": [400, 818, 1017, 1331], "week_mask": [401, 742, 1018], "holidai": [401, 742, 1018], "busi": [401, 742, 1018], "handi": [401, 742, 1018], "pip": [401, 742, 1018], "dutch": [401, 742, 1018], "my_holidai": [401, 742, 1018], "country_holidai": [401, 742, 1018], "nl": [401, 742, 1018], "2025": [401, 742, 936, 1018], "business_day_count": [401, 1018], "land": [401, 1018], "weekend": [401, 742, 1018], "rolled_forward": 401, "vari": [402, 1019, 1340], "rare": [402, 1019], "switch": [402, 1019], "samoa": [402, 1019], "apia": [402, 1019], "did": [402, 1019], "2011": [402, 1019], "dst_offset": [402, 1019], "2012": [402, 1019], "replace_time_zon": [402, 408, 411, 1024, 1025, 1058], "pacif": [402, 1019], "11h": [402, 1019], "13h": [402, 1019], "lose": [403, 1020], "time_unit_m": [403, 1020], "time_unit_n": [403, 1020], "999": [404, 419, 936, 1021, 1039, 1340], "1897": [404, 419, 1021, 1039], "3002": [404, 419, 1021, 1039], "cent": 404, "0999": [404, 419], "naiv": [405, 406, 1022, 1023, 1285], "compon": [405, 434, 697, 700, 764, 1022, 1055, 1282, 1285], "resolv": [405, 841, 847, 885, 905, 931], "tm": [405, 936], "456000": [405, 1022], "101000": 405, "d1": 405, "d2": 405, "d3": 405, "europ": [406, 411, 432, 1023, 1028, 1053], "london": [406, 411, 432, 1023, 1028, 1053], "gmt": [406, 411, 432, 1023, 1028, 1053], "bst": [406, 411, 432, 1023, 1028, 1053], "1978": [407, 408, 413, 416, 417, 420, 422, 427, 434, 437, 451], "500_000": [407, 408, 413, 417, 420, 422, 427, 434, 437], "2065": [407, 408, 413, 417, 420, 422, 427, 434, 437], "60_000": [407, 408, 413, 417, 420, 422, 427, 434, 437], "060": [407, 408, 413, 417, 420, 422, 427, 434, 437], "weekdai": [409, 430], "ordinal_dai": [409, 449], "day_of_month": [409, 430, 449], "day_of_year": [409, 430, 449], "356": [409, 430, 449], "357": [409, 430, 449], "358": [409, 430, 449], "359": [409, 430, 449], "total_dai": [410, 1027], "base_utc_offset": [411, 1028], "0m": [411, 1028], "epochtimeunit": [412, 770, 1029], "epoch_n": [412, 1029], "epoch_": [412, 1029], "978307200000000": [412, 438, 1029, 1059], "978307200": [412, 1029], "978393600000000": [412, 438, 1029, 1059], "978393600": [412, 1029], "978480000000000": [412, 438, 1029, 1059], "978480000": [412, 1029], "total_hour": [414, 1031], "leap": [415, 429, 1032, 1050], "leap_year": 415, "iso": [416, 448, 449, 1033, 1069, 1070], "1977": [416, 451], "1979": [416, 451], "calendar_year": [416, 451], "1976": [416, 451], "500000": [417, 1037], "60000": 417, "total_microsecond": [418, 1038], "mlnm": 419, "total_millisecond": [421, 1041], "total_minut": [423, 1044], "think": [425, 426, 1046, 1047], "vectoris": [425, 426, 1046, 1047], "tseri": [425, 426, 1046, 1047], "monthend": [425, 1046], "rollforward": [425, 1046], "monthbegin": [426, 1047], "rollback": [426, 1047], "500000000": [427, 1048], "60000000": 427, "total_nanosecond": [428, 1049], "minu": [429, 592, 818, 1050], "dictat": [429, 818, 935, 1050], "2005": [429, 1050], "date_plus_1i": [429, 1050], "1y2mo": [429, 1050], "date_min": 429, "1998": [429, 1050], "2003": [429, 770, 1050], "2004": [429, 1050], "2006": [429, 1050], "new_dat": 429, "ordin": [430, 607, 818, 1051, 1196, 1331], "366": [430, 1051], "use_earliest": [432, 447, 697, 700, 761, 1053, 1068, 1282, 1285], "non_exist": [432, 1053], "nonexist": [432, 1053], "convert_time_zon": [432, 1053], "london_timezon": [432, 1053], "amsterdam": [432, 1053], "london_to_amsterdam": [432, 1053], "cet": [432, 1053], "cest": [432, 1053], "ts_local": [432, 1053], "brussel": [432, 1053], "localis": [433, 447, 1068], "dst": [433, 447, 1054, 1068], "cst": [433, 447, 1054, 1068], "cdt": [433, 447, 1054, 1068], "225": [433, 447], "10m": [433, 447, 1054, 1068], "milli": [434, 1055], "micro": [434, 1055], "total_second": [435, 1056], "to_str": [436, 1057], "datetime_str": [436, 439], "day_nam": [436, 439], "month_nam": [436, 439], "march": [436, 439, 1057, 1060], "april": [436, 439, 1057, 1060], "timestamp_u": [438, 1059], "timestamp_m": 438, "978307200000": 438, "978393600000": 438, "978480000000": 438, "strftime": [439, 1060], "days_diff": 440, "hours_diff": 441, "200m": [442, 443, 445], "milliseconds_diff": [442, 443, 445], "200": [442, 443, 445, 611, 818, 936, 1200, 1207, 1208, 1210, 1331], "200000": [442, 871, 931], "800": [442, 443, 445], "minutes_diff": 444, "1440": [444, 1065], "200000000": 445, "seconds_diff": 446, "truncate_str": 447, "truncate_td": 447, "53": [448, 1069], "time_unit_u": 450, "32971": [450, 1071], "32974": [450, 1071], "32976": [450, 1071], "iso_year": 451, "pk": [452, 818, 1074, 1331], "probabl": [452, 604, 818, 1074, 1194, 1331], "459148": [452, 818], "754888": [452, 818], "span": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "half_lif": [455, 456, 457, 458, 818, 1077, 1078, 1079, 1080, 1331], "adjust": [455, 457, 458, 648, 818, 1077, 1079, 1080, 1234, 1331], "exponenti": [455, 456, 457, 458, 460, 601, 818, 1077, 1078, 1079, 1080, 1081, 1331], "weight": [455, 456, 457, 458, 617, 618, 619, 621, 623, 625, 627, 630, 632, 634, 648, 818, 1077, 1078, 1079, 1080, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1234, 1331], "decai": [455, 456, 457, 458, 818, 1077, 1078, 1079, 1080, 1331], "term": [455, 457, 458, 667, 686, 698, 818, 1077, 1079, 1080, 1252, 1271, 1283, 1331], "mass": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "gamma": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "frac": [455, 457, 458, 648, 818, 1077, 1079, 1080, 1234, 1331], "foral": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "geq": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "theta": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "life": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "exp": [455, 456, 457, 458, 818, 1077, 1078, 1079, 1080, 1331], "ln": [455, 456, 457, 458, 818, 1077, 1078, 1079, 1080, 1331], "smooth": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "factor": [455, 457, 458, 720, 818, 1077, 1079, 1080, 1313, 1331], "leq": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "imbal": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "ew": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "w_i": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "recurs": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "y_t": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "y_": [455, 456, 457, 458, 818, 1077, 1078, 1079, 1080, 1331], "x_t": [455, 457, 458, 818, 1077, 1079, 1080, 1331], "x_2": [455, 456, 457, 458, 818, 1077, 1078, 1079, 1080, 1331], "428571": [455, 818, 1077, 1331], "ldot": [456, 818, 1078, 1331], "x_n": [456, 818, 1078, 1331], "t_2": [456, 818, 1078, 1331], "ewma": [456, 818, 1078, 1331], "alpha_i": [456, 818, 1078, 1331], "t_i": [456, 818, 1078, 1331], "y_i": [456, 818, 1078, 1331], "x_i": [456, 818, 1078, 1331], "quad": [456, 818, 1078, 1331], "370h": [456, 818, 1078, 1331], "4d": [456, 818, 1078, 1331], "292893": [456, 818, 1078, 1331], "492474": [456, 818, 1078, 1331], "254508": [456, 818, 1078, 1331], "bia": [457, 458, 501, 629, 648, 818, 1079, 1080, 1125, 1212, 1234, 1331], "unbias": [457, 458, 818, 1079, 1080, 1331], "963624": [457, 818, 1079, 1331], "928571": [458, 818, 1080, 1331], "wildcard": [459, 708, 750, 751, 754, 755, 768, 793, 818, 935], "regex": [459, 564, 565, 655, 657, 658, 661, 663, 664, 665, 666, 680, 681, 690, 708, 766, 818, 936, 1240, 1242, 1243, 1246, 1248, 1249, 1250, 1251, 1265, 1266, 1275], "aa": [459, 655, 666, 766, 818, 936, 1013, 1240, 1251, 1331], "cc": [459, 766, 818, 936, 1013, 1331], "718282": [460, 818, 1081, 1331], "389056": [460, 818, 1081, 1331], "54": [460, 818, 1125, 1331, 1340], "59815": [460, 818], "extrem": [462, 618, 818, 1084, 1206, 1331], "expressioin": [462, 818, 1084, 1331], "group_col": [465, 729, 818], "g1": [465, 729, 818], "g2": [465, 729, 818], "lt": [465, 729, 818, 1331], "gte": [465, 729, 818], "n_1": [465, 818], "n_2": [465, 818], "n_3": [465, 818], "exprlistnamespac": [467, 818], "divis": [469, 723, 818], "truediv": [469, 818], "subtli": [469, 818], "intuit": [469, 818, 936], "backward_fil": [470, 641, 818], "enclos": [471, 818], "350": [477, 594, 818, 1208, 1331], "650": [477, 594, 818], "850": [477, 594, 818], "9774092659964970114": [478, 818], "13614470193936745724": [478, 818], "1101441246220388612": [478, 818], "11638928888656214026": [478, 818], "13382926553367784577": [478, 818], "bin_count": [480, 818, 1097, 1331], "include_categori": [480, 818, 1097, 1331], "include_breakpoint": [480, 818, 1097, 1331], "occurr": [480, 488, 489, 492, 493, 727, 818, 1097, 1107, 1108, 1113, 1114, 1319, 1331], "interpolationmethod": [483, 818, 1100, 1331], "regrid": [483, 818], "grid": [483, 818], "df_original_grid": [483, 818], "grid_point": [483, 818], "df_new_grid": [483, 818], "a_interpol": [484, 818], "285714": [484, 818, 1101, 1331], "714286": [484, 818, 1101, 1331], "satisfi": [485, 818, 1102, 1331], "conflat": [485, 818], "between_ab": [485, 818], "finit": [487, 723, 746, 818, 1106, 1331], "is_first_distinct": [488, 818, 1107, 1331], "optional_memb": [490, 818, 1110, 1331], "infinit": [491, 723, 818, 1111, 1331], "is_last_distinct": [492, 818, 1113, 1331], "_isnan": [494, 818], "b_isnan": [494, 818], "negat": [495, 593, 818, 1188, 1331], "_is_not_nan": [496, 818], "b_is_not_nan": [496, 818], "_not_nul": [497, 818], "a_not_nul": [497, 818], "b_not_nul": [497, 818], "_isnul": [498, 818], "a_isnul": [498, 818], "b_isnul": [498, 818], "undo": [500, 572, 579, 580, 582, 584, 586, 587, 602, 713, 818], "fisher": [501, 648, 818, 1125, 1234, 1331], "fourth": [501, 818, 1125, 1331], "subtract": [501, 712, 818, 1125, 1331], "distribut": [501, 648, 818, 1125, 1234, 1331], "elimin": [501, 818, 1125, 1331], "bias": [501, 648, 818, 1125, 1234, 1331], "scipi": [501, 648, 818, 1125, 1234, 1331, 1335], "stat": [501, 648, 818, 888, 931, 1125, 1234, 1331], "153061": [501, 818], "blindli": [516, 1138], "worth": [516, 1138], "enough": [516, 648, 818, 1138, 1234, 1331], "concat_list": [516, 765], "exprnamespac": 517, "cheaper": [519, 544, 1141, 1166], "symmetr": [536, 1158], "sdiff": 536, "taken": [539, 686, 1161, 1271], "363961": [541, 1163], "n_field_strategi": [546, 1168], "tostructstrategi": [546, 1168], "first_non_nul": [546, 1168], "max_width": [546, 1168], "pre": [546, 558, 604, 791, 794, 809, 818, 1194, 1331], "obtain": 546, "ok": 546, "longest": 546, "logarithm": [549, 550, 551, 818, 1171, 1172, 1173, 1331], "584963": [549, 818], "30103": [550, 818], "60206": [550, 818], "natur": [551, 818, 1173, 1331], "693147": [551, 818, 1171, 1173, 1331], "098612": [551, 818, 1171, 1173, 1331], "386294": [551, 818, 1173, 1331], "9223372036854775808": [552, 818], "agg_list": [554, 556, 818], "map_batch": [554, 779, 818, 870, 931], "keep_nam": [555, 818], "a_revers": [555, 580, 584, 613, 713, 818], "b_revers": [555, 580, 584, 613, 713, 818], "rstrip": [555, 580, 818], "_revers": [555, 580, 584, 613, 713, 818], "is_elementwis": [556, 818, 935], "returns_scalar": [556, 735, 781, 818, 935], "whole": [556, 650, 651, 663, 818, 919, 931, 1248], "presum": [556, 818], "stai": [556, 818], "elementwis": [556, 617, 618, 619, 621, 625, 632, 818, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1331], "third": [556, 818], "parti": [556, 818], "map_to_scalar": [556, 818], "invok": [556, 818], "assumpt": [556, 818], "someth": [556, 818], "bug": [556, 558, 818, 870, 871, 913, 919, 931, 1176, 1331], "argmax": [556, 818], "remap": [557, 818, 1175, 1331], "lookup": [557, 814, 818, 1175, 1331], "suppos": [558, 818, 1176, 1331], "sqrt": [558, 648, 711, 738, 739, 818, 1176, 1234, 1331], "discourag": [558, 818], "loop": [558, 818], "a_times_2": [558, 818], "tip": [558, 818], "view": [558, 818, 1331], "again": [558, 818], "exprmetanamespac": [562, 566], "foo_bar2": [562, 566], "_foo": 563, "allow_alias": 564, "bare": [564, 936], "foo_": [565, 687, 769], "raise_if_undetermin": 567, "computeerror": [567, 679, 702, 1264, 1287], "e_filt": [567, 569], "e_sum_ov": [567, 569], "e_sum_slic": [567, 569], "groupstorow": 570, "tree": [571, 848, 931], "modulu": [575, 818], "xlog2": [577, 601, 818], "purpos": [578, 818, 839, 850, 931], "x_uniqu": [578, 818], "y_uniqu": [578, 818], "reverse_": [582, 602, 818], "reverse_a": [582, 602, 818], "reverse_b": [582, 602, 818], "prefix_": 583, "prefix_a": 583, "prefix_b": 583, "_suffix": 585, "a_suffix": 585, "b_suffix": 585, "lowercas": [586, 703, 1288], "uppercas": [587, 706, 1291], "to_lowercas": 587, "poison": [588, 589, 818, 1185, 1186, 1331], "nanmax": [588, 589, 818, 1185, 1186, 1331], "inequ": [590, 818], "ne": [591, 818, 1331], "unari": [592, 818], "more_expr": [596, 740, 743, 744, 745, 818], "mapping_strategi": [596, 818], "windowmappingstrategi": [596, 818], "group_to_row": [596, 818], "outcom": [596, 818], "group_dtyp": [596, 818], "warn": [596, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 818, 1331], "_max": [596, 818], "c_max": [596, 818], "_min": [596, 818], "c_min": [596, 818], "sort_bi": [596, 818], "percent": [597, 818, 1190, 1331], "090909": [597, 818], "extract_numb": [600, 818], "scale_negative_even": [600, 818], "expon": [601, 818, 1331], "allow_dupl": [604, 818, 1194, 1331], "duplicateerror": [604, 818, 1194, 1331], "cut": [604, 818, 1194, 1331], "566371": [606, 818], "424778": [606, 818], "283185": [606, 818], "141593": [606, 818, 944, 1331], "rankmethod": [607, 818, 1196, 1331], "ti": [607, 818, 1196, 1331], "competit": [607, 818, 1196, 1331], "highest": [607, 726, 746, 818, 931, 1196, 1331], "immedi": [607, 737, 741, 759, 760, 762, 763, 774, 775, 791, 794, 800, 805, 806, 809, 818, 1196, 1331], "nodefault": [611, 818, 1200, 1331], "_nodefault": [611, 818, 1200, 1331], "no_default": [611, 818, 1200, 1331], "nested_typ": [612, 818, 1201, 1331], "fruits_revers": [613, 818], "cars_revers": [613, 818], "rle_id": [614, 818, 1331], "rle": [615, 818, 1204, 1331], "rle_id_a": [615, 818], "rle_id_ab": [615, 818], "window_s": [617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 795, 796, 818, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1331], "rolling_map": [617, 818, 1205, 1331], "multipli": [617, 618, 619, 621, 625, 630, 632, 634, 711, 818, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1331], "rolling_sum": [618, 818, 1206, 1331], "nansum": [618, 818, 1206, 1331], "warn_if_unsort": [619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 818], "travers": [619, 621, 625, 632, 818, 1207, 1208, 1210, 1213, 1214, 1215, 1331], "vector": [619, 621, 625, 632, 818, 1207, 1208, 1210, 1213, 1214, 1215, 1331], "5h": [619, 621, 623, 625, 627, 630, 632, 634, 818], "rolling_max_bi": [619, 818], "df_tempor": [619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 818], "rolling_row_max": [619, 620, 818], "2h": [619, 620, 621, 622, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 818], "closur": [619, 620, 621, 622, 630, 631, 632, 633, 634, 635, 818], "rolling_mean_bi": [621, 818], "rolling_row_mean": [621, 622, 818], "contribut": [623, 627, 630, 634, 818], "rolling_median_bi": [623, 818], "rolling_row_median": [624, 818], "rolling_min_bi": [625, 818], "rolling_row_min": [625, 626, 818], "rolling_quantile_bi": [627, 818], "625": [627, 818], "rolling_row_quantil": [628, 818], "skew": [629, 818, 1212, 1331], "381802": [629, 818, 1212, 1331], "47033": [629, 818, 1212, 1331], "38180177416060584": [629, 818, 1212, 1331], "47033046033698594": [629, 818, 1212, 1331], "rolling_std_bi": [630, 818], "433013": [630, 818, 896, 931], "rolling_row_std": [630, 631, 818], "rolling_sum_bi": [632, 818], "rolling_row_sum": [632, 633, 818], "39": [632, 633, 770, 818], "57": [632, 633, 818, 1216, 1331, 1340], "63": [632, 633, 818], "69": [632, 633, 818, 1125, 1331], "rolling_var_bi": [634, 818], "1875": [634, 818, 904, 931], "rolling_row_var": [634, 635, 818], "figur": [637, 818, 892, 931, 1217, 1331], "01234": [637, 818, 1217, 1331], "012": [637, 818, 1217, 1331], "1200": [637, 818, 1217, 1331], "searchsortedsid": [639, 818, 1220, 1331], "leftmost": [639, 818, 1220, 1331], "rightmost": [639, 818, 1220, 1331], "six": [639, 818], "extrema": [643, 818, 1228, 1331], "112": [643, 818, 1340], "129": [643, 818], "8589934592": [643, 818], "1073741824": [643, 818], "175201": [647, 818, 1233, 1331], "unimod": [648, 818, 1234, 1331], "skewtest": [648, 818, 1234, 1331], "speak": [648, 818, 1234, 1331], "g_1": [648, 818, 1234, 1331], "m_3": [648, 818, 1234, 1331], "m_2": [648, 818, 1234, 1331], "m_i": [648, 818, 1234, 1331], "sum_": [648, 818, 1234, 1331], "texttt": [648, 818, 1234, 1331], "k_3": [648, 818, 1234, 1331], "k_2": [648, 818, 1234, 1331], "343622": [648, 818], "value1": [651, 818], "value2": [651, 818], "attain": [651, 818], "414214": [652, 818, 1237, 1331], "sensit": [655, 664, 666, 680, 681, 1240, 1249, 1251, 1265, 1266], "ilmsuxu": [655, 663, 664, 666, 680, 681, 1240, 1248, 1249, 1251, 1265, 1266], "default_match": [655, 666], "insensitive_match": [655, 666], "crab": [655, 666, 1240, 1251], "dog": [655, 703, 706, 745, 1240, 1288, 1291], "rab": [655, 683, 1240, 1268], "ascii_case_insensit": [656, 682, 1241, 1267], "aho": [656, 682, 1241, 1267], "corasick": [656, 682, 1241, 1267], "insensit": [656, 664, 680, 681, 682, 936, 1240, 1241, 1249, 1251, 1265, 1266, 1267], "set_fmt_str_length": [656, 682, 1241, 1267], "lyric": [656, 682, 1241, 1267], "everybodi": [656, 682, 1241, 1267], "tell": [656, 682, 1241, 1267], "me": [656, 682, 1241, 1267], "feel": [656, 682, 1241, 1267], "love": [656, 682, 1241, 1267], "tonight": [656, 682, 1241, 1267], "success": [657, 658, 664, 1242, 1243, 1249], "overlap": [657, 658, 664, 1242, 1243, 1249], "bla": [658, 664, 1243, 1249], "asd": [658, 664, 1243, 1249], "678": [658, 664, 1243, 1249], "910t": [658, 664, 1243, 1249], "count_digit": 658, "dbc": [658, 1243], "3xy": [658, 1243], "1zy3": [658, 1243], "strings_hex": 660, "666f6f": [660, 1245], "626172": [660, 1245], "mango": [661, 690, 1246, 1275], "has_suffix": 661, "le": [661, 818, 1331], "nu": 661, "group_index": [663, 1248], "captur": [663, 665, 680, 681, 1248, 1250, 1265, 1266], "nthose": [663, 1248], "nodd": [663, 1248], "nthe": [663, 1248], "odd": 663, "vote": [663, 665, 1248, 1250], "ballon_dor": [663, 665, 1248, 1250], "404": [663, 665, 1248, 1250], "ref": [663, 665, 1248, 1250], "candid": [663, 665, 1248, 1250], "messi": [663, 665, 1248, 1250], "ronaldo": [663, 1248], "haystack": [664, 1249], "email": [664, 1249], "real": [664, 1249], "some_account": [664, 1249], "somewher": [664, 1249], "net": [664, 1249], "jkl": [664, 1249], "uvw": [664, 1249], "co": [664, 818, 1249, 1331], "uk": [664, 1249], "address": 664, "xi": [664, 1249], "quantifi": [664, 1249], "email_part": [664, 1249], "extracted_nr": 664, "unnam": [665, 1250], "weghorst": [665, 1250], "err": 665, "lobster": [666, 1251], "crustaceon": [666, 1251], "pat": [666, 1251], "bc": [666, 681, 801, 1251], "aeiuo": [666, 1251], "find_pat": 666, "fewer": [667, 698, 850, 931, 1252, 1283], "pear": [667, 686, 698, 1252, 1271, 1283], "papaya": [667, 686, 698, 1252, 1271, 1283], "dragonfruit": [667, 686, 698, 1252, 1271, 1283], "s_head_5": 667, "papai": [667, 1252], "drago": [667, 1252], "s_head_n": 667, "pea": 667, "papa": 667, "dragon": 667, "json_path_match": [668, 1253], "jsonpath": [668, 670, 1253, 1255], "json_decod": [669, 1254], "json_path": [670, 1255], "json_val": [670, 1255], "len_char": [671, 676, 1256, 1261], "_o": [671, 672, 1256, 1257], "caf\u00e9": [671, 672, 936, 1256, 1257], "345": [671, 672, 1256, 1257], "\u6771\u4eac": [671, 672, 936, 1256, 1257], "n_byte": [671, 672], "n_char": [671, 672], "fill_char": [674, 677, 678, 684, 1259, 1262, 1263, 1269], "justifi": [674, 684, 1259, 1269], "pad_end": [674, 678, 1259, 1263], "strip_chars_start": [675, 693, 695, 1260], "pad": [677, 678, 707, 1262, 1263, 1292], "reach": [677, 678, 707, 1262, 1263, 1292], "pad_start": [677, 684, 707, 1262, 1269, 1292], "cow": [677, 678, 1262, 1263], "monkei": [677, 678, 1262, 1263], "hippopotamu": [677, 678, 1262, 1263], "zfill": [678, 730, 818, 1263], "radix": [679, 702, 1264, 1287], "parseerror": [679, 702, 1264, 1287], "to_integ": [679, 1264], "silent": [679, 702, 1264, 1287], "replace_al": [680, 1265], "dollar": [680, 681, 1265, 1266], "123abc": [680, 1265, 1266], "abc456": [680, 1265, 1266], "hat": [680, 681, 1265, 1266], "hut": [680, 681, 1265, 1266], "vowel": [680, 681, 1265, 1266], "bad": [680, 681, 1265, 1266], "bud": [680, 681, 1265, 1266], "citi": [680, 681], "philadelphia": [680, 681], "season": [680, 681], "spring": [680, 681], "summer": [680, 681], "autumn": [680, 681], "winter": [680, 681], "weather": [680, 681, 1265, 1266], "raini": [680, 681, 1265, 1266], "sunni": [680, 681, 1265, 1266], "cloudi": [680, 681], "snowi": [680, 681], "foggi": [680, 681, 1265, 1266], "abcabc": 681, "123a123": 681, "replace_with": [682, 1267], "broadcast": [682, 936, 1267], "removes_pronoun": 682, "man": [683, 1268], "ana": [683, 1268], "oof": [683, 1268], "anan": [683, 1268], "am": [683, 1268], "strip_chars_end": [685, 694, 696, 1270], "ear": [686, 698, 1271], "aya": [686, 1271, 1283], "uit": [686, 1271], "ya": [686, 1271], "onf": [686, 1271], "foo_bar_baz": 687, "split_inclus": 687, "bar_": 687, "a_1": [688, 1273, 1306, 1331], "d_4": [688, 1273], "rename_field": [688, 689, 1012, 1194, 1273, 1274, 1331], "first_part": [688, 689, 1273, 1274], "second_part": [688, 689, 1273, 1274], "remaind": [689, 1274], "app": [690, 1275], "has_prefix": 690, "strip_char": [691, 1276], "nworld": 692, "foo_strip": 692, "ow": 692, "hell": [692, 1277], "rld": [692, 694, 1279], "strip_suffix": [693, 695], "foo_strip_end": 693, "oldw": 693, "he": 693, "abcdeff": 693, "fed": 693, "strip_prefix": [694, 696], "tworld": [694, 1277, 1279], "foo_strip_start": 694, "wod": [694, 1279], "aabcdef": 694, "cba": 694, "foobar": [695, 696, 1280, 1281], "foofoobar": [695, 1280], "foobarbar": [696, 1281], "polarstemporaltyp": [697, 1282], "penalti": [697, 699, 700, 1282, 1284, 1285], "clean": [697, 699, 700, 1282, 1284, 1285], "beforehand": [697, 699, 700, 1282, 1284, 1285], "certainli": [697, 699, 700, 1282, 1284, 1285], "00z": [697, 700, 1282, 1285], "sun": [697, 1282], "jul": [697, 1282], "s_tail_5": 698, "apaya": [698, 1283], "s_tail_n": 698, "paya": 698, "nfruit": 698, "inference_length": [701, 1286], "3420": [701, 1286], "120134": [701, 1286], "3212": [701, 1286], "143": [701, 1286, 1340], "numbers_decim": 701, "110": [702, 1287], "fa1e": [702, 1287], "ff00": [702, 1287], "cafe": [702, 1287], "64030": [702, 1287], "65280": [702, 1287], "51966": [702, 1287], "variant": [703, 705, 706, 1112, 1331], "foo_low": 703, "titlecas": [705, 1290], "sing": [705, 1290], "welcom": [705, 1290], "THERE": [705, 1290], "NO": [705, 936, 1290], "foo_titl": 705, "foo_upp": 706, "999999": [707, 761, 804, 805, 806, 936, 1292], "0123": [707, 1292], "more_nam": [708, 814], "__getitem__": 708, "struct_col": [708, 710], "cd": [708, 710, 936], "expans": 708, "www": 710, "xxx": 710, "yyi": 710, "zzz": 710, "obvious": 710, "structfieldnotfounderror": 710, "coord": 711, "y_mul": 711, "761594": [719, 818, 1304, 1331], "replic": [720, 818, 1313, 1331], "vals_phys": [720, 818], "_top_by_a": [722, 818], "_top_by_b": [722, 818], "a_top_by_a": [722, 818], "b_top_by_a": [722, 818], "c_top_by_a": [722, 818], "a_top_by_b": [722, 818], "b_top_by_b": [722, 818], "c_top_by_b": [722, 818], "floordiv": [723, 818], "ieee": [723, 818], "754": [723, 818], "mathemat": [723, 765, 818], "undefin": [723, 818], "On": [723, 818], "operand": [723, 818], "infin": [723, 818], "value_count": [725, 818, 1331], "9223372036854775807": [726, 818], "binary_str": [730, 818], "250": [730, 818, 1208, 1331, 1340], "bin_x": [730, 818], "bin_i": [730, 818], "xor_xi": [730, 818], "bin_xor_xi": [730, 818], "00001010": [730, 818], "00001011": [730, 818], "00001000": [730, 818], "00000010": [730, 818], "11111010": [730, 818], "00000011": [730, 818], "249": [730, 818], "11111001": [730, 818], "01000010": [730, 818], "00000100": [730, 818], "01000110": [730, 818], "AND": [731, 732, 936], "OR": [733, 734, 853, 931, 936], "any_horizont": 733, "polarsintegertyp": [737, 774, 775], "arctan": [738, 739, 818, 1331], "angl": [738, 739], "plane": [738, 739], "rai": [738, 739], "tworoottwo": [738, 739], "arctan2d": 738, "atan2d": [738, 739], "atan2": [738, 739], "135": [738, 739], "356194": [738, 739], "arctan2": 739, "arg_tru": [741, 818, 1331], "oppos": 742, "mimic": 744, "a_lag_": 744, "a_rol": 744, "swim": 745, "walk": 745, "full_sent": 745, "correlationmethod": 746, "propagate_nan": 746, "spearman": 746, "544705": 746, "covari": [748, 796, 818, 935], "acc": [750, 751, 754, 755, 768, 793], "include_init": [750, 754], "accumul": [750, 751, 754, 755, 768, 793], "fn": [750, 751, 754, 755, 768, 793], "new_valu": [750, 751, 754, 755, 768, 793], "cum_reduc": [750, 755], "cumsum_horizont": 752, "cum_fold": 754, "cum_sum_horizont": 757, "granular": 759, "finer": 759, "permut": 759, "1985": [759, 762], "australia": 761, "sydnei": 761, "aedt": 761, "america": 762, "new_york": 762, "est": 762, "contrast": 764, "sometim": [764, 817], "tbl_width_char": 764, "120": 764, "add_week": 764, "add_dai": 764, "add_second": 764, "add_milli": 764, "add_hour": 764, "002": [764, 1063, 1064, 1066], "add_calendar_dai": 764, "add_calendar_month": 764, "mo": 764, "add_calendar_year": 764, "a_b_doubl": 765, "presenc": [767, 776, 790, 936, 1094, 1331], "f_string": 769, "placehold": 769, "hello_": 769, "_world": 769, "_bar_": 769, "foo_a_bar_1": 769, "foo_b_bar_2": 769, "foo_c_bar_3": 769, "timestep": 770, "1666683077": 770, "1666683099": 770, "12345": [770, 992, 1089, 1216, 1331], "12346": 770, "agg_group": [771, 818], "allow_object": 778, "valueexcept": 778, "test_func": 780, "list_of_seri": 781, "my_custom_aggreg": 781, "understood": 781, "power": [798, 1331], "a_a": 798, "a_txt": 798, "605551": 799, "605551275463989": 799, "my_struct": 800, "elif": 808, "met": 808, "own": [808, 1311, 1331, 1340], "isn": 808, "technic": 814, "further": 814, "columnfactori": 814, "__call__": 814, "helper": 814, "__getattr__": 814, "idiomat": [814, 919], "prototyp": 814, "keystrok": 814, "drawback": 814, "readabl": 814, "and_": 818, "arcco": [818, 1331], "arccosh": [818, 1331], "arcsin": [818, 1331], "arcsinh": [818, 1331], "arctanh": [818, 1331], "arg_max": [818, 1331], "arg_min": [818, 1331], "arg_sort": [818, 1331], "arg_uniqu": [818, 1331], "cbrt": [818, 1331], "clip_max": [818, 1331], "clip_min": [818, 1331], "cosh": [818, 1331], "cot": [818, 1331], "cumcount": 818, "cummax": [818, 1331], "cummin": [818, 1331], "cumprod": [818, 1331], "cumsum": [818, 1331], "cumulative_ev": [818, 1331], "entropi": [818, 1331], "eq_miss": [818, 1331], "ewm_mean": [818, 1331], "ewm_mean_bi": [818, 1331], "ewm_std": [818, 1331], "ewm_var": [818, 1331], "extend_const": [818, 1331], "flatten": 818, "from_json": 818, "ge": [818, 1331], "gt": [818, 1331], "has_nul": [818, 1094, 1331], "hist": [818, 1331, 1335], "implod": [818, 1331], "inspect": [818, 931], "interpolate_bi": [818, 1331], "is_between": [818, 1331], "is_finit": [818, 1331], "is_first": [818, 1331], "is_infinit": [818, 1331], "is_last": [818, 1331], "is_nan": [818, 1331], "is_not": 818, "is_not_nan": [818, 1331], "is_not_nul": [818, 1331], "kurtosi": [818, 1331], "log10": [818, 1331], "log1p": [818, 1331], "map_alia": 818, "map_dict": [818, 1331], "mod": 818, "mul": 818, "nan_max": [818, 1331], "nan_min": [818, 1331], "ne_miss": [818, 1331], "or_": 818, "pct_chang": [818, 1331], "peak_max": [818, 1331], "peak_min": [818, 1331], "pow": [818, 1331], "register_plugin": 818, "lib": [818, 1305, 1331], "input_wildcard_expans": [818, 935], "cast_to_supertyp": [818, 935], "pass_name_to_appli": [818, 935], "changes_length": [818, 935], "register_plugin_funct": [818, 935], "guid": [818, 935, 1340], "serializ": [818, 935], "ran": [818, 935], "highli": [818, 935], "unsaf": [818, 935], "reinterpret": [818, 1331], "repeat_bi": 818, "rolling_appli": [818, 1331], "rolling_max": [818, 1331], "rolling_mean": [818, 1331], "rolling_median": [818, 1331], "rolling_min": [818, 1331], "rolling_quantil": [818, 1331], "rolling_skew": [818, 1331], "rolling_std": [818, 1331], "rolling_var": [818, 1331], "round_sig_fig": [818, 1331], "search_sort": [818, 1331], "shrink_dtyp": [818, 1331], "sin": [818, 1331], "sinh": [818, 1331], "tan": [818, 1331], "to_phys": [818, 989, 1331], "unique_count": [818, 1331], "xor": 818, "expos": 830, "miscellan": 830, "parametr": 830, "hit": [835, 931], "node": [835, 839, 863, 870, 871, 875, 880, 882, 931], "job": [835, 931], "background": [839, 931], "_eager": [839, 931], "_kwarg": [839, 931], "inprocessqueri": [839, 931], "cancel": [839, 931], "set_streaming_chunk_s": [839, 931], "collect_all_async": [840, 931], "repeatedli": [841, 847, 885, 905, 931], "snippet": [846, 931], "explainformat": [848, 931], "plain": [848, 931], "tree_format": [848, 931], "Be": [850, 931], "suscept": [850, 931], "lazygroupbi": [856, 857, 858, 859, 860, 861, 884, 931], "other_lf": [865, 931], "jan": [866, 931], "1st": [866, 931], "12th": [866, 931], "validate_output_schema": [870, 871, 931], "streamabl": [870, 871, 875, 931], "paramount": [870, 871, 931], "elig": [870, 871, 931], "invari": [871, 931], "upheld": [871, 931], "100_000": [871, 931], "199998": [871, 931], "199996": [871, 931], "199994": [871, 931], "199992": [871, 931], "show_plot": [880, 931], "truncate_nod": [880, 931], "figsiz": [880, 892, 931], "gantt": [880, 931], "group_by_partit": [880, 931], "470": [880, 931], "475": [880, 931], "1964": [880, 931], "swap": [882, 931], "mapfunct": [888, 931], "dataframescan": [888, 931], "output_schema": [888, 931], "output_path": [892, 931], "raw_output": [892, 931], "render": [892, 931], "download": [892, 931], "888": [895, 931], "freeli": [895, 931, 936], "c_c_c": [895, 931], "290994": [896, 931], "118034": [896, 931], "new_lf": [903, 931], "extern": [908, 931], "lf_other": [908, 931], "afoo": [908, 931], "cfoo": [908, 931], "train_lf": [908, 931], "feature_0": [908, 931], "feature_1": [908, 931], "test_lf": [908, 931], "_train": [908, 931], "feature_0_train": [908, 931], "opaqu": 919, "my_column": 919, "struct_seri": 919, "lf5": 931, "lf6": 931, "sink_csv": 931, "sink_ipc": 931, "sink_ndjson": 931, "sink_parquet": 931, "with_context": 931, "resourc": 935, "plugin_path": 935, "function_nam": 935, "emploi": 936, "complement": 936, "plenti": 936, "cde": 936, "fgg": 936, "jjk": 936, "lmn": 936, "opp": 936, "qqr": 936, "by_dtyp": 936, "as_expr": 936, "dispatch": 936, "1_234_500": 936, "5_000_555": 936, "1234500": 936, "5000555": 936, "ascii_onli": 936, "ignore_spac": 936, "alphabet": [936, 1340], "accent": 936, "idiograph": 936, "no1": 936, "espresso": 936, "latt": 936, "mocha": 936, "hmm": 936, "\u90fd\u5e02": 936, "\u5927\u962a": 936, "\u4eac\u90fd": 936, "kanji": 936, "alphanumer": 936, "1st_col": 936, "00prefix": 936, "bb": [936, 1013, 1331], "n_even": 936, "invert": 936, "by_nam": 936, "by_index": 936, "4_500_000": 936, "4500000": 936, "3265500": 936, "c00": 936, "c01": 936, "c02": 936, "c96": 936, "c97": 936, "c98": 936, "c99": 936, "c20": 936, "c40": 936, "c60": 936, "c80": 936, "c75": 936, "c50": 936, "c25": 936, "ones": 936, "51": 936, "c03": 936, "c05": 936, "c93": 936, "c95": 936, "46": 936, "require_al": 936, "zap": 936, "moos": 936, "bear": 936, "2031": 936, "tstamp_tokyo": 936, "123465": 936, "tstamp_utc": 936, "999000": 936, "666000": 936, "tstamp": 936, "600000": 936, "123000": 936, "666": 936, "0005": 936, "5555": 936, "00050": 936, "55550": 936, "\u0967\u096f\u096f\u096f": 936, "\u0968\u0966\u096d\u096d": 936, "3000": 936, "td1": 936, "987000": 936, "td2": 936, "456789": [936, 1055], "td3": 936, "2m": [936, 1043], "456m": 936, "7d": 936, "456789\u00b5": 936, "18d": 936, "999999\u00b5": 936, "23h": 936, "987m": 936, "14d": 936, "16h": 936, "39m": 936, "21d": 936, "456001\u00b5": 936, "simpler": 936, "expand_selector": 936, "broader": 936, "colz": [936, 1340], "everyth": 936, "signed_integ": 936, "unsigned_integ": 936, "is_selector": 936, "obj": 936, "3456": 936, "7654": 936, "4321": 936, "include_categor": 936, "2345": 936, "292432": [945, 1331], "549306": [949, 1331], "innter": 963, "field_2": [976, 1168], "n00": [976, 1168], "n01": [976, 1168], "n02": [976, 1168], "hexadecim": [980, 981], "aaaa": [980, 981], "8a": [980, 981], "aad": [980, 981], "invalid_valu": 980, "44225": [991, 1331], "56789": [992, 1089, 1216, 1331], "901234": [992, 1089, 1216, 1331], "1232e": [999, 1001, 1331], "1656e15": [1001, 1331], "break_point_label": [1012, 1194, 1331], "break_point": [1012, 1097, 1194, 1331], "category_label": [1012, 1194, 1331], "581139": [1013, 1331], "arraylik": [1015, 1331], "ser": [1024, 1025, 1058], "kathmandu": [1024, 1025, 1058], "0545": [1024, 1025, 1058], "500m": [1037, 1040, 1048], "date_minus_1y_2mon": 1050, "165": [1054, 1068], "round_str": 1054, "round_td": 1054, "111110": 1055, "765431": 1055, "11111": 1055, "timestamp_n": 1059, "978307200000000000": 1059, "978393600000000000": 1059, "978480000000000000": 1059, "005": [1074, 1331], "06293300616044681": [1074, 1331], "65": [1074, 1331], "8568409950394724": [1074, 1331], "4000000": [1076, 1331], "814697265625": [1076, 1331], "085537": [1081, 1331], "sorted_asc": [1088, 1331], "sorted_desc": [1088, 1331], "bitmask": [1094, 1331], "absenc": [1094, 1331], "confirm": [1094, 1331], "10734580197236529959": [1095, 1331], "3022416320763508302": [1095, 1331], "13756996518000038261": [1095, 1331], "is_signed_integ": [1112, 1331], "is_unsigned_integ": [1112, 1331], "grade": [1125, 1331], "79": [1125, 1331], "93": [1125, 1331], "0522623626787952": [1125, 1331], "9477376373212048": [1125, 1331], "1040361802642726": [1125, 1331], "2147483648": [1174, 1331], "pythonliter": [1177, 1178, 1179, 1180, 1219, 1331], "166667": [1190, 1331], "142857": [1190, 1331], "1152921504606846976": [1198, 1331], "17293822569102704640": [1198, 1331], "18446744073709551614": [1198, 1331], "150": [1208, 1331], "450": [1208, 1331], "dev": [1213, 1331], "527525": [1213, 1331], "frequent": [1219, 1222, 1331], "2246e": [1232, 1303, 1331], "34776706224699483": [1234, 1331], "732051": [1237, 1331], "idx_rx": 1251, "idx_lit": 1251, "3rd": [1252, 1283], "pap": 1252, "dragonfr": 1252, "orld": 1278, "gonfruit": 1283, "6331e16": [1303, 1331], "int64arrai": [1305, 1331], "a_2": [1306, 1331], "a_3": [1306, 1331], "s_from_str_repr": [1308, 1331], "zero_copy_onli": [1311, 1331], "127": [1318, 1331], "seriesview": [1321, 1331], "dtype_if_empti": 1331, "position": 1331, "scenario": 1331, "chunk_length": 1331, "get_chunk": 1331, "has_valid": 1331, "is_boolean": 1331, "is_float": 1331, "is_integ": 1331, "is_numer": [1331, 1340], "is_sort": 1331, "is_tempor": 1331, "is_utf8": 1331, "new_from_index": 1331, "histogram": [1331, 1335], "kde": [1331, 1335], "series_equ": 1331, "set_at_idx": 1331, "two_a": 1339, "__enter__": 1339, "__exit__": 1339, "exc_typ": 1339, "baseexcept": 1339, "exc_val": 1339, "exc_tb": 1339, "tracebacktyp": 1339, "machin": 1340, "xdist": 1340, "hardwar": 1340, "setup": 1340, "sec": 1340, "numeric_dtyp": 1340, "test_numer": 1340, "col4": 1340, "29096": 1340, "485": 1340, "2147483647": 1340, "8257e14": 1340, "7508": 1340, "37338": 1340, "7264": 1340, "16996": 1340, "121": 1340, "361": 1340, "63204": 1340, "1443e235": 1340, "conform": 1340, "st": 1340, "ascii_lett": 1340, "id_char": 1340, "ccy": 1340, "sampled_from": 1340, "gbp": 1340, "jpy": 1340, "price": 1340, "min_valu": 1340, "max_valu": 1340, "test_price_calcul": 1340, "a101": 1340, "8nin": 1340, "qhoo": 1340, "714": 1340, "544": 1340, "i0e0": 1340, "uint8_pair": 1340, "drawfn": 1340, "uint": 1340, "zip": 1340, "test_miscellan": 1340, "235": 1340, "87": 1340, "186": 1340, "174": 1340, "179": 1340, "213": 1340, "149": 1340, "221": 1340, "86": 1340, "255": 1340}, "objects": {"polars.Config": [[2, 0, 1, "", "activate_decimals"], [3, 0, 1, "", "load"], [4, 0, 1, "", "load_from_file"], [5, 0, 1, "", "restore_defaults"], [6, 0, 1, "", "save"], [7, 0, 1, "", "save_to_file"], [8, 0, 1, "", "set_ascii_tables"], [9, 0, 1, "", "set_auto_structify"], [10, 0, 1, "", "set_decimal_separator"], [11, 0, 1, "", "set_float_precision"], [12, 0, 1, "", "set_fmt_float"], [13, 0, 1, "", "set_fmt_str_lengths"], [14, 0, 1, "", "set_fmt_table_cell_list_len"], [15, 0, 1, "", "set_streaming_chunk_size"], [16, 0, 1, "", "set_tbl_cell_alignment"], [17, 0, 1, "", "set_tbl_cell_numeric_alignment"], [18, 0, 1, "", "set_tbl_cols"], [19, 0, 1, "", "set_tbl_column_data_type_inline"], [20, 0, 1, "", "set_tbl_dataframe_shape_below"], [21, 0, 1, "", "set_tbl_formatting"], [22, 0, 1, "", "set_tbl_hide_column_data_types"], [23, 0, 1, "", "set_tbl_hide_column_names"], [24, 0, 1, "", "set_tbl_hide_dataframe_shape"], [25, 0, 1, "", "set_tbl_hide_dtype_separator"], [26, 0, 1, "", "set_tbl_rows"], [27, 0, 1, "", "set_tbl_width_chars"], [28, 0, 1, "", "set_thousands_separator"], [29, 0, 1, "", "set_trim_decimal_zeros"], [30, 0, 1, "", "set_verbose"], [31, 0, 1, "", "state"]], "polars.DataFrame": [[161, 0, 1, "", "__dataframe__"], [162, 0, 1, "", "apply"], [163, 0, 1, "", "approx_n_unique"], [164, 0, 1, "", "bottom_k"], [165, 0, 1, "", "cast"], [166, 0, 1, "", "clear"], [167, 0, 1, "", "clone"], [168, 1, 1, "", "columns"], [169, 0, 1, "", "corr"], [170, 0, 1, "", "count"], [171, 0, 1, "", "describe"], [172, 0, 1, "", "deserialize"], [173, 0, 1, "", "drop"], [174, 0, 1, "", "drop_in_place"], [175, 0, 1, "", "drop_nulls"], [176, 1, 1, "", "dtypes"], [177, 0, 1, "", "equals"], [178, 0, 1, "", "estimated_size"], [179, 0, 1, "", "explode"], [180, 0, 1, "", "extend"], [181, 0, 1, "", "fill_nan"], [182, 0, 1, "", "fill_null"], [183, 0, 1, "", "filter"], [184, 0, 1, "", "find_idx_by_name"], [185, 1, 1, "", "flags"], [186, 0, 1, "", "fold"], [187, 0, 1, "", "frame_equal"], [188, 0, 1, "", "gather_every"], [189, 0, 1, "", "get_column"], [190, 0, 1, "", "get_column_index"], [191, 0, 1, "", "get_columns"], [192, 0, 1, "", "glimpse"], [193, 0, 1, "", "group_by"], [194, 0, 1, "", "group_by_dynamic"], [195, 0, 1, "", "group_by_rolling"], [196, 0, 1, "", "groupby"], [197, 0, 1, "", "groupby_dynamic"], [198, 0, 1, "", "groupby_rolling"], [199, 0, 1, "", "hash_rows"], [200, 0, 1, "", "head"], [201, 1, 1, "", "height"], [202, 0, 1, "", "hstack"], [203, 0, 1, "", "insert_at_idx"], [204, 0, 1, "", "insert_column"], [205, 0, 1, "", "interpolate"], [206, 0, 1, "", "is_duplicated"], [207, 0, 1, "", "is_empty"], [208, 0, 1, "", "is_unique"], [209, 0, 1, "", "item"], [210, 0, 1, "", "iter_columns"], [211, 0, 1, "", "iter_rows"], [212, 0, 1, "", "iter_slices"], [213, 0, 1, "", "join"], [214, 0, 1, "", "join_asof"], [215, 0, 1, "", "lazy"], [216, 0, 1, "", "limit"], [217, 0, 1, "", "map_rows"], [218, 0, 1, "", "max"], [219, 0, 1, "", "max_horizontal"], [220, 0, 1, "", "mean"], [221, 0, 1, "", "mean_horizontal"], [222, 0, 1, "", "median"], [223, 0, 1, "", "melt"], [224, 0, 1, "", "merge_sorted"], [225, 0, 1, "", "min"], [226, 0, 1, "", "min_horizontal"], [227, 0, 1, "", "n_chunks"], [228, 0, 1, "", "n_unique"], [229, 0, 1, "", "null_count"], [230, 0, 1, "", "partition_by"], [231, 0, 1, "", "pipe"], [232, 0, 1, "", "pivot"], [233, 0, 1, "", "product"], [234, 0, 1, "", "quantile"], [235, 0, 1, "", "rechunk"], [236, 0, 1, "", "rename"], [237, 0, 1, "", "replace"], [238, 0, 1, "", "replace_at_idx"], [239, 0, 1, "", "replace_column"], [240, 0, 1, "", "reverse"], [241, 0, 1, "", "rolling"], [242, 0, 1, "", "row"], [243, 0, 1, "", "rows"], [244, 0, 1, "", "rows_by_key"], [245, 0, 1, "", "sample"], [246, 1, 1, "", "schema"], [247, 0, 1, "", "select"], [248, 0, 1, "", "select_seq"], [249, 0, 1, "", "serialize"], [250, 0, 1, "", "set_sorted"], [251, 1, 1, "", "shape"], [252, 0, 1, "", "shift"], [253, 0, 1, "", "shift_and_fill"], [254, 0, 1, "", "shrink_to_fit"], [255, 0, 1, "", "slice"], [256, 0, 1, "", "sort"], [257, 0, 1, "", "sql"], [258, 0, 1, "", "std"], [259, 0, 1, "", "sum"], [260, 0, 1, "", "sum_horizontal"], [261, 0, 1, "", "tail"], [262, 0, 1, "", "take_every"], [263, 0, 1, "", "to_arrow"], [264, 0, 1, "", "to_dict"], [265, 0, 1, "", "to_dicts"], [266, 0, 1, "", "to_dummies"], [267, 0, 1, "", "to_init_repr"], [268, 0, 1, "", "to_jax"], [269, 0, 1, "", "to_numpy"], [270, 0, 1, "", "to_pandas"], [271, 0, 1, "", "to_series"], [272, 0, 1, "", "to_struct"], [273, 0, 1, "", "to_torch"], [274, 0, 1, "", "top_k"], [275, 0, 1, "", "transpose"], [276, 0, 1, "", "unique"], [277, 0, 1, "", "unnest"], [278, 0, 1, "", "unstack"], [279, 0, 1, "", "update"], [280, 0, 1, "", "upsample"], [281, 0, 1, "", "var"], [282, 0, 1, "", "vstack"], [283, 1, 1, "", "width"], [284, 0, 1, "", "with_columns"], [285, 0, 1, "", "with_columns_seq"], [286, 0, 1, "", "with_row_count"], [287, 0, 1, "", "with_row_index"], [32, 0, 1, "", "write_avro"], [33, 0, 1, "", "write_clipboard"], [34, 0, 1, "", "write_csv"], [35, 0, 1, "", "write_database"], [36, 0, 1, "", "write_delta"], [37, 0, 1, "", "write_excel"], [38, 0, 1, "", "write_ipc"], [39, 0, 1, "", "write_ipc_stream"], [40, 0, 1, "", "write_json"], [41, 0, 1, "", "write_ndjson"], [42, 0, 1, "", "write_parquet"]], "polars.Expr": [[318, 0, 1, "", "abs"], [319, 0, 1, "", "add"], [320, 0, 1, "", "agg_groups"], [321, 0, 1, "", "alias"], [322, 0, 1, "", "all"], [323, 0, 1, "", "and_"], [324, 0, 1, "", "any"], [325, 0, 1, "", "append"], [326, 0, 1, "", "apply"], [327, 0, 1, "", "approx_n_unique"], [328, 0, 1, "", "arccos"], [329, 0, 1, "", "arccosh"], [330, 0, 1, "", "arcsin"], [331, 0, 1, "", "arcsinh"], [332, 0, 1, "", "arctan"], [333, 0, 1, "", "arctanh"], [334, 0, 1, "", "arg_max"], [335, 0, 1, "", "arg_min"], [336, 0, 1, "", "arg_sort"], [337, 0, 1, "", "arg_true"], [338, 0, 1, "", "arg_unique"], [363, 0, 1, "", "backward_fill"], [369, 0, 1, "", "bottom_k"], [370, 0, 1, "", "bottom_k_by"], [371, 0, 1, "", "cast"], [374, 0, 1, "", "cbrt"], [375, 0, 1, "", "ceil"], [376, 0, 1, "", "clip"], [377, 0, 1, "", "clip_max"], [378, 0, 1, "", "clip_min"], [379, 0, 1, "", "cos"], [380, 0, 1, "", "cosh"], [381, 0, 1, "", "cot"], [382, 0, 1, "", "count"], [383, 0, 1, "", "cum_count"], [384, 0, 1, "", "cum_max"], [385, 0, 1, "", "cum_min"], [386, 0, 1, "", "cum_prod"], [387, 0, 1, "", "cum_sum"], [388, 0, 1, "", "cumcount"], [389, 0, 1, "", "cummax"], [390, 0, 1, "", "cummin"], [391, 0, 1, "", "cumprod"], [392, 0, 1, "", "cumsum"], [393, 0, 1, "", "cumulative_eval"], [394, 0, 1, "", "cut"], [395, 0, 1, "", "degrees"], [396, 0, 1, "", "deserialize"], [397, 0, 1, "", "diff"], [398, 0, 1, "", "dot"], [399, 0, 1, "", "drop_nans"], [400, 0, 1, "", "drop_nulls"], [452, 0, 1, "", "entropy"], [453, 0, 1, "", "eq"], [454, 0, 1, "", "eq_missing"], [455, 0, 1, "", "ewm_mean"], [456, 0, 1, "", "ewm_mean_by"], [457, 0, 1, "", "ewm_std"], [458, 0, 1, "", "ewm_var"], [459, 0, 1, "", "exclude"], [460, 0, 1, "", "exp"], [461, 0, 1, "", "explode"], [462, 0, 1, "", "extend_constant"], [463, 0, 1, "", "fill_nan"], [464, 0, 1, "", "fill_null"], [465, 0, 1, "", "filter"], [466, 0, 1, "", "first"], [467, 0, 1, "", "flatten"], [468, 0, 1, "", "floor"], [469, 0, 1, "", "floordiv"], [470, 0, 1, "", "forward_fill"], [471, 0, 1, "", "from_json"], [472, 0, 1, "", "gather"], [473, 0, 1, "", "gather_every"], [474, 0, 1, "", "ge"], [475, 0, 1, "", "get"], [476, 0, 1, "", "gt"], [477, 0, 1, "", "has_nulls"], [478, 0, 1, "", "hash"], [479, 0, 1, "", "head"], [480, 0, 1, "", "hist"], [481, 0, 1, "", "implode"], [482, 0, 1, "", "inspect"], [483, 0, 1, "", "interpolate"], [484, 0, 1, "", "interpolate_by"], [485, 0, 1, "", "is_between"], [486, 0, 1, "", "is_duplicated"], [487, 0, 1, "", "is_finite"], [488, 0, 1, "", "is_first"], [489, 0, 1, "", "is_first_distinct"], [490, 0, 1, "", "is_in"], [491, 0, 1, "", "is_infinite"], [492, 0, 1, "", "is_last"], [493, 0, 1, "", "is_last_distinct"], [494, 0, 1, "", "is_nan"], [495, 0, 1, "", "is_not"], [496, 0, 1, "", "is_not_nan"], [497, 0, 1, "", "is_not_null"], [498, 0, 1, "", "is_null"], [499, 0, 1, "", "is_unique"], [500, 0, 1, "", "keep_name"], [501, 0, 1, "", "kurtosis"], [502, 0, 1, "", "last"], [503, 0, 1, "", "le"], [504, 0, 1, "", "len"], [505, 0, 1, "", "limit"], [549, 0, 1, "", "log"], [550, 0, 1, "", "log10"], [551, 0, 1, "", "log1p"], [552, 0, 1, "", "lower_bound"], [553, 0, 1, "", "lt"], [554, 0, 1, "", "map"], [555, 0, 1, "", "map_alias"], [556, 0, 1, "", "map_batches"], [557, 0, 1, "", "map_dict"], [558, 0, 1, "", "map_elements"], [559, 0, 1, "", "max"], [560, 0, 1, "", "mean"], [561, 0, 1, "", "median"], [574, 0, 1, "", "min"], [575, 0, 1, "", "mod"], [576, 0, 1, "", "mode"], [577, 0, 1, "", "mul"], [578, 0, 1, "", "n_unique"], [588, 0, 1, "", "nan_max"], [589, 0, 1, "", "nan_min"], [590, 0, 1, "", "ne"], [591, 0, 1, "", "ne_missing"], [592, 0, 1, "", "neg"], [593, 0, 1, "", "not_"], [594, 0, 1, "", "null_count"], [595, 0, 1, "", "or_"], [596, 0, 1, "", "over"], [597, 0, 1, "", "pct_change"], [598, 0, 1, "", "peak_max"], [599, 0, 1, "", "peak_min"], [600, 0, 1, "", "pipe"], [601, 0, 1, "", "pow"], [602, 0, 1, "", "prefix"], [603, 0, 1, "", "product"], [604, 0, 1, "", "qcut"], [605, 0, 1, "", "quantile"], [606, 0, 1, "", "radians"], [607, 0, 1, "", "rank"], [608, 0, 1, "", "rechunk"], [609, 0, 1, "", "reinterpret"], [610, 0, 1, "", "repeat_by"], [611, 0, 1, "", "replace"], [612, 0, 1, "", "reshape"], [613, 0, 1, "", "reverse"], [614, 0, 1, "", "rle"], [615, 0, 1, "", "rle_id"], [616, 0, 1, "", "rolling"], [617, 0, 1, "", "rolling_apply"], [618, 0, 1, "", "rolling_map"], [619, 0, 1, "", "rolling_max"], [620, 0, 1, "", "rolling_max_by"], [621, 0, 1, "", "rolling_mean"], [622, 0, 1, "", "rolling_mean_by"], [623, 0, 1, "", "rolling_median"], [624, 0, 1, "", "rolling_median_by"], [625, 0, 1, "", "rolling_min"], [626, 0, 1, "", "rolling_min_by"], [627, 0, 1, "", "rolling_quantile"], [628, 0, 1, "", "rolling_quantile_by"], [629, 0, 1, "", "rolling_skew"], [630, 0, 1, "", "rolling_std"], [631, 0, 1, "", "rolling_std_by"], [632, 0, 1, "", "rolling_sum"], [633, 0, 1, "", "rolling_sum_by"], [634, 0, 1, "", "rolling_var"], [635, 0, 1, "", "rolling_var_by"], [636, 0, 1, "", "round"], [637, 0, 1, "", "round_sig_figs"], [638, 0, 1, "", "sample"], [639, 0, 1, "", "search_sorted"], [640, 0, 1, "", "set_sorted"], [641, 0, 1, "", "shift"], [642, 0, 1, "", "shift_and_fill"], [643, 0, 1, "", "shrink_dtype"], [644, 0, 1, "", "shuffle"], [645, 0, 1, "", "sign"], [646, 0, 1, "", "sin"], [647, 0, 1, "", "sinh"], [648, 0, 1, "", "skew"], [649, 0, 1, "", "slice"], [650, 0, 1, "", "sort"], [651, 0, 1, "", "sort_by"], [652, 0, 1, "", "sqrt"], [653, 0, 1, "", "std"], [712, 0, 1, "", "sub"], [713, 0, 1, "", "suffix"], [714, 0, 1, "", "sum"], [715, 0, 1, "", "tail"], [716, 0, 1, "", "take"], [717, 0, 1, "", "take_every"], [718, 0, 1, "", "tan"], [719, 0, 1, "", "tanh"], [720, 0, 1, "", "to_physical"], [721, 0, 1, "", "top_k"], [722, 0, 1, "", "top_k_by"], [723, 0, 1, "", "truediv"], [724, 0, 1, "", "unique"], [725, 0, 1, "", "unique_counts"], [726, 0, 1, "", "upper_bound"], [727, 0, 1, "", "value_counts"], [728, 0, 1, "", "var"], [729, 0, 1, "", "where"], [730, 0, 1, "", "xor"]], "polars.Expr.arr": [[339, 0, 1, "", "all"], [340, 0, 1, "", "any"], [341, 0, 1, "", "arg_max"], [342, 0, 1, "", "arg_min"], [343, 0, 1, "", "contains"], [344, 0, 1, "", "count_matches"], [345, 0, 1, "", "explode"], [346, 0, 1, "", "first"], [347, 0, 1, "", "get"], [348, 0, 1, "", "join"], [349, 0, 1, "", "last"], [350, 0, 1, "", "max"], [351, 0, 1, "", "median"], [352, 0, 1, "", "min"], [353, 0, 1, "", "n_unique"], [354, 0, 1, "", "reverse"], [355, 0, 1, "", "shift"], [356, 0, 1, "", "sort"], [357, 0, 1, "", "std"], [358, 0, 1, "", "sum"], [359, 0, 1, "", "to_list"], [360, 0, 1, "", "to_struct"], [361, 0, 1, "", "unique"], [362, 0, 1, "", "var"]], "polars.Expr.bin": [[364, 0, 1, "", "contains"], [365, 0, 1, "", "decode"], [366, 0, 1, "", "encode"], [367, 0, 1, "", "ends_with"], [368, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[372, 0, 1, "", "get_categories"], [373, 0, 1, "", "set_ordering"]], "polars.Expr.dt": [[401, 0, 1, "", "add_business_days"], [402, 0, 1, "", "base_utc_offset"], [403, 0, 1, "", "cast_time_unit"], [404, 0, 1, "", "century"], [405, 0, 1, "", "combine"], [406, 0, 1, "", "convert_time_zone"], [407, 0, 1, "", "date"], [408, 0, 1, "", "datetime"], [409, 0, 1, "", "day"], [410, 0, 1, "", "days"], [411, 0, 1, "", "dst_offset"], [412, 0, 1, "", "epoch"], [413, 0, 1, "", "hour"], [414, 0, 1, "", "hours"], [415, 0, 1, "", "is_leap_year"], [416, 0, 1, "", "iso_year"], [417, 0, 1, "", "microsecond"], [418, 0, 1, "", "microseconds"], [419, 0, 1, "", "millennium"], [420, 0, 1, "", "millisecond"], [421, 0, 1, "", "milliseconds"], [422, 0, 1, "", "minute"], [423, 0, 1, "", "minutes"], [424, 0, 1, "", "month"], [425, 0, 1, "", "month_end"], [426, 0, 1, "", "month_start"], [427, 0, 1, "", "nanosecond"], [428, 0, 1, "", "nanoseconds"], [429, 0, 1, "", "offset_by"], [430, 0, 1, "", "ordinal_day"], [431, 0, 1, "", "quarter"], [432, 0, 1, "", "replace_time_zone"], [433, 0, 1, "", "round"], [434, 0, 1, "", "second"], [435, 0, 1, "", "seconds"], [436, 0, 1, "", "strftime"], [437, 0, 1, "", "time"], [438, 0, 1, "", "timestamp"], [439, 0, 1, "", "to_string"], [440, 0, 1, "", "total_days"], [441, 0, 1, "", "total_hours"], [442, 0, 1, "", "total_microseconds"], [443, 0, 1, "", "total_milliseconds"], [444, 0, 1, "", "total_minutes"], [445, 0, 1, "", "total_nanoseconds"], [446, 0, 1, "", "total_seconds"], [447, 0, 1, "", "truncate"], [448, 0, 1, "", "week"], [449, 0, 1, "", "weekday"], [450, 0, 1, "", "with_time_unit"], [451, 0, 1, "", "year"]], "polars.Expr.list": [[506, 0, 1, "", "all"], [507, 0, 1, "", "any"], [508, 0, 1, "", "arg_max"], [509, 0, 1, "", "arg_min"], [510, 0, 1, "", "concat"], [511, 0, 1, "", "contains"], [512, 0, 1, "", "count_match"], [513, 0, 1, "", "count_matches"], [514, 0, 1, "", "diff"], [515, 0, 1, "", "drop_nulls"], [516, 0, 1, "", "eval"], [517, 0, 1, "", "explode"], [518, 0, 1, "", "first"], [519, 0, 1, "", "gather"], [520, 0, 1, "", "gather_every"], [521, 0, 1, "", "get"], [522, 0, 1, "", "head"], [523, 0, 1, "", "join"], [524, 0, 1, "", "last"], [525, 0, 1, "", "len"], [526, 0, 1, "", "lengths"], [527, 0, 1, "", "max"], [528, 0, 1, "", "mean"], [529, 0, 1, "", "median"], [530, 0, 1, "", "min"], [531, 0, 1, "", "n_unique"], [532, 0, 1, "", "reverse"], [533, 0, 1, "", "sample"], [534, 0, 1, "", "set_difference"], [535, 0, 1, "", "set_intersection"], [536, 0, 1, "", "set_symmetric_difference"], [537, 0, 1, "", "set_union"], [538, 0, 1, "", "shift"], [539, 0, 1, "", "slice"], [540, 0, 1, "", "sort"], [541, 0, 1, "", "std"], [542, 0, 1, "", "sum"], [543, 0, 1, "", "tail"], [544, 0, 1, "", "take"], [545, 0, 1, "", "to_array"], [546, 0, 1, "", "to_struct"], [547, 0, 1, "", "unique"], [548, 0, 1, "", "var"]], "polars.Expr.meta": [[562, 0, 1, "", "eq"], [563, 0, 1, "", "has_multiple_outputs"], [564, 0, 1, "", "is_column_selection"], [565, 0, 1, "", "is_regex_projection"], [566, 0, 1, "", "ne"], [567, 0, 1, "", "output_name"], [568, 0, 1, "", "pop"], [569, 0, 1, "", "root_names"], [570, 0, 1, "", "serialize"], [571, 0, 1, "", "tree_format"], [572, 0, 1, "", "undo_aliases"], [573, 0, 1, "", "write_json"]], "polars.Expr.name": [[579, 0, 1, "", "keep"], [580, 0, 1, "", "map"], [581, 0, 1, "", "map_fields"], [582, 0, 1, "", "prefix"], [583, 0, 1, "", "prefix_fields"], [584, 0, 1, "", "suffix"], [585, 0, 1, "", "suffix_fields"], [586, 0, 1, "", "to_lowercase"], [587, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[654, 0, 1, "", "concat"], [655, 0, 1, "", "contains"], [656, 0, 1, "", "contains_any"], [657, 0, 1, "", "count_match"], [658, 0, 1, "", "count_matches"], [659, 0, 1, "", "decode"], [660, 0, 1, "", "encode"], [661, 0, 1, "", "ends_with"], [662, 0, 1, "", "explode"], [663, 0, 1, "", "extract"], [664, 0, 1, "", "extract_all"], [665, 0, 1, "", "extract_groups"], [666, 0, 1, "", "find"], [667, 0, 1, "", "head"], [668, 0, 1, "", "json_decode"], [669, 0, 1, "", "json_extract"], [670, 0, 1, "", "json_path_match"], [671, 0, 1, "", "len_bytes"], [672, 0, 1, "", "len_chars"], [673, 0, 1, "", "lengths"], [674, 0, 1, "", "ljust"], [675, 0, 1, "", "lstrip"], [676, 0, 1, "", "n_chars"], [677, 0, 1, "", "pad_end"], [678, 0, 1, "", "pad_start"], [679, 0, 1, "", "parse_int"], [680, 0, 1, "", "replace"], [681, 0, 1, "", "replace_all"], [682, 0, 1, "", "replace_many"], [683, 0, 1, "", "reverse"], [684, 0, 1, "", "rjust"], [685, 0, 1, "", "rstrip"], [686, 0, 1, "", "slice"], [687, 0, 1, "", "split"], [688, 0, 1, "", "split_exact"], [689, 0, 1, "", "splitn"], [690, 0, 1, "", "starts_with"], [691, 0, 1, "", "strip"], [692, 0, 1, "", "strip_chars"], [693, 0, 1, "", "strip_chars_end"], [694, 0, 1, "", "strip_chars_start"], [695, 0, 1, "", "strip_prefix"], [696, 0, 1, "", "strip_suffix"], [697, 0, 1, "", "strptime"], [698, 0, 1, "", "tail"], [699, 0, 1, "", "to_date"], [700, 0, 1, "", "to_datetime"], [701, 0, 1, "", "to_decimal"], [702, 0, 1, "", "to_integer"], [703, 0, 1, "", "to_lowercase"], [704, 0, 1, "", "to_time"], [705, 0, 1, "", "to_titlecase"], [706, 0, 1, "", "to_uppercase"], [707, 0, 1, "", "zfill"]], "polars.Expr.struct": [[708, 0, 1, "", "field"], [709, 0, 1, "", "json_encode"], [710, 0, 1, "", "rename_fields"], [711, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[833, 0, 1, "", "approx_n_unique"], [834, 0, 1, "", "bottom_k"], [835, 0, 1, "", "cache"], [836, 0, 1, "", "cast"], [837, 0, 1, "", "clear"], [838, 0, 1, "", "clone"], [839, 0, 1, "", "collect"], [840, 0, 1, "", "collect_async"], [841, 1, 1, "", "columns"], [842, 0, 1, "", "count"], [843, 0, 1, "", "describe"], [844, 0, 1, "", "deserialize"], [845, 0, 1, "", "drop"], [846, 0, 1, "", "drop_nulls"], [847, 1, 1, "", "dtypes"], [848, 0, 1, "", "explain"], [849, 0, 1, "", "explode"], [850, 0, 1, "", "fetch"], [851, 0, 1, "", "fill_nan"], [852, 0, 1, "", "fill_null"], [853, 0, 1, "", "filter"], [854, 0, 1, "", "first"], [855, 0, 1, "", "gather_every"], [856, 0, 1, "", "group_by"], [857, 0, 1, "", "group_by_dynamic"], [858, 0, 1, "", "group_by_rolling"], [859, 0, 1, "", "groupby"], [860, 0, 1, "", "groupby_dynamic"], [861, 0, 1, "", "groupby_rolling"], [862, 0, 1, "", "head"], [863, 0, 1, "", "inspect"], [864, 0, 1, "", "interpolate"], [865, 0, 1, "", "join"], [866, 0, 1, "", "join_asof"], [867, 0, 1, "", "last"], [868, 0, 1, "", "lazy"], [869, 0, 1, "", "limit"], [870, 0, 1, "", "map"], [871, 0, 1, "", "map_batches"], [872, 0, 1, "", "max"], [873, 0, 1, "", "mean"], [874, 0, 1, "", "median"], [875, 0, 1, "", "melt"], [876, 0, 1, "", "merge_sorted"], [877, 0, 1, "", "min"], [878, 0, 1, "", "null_count"], [879, 0, 1, "", "pipe"], [880, 0, 1, "", "profile"], [881, 0, 1, "", "quantile"], [882, 0, 1, "", "rename"], [883, 0, 1, "", "reverse"], [884, 0, 1, "", "rolling"], [885, 1, 1, "", "schema"], [886, 0, 1, "", "select"], [887, 0, 1, "", "select_seq"], [888, 0, 1, "", "serialize"], [889, 0, 1, "", "set_sorted"], [890, 0, 1, "", "shift"], [891, 0, 1, "", "shift_and_fill"], [892, 0, 1, "", "show_graph"], [43, 0, 1, "", "sink_csv"], [44, 0, 1, "", "sink_ipc"], [45, 0, 1, "", "sink_ndjson"], [46, 0, 1, "", "sink_parquet"], [893, 0, 1, "", "slice"], [894, 0, 1, "", "sort"], [895, 0, 1, "", "sql"], [896, 0, 1, "", "std"], [897, 0, 1, "", "sum"], [898, 0, 1, "", "tail"], [899, 0, 1, "", "take_every"], [900, 0, 1, "", "top_k"], [901, 0, 1, "", "unique"], [902, 0, 1, "", "unnest"], [903, 0, 1, "", "update"], [904, 0, 1, "", "var"], [905, 1, 1, "", "width"], [906, 0, 1, "", "with_columns"], [907, 0, 1, "", "with_columns_seq"], [908, 0, 1, "", "with_context"], [909, 0, 1, "", "with_row_count"], [910, 0, 1, "", "with_row_index"]], "polars": [[1339, 2, 1, "", "SQLContext"], [53, 2, 1, "", "StringCache"], [54, 4, 1, "", "align_frames"], [731, 4, 1, "", "all"], [732, 4, 1, "", "all_horizontal"], [733, 4, 1, "", "any"], [734, 4, 1, "", "any_horizontal"], [735, 4, 1, "", "apply"], [736, 4, 1, "", "approx_n_unique"], [737, 4, 1, "", "arange"], [738, 4, 1, "", "arctan2"], [739, 4, 1, "", "arctan2d"], [740, 4, 1, "", "arg_sort_by"], [741, 4, 1, "", "arg_where"], [59, 4, 1, "", "build_info"], [742, 4, 1, "", "business_day_count"], [743, 4, 1, "", "coalesce"], [60, 4, 1, "", "collect_all"], [61, 4, 1, "", "collect_all_async"], [62, 4, 1, "", "concat"], [744, 4, 1, "", "concat_list"], [745, 4, 1, "", "concat_str"], [746, 4, 1, "", "corr"], [747, 4, 1, "", "count"], [748, 4, 1, "", "cov"], [749, 4, 1, "", "cum_count"], [750, 4, 1, "", "cum_fold"], [751, 4, 1, "", "cum_reduce"], [752, 4, 1, "", "cum_sum"], [753, 4, 1, "", "cum_sum_horizontal"], [754, 4, 1, "", "cumfold"], [755, 4, 1, "", "cumreduce"], [756, 4, 1, "", "cumsum"], [757, 4, 1, "", "cumsum_horizontal"], [758, 4, 1, "", "date"], [759, 4, 1, "", "date_range"], [760, 4, 1, "", "date_ranges"], [761, 4, 1, "", "datetime"], [762, 4, 1, "", "datetime_range"], [763, 4, 1, "", "datetime_ranges"], [91, 4, 1, "", "disable_string_cache"], [764, 4, 1, "", "duration"], [765, 4, 1, "", "element"], [92, 4, 1, "", "enable_string_cache"], [766, 4, 1, "", "exclude"], [767, 4, 1, "", "first"], [768, 4, 1, "", "fold"], [769, 4, 1, "", "format"], [108, 4, 1, "", "from_arrow"], [109, 4, 1, "", "from_dataframe"], [110, 4, 1, "", "from_dict"], [111, 4, 1, "", "from_dicts"], [770, 4, 1, "", "from_epoch"], [112, 4, 1, "", "from_numpy"], [113, 4, 1, "", "from_pandas"], [114, 4, 1, "", "from_records"], [115, 4, 1, "", "from_repr"], [116, 4, 1, "", "get_index_type"], [771, 4, 1, "", "groups"], [772, 4, 1, "", "head"], [773, 4, 1, "", "implode"], [774, 4, 1, "", "int_range"], [775, 4, 1, "", "int_ranges"], [776, 4, 1, "", "last"], [777, 4, 1, "", "len"], [778, 4, 1, "", "lit"], [779, 4, 1, "", "map"], [780, 4, 1, "", "map_batches"], [781, 4, 1, "", "map_groups"], [782, 4, 1, "", "max"], [783, 4, 1, "", "max_horizontal"], [784, 4, 1, "", "mean"], [785, 4, 1, "", "mean_horizontal"], [786, 4, 1, "", "median"], [787, 4, 1, "", "min"], [788, 4, 1, "", "min_horizontal"], [789, 4, 1, "", "n_unique"], [790, 4, 1, "", "nth"], [791, 4, 1, "", "ones"], [935, 6, 0, "-", "plugins"], [792, 4, 1, "", "quantile"], [118, 4, 1, "", "read_avro"], [119, 4, 1, "", "read_clipboard"], [120, 4, 1, "", "read_csv"], [121, 4, 1, "", "read_csv_batched"], [122, 4, 1, "", "read_database"], [123, 4, 1, "", "read_database_uri"], [124, 4, 1, "", "read_delta"], [125, 4, 1, "", "read_excel"], [126, 4, 1, "", "read_ipc"], [127, 4, 1, "", "read_ipc_schema"], [128, 4, 1, "", "read_ipc_stream"], [129, 4, 1, "", "read_json"], [130, 4, 1, "", "read_ndjson"], [131, 4, 1, "", "read_ods"], [132, 4, 1, "", "read_parquet"], [133, 4, 1, "", "read_parquet_schema"], [793, 4, 1, "", "reduce"], [794, 4, 1, "", "repeat"], [795, 4, 1, "", "rolling_corr"], [796, 4, 1, "", "rolling_cov"], [134, 4, 1, "", "scan_csv"], [135, 4, 1, "", "scan_delta"], [136, 4, 1, "", "scan_iceberg"], [137, 4, 1, "", "scan_ipc"], [138, 4, 1, "", "scan_ndjson"], [139, 4, 1, "", "scan_parquet"], [140, 4, 1, "", "scan_pyarrow_dataset"], [797, 4, 1, "", "select"], [936, 6, 0, "-", "selectors"], [141, 4, 1, "", "set_random_seed"], [142, 4, 1, "", "show_versions"], [798, 4, 1, "", "sql_expr"], [799, 4, 1, "", "std"], [800, 4, 1, "", "struct"], [801, 4, 1, "", "sum"], [802, 4, 1, "", "sum_horizontal"], [803, 4, 1, "", "tail"], [156, 4, 1, "", "thread_pool_size"], [157, 4, 1, "", "threadpool_size"], [804, 4, 1, "", "time"], [805, 4, 1, "", "time_range"], [806, 4, 1, "", "time_ranges"], [158, 4, 1, "", "using_string_cache"], [807, 4, 1, "", "var"], [808, 4, 1, "", "when"], [809, 4, 1, "", "zeros"]], "polars.SQLContext": [[1339, 0, 1, "", "__enter__"], [1339, 0, 1, "", "__exit__"], [1339, 0, 1, "", "__init__"], [47, 0, 1, "", "execute"], [48, 0, 1, "", "register"], [49, 0, 1, "", "register_globals"], [50, 0, 1, "", "register_many"], [51, 0, 1, "", "tables"], [52, 0, 1, "", "unregister"]], "polars.Series": [[938, 0, 1, "", "abs"], [939, 0, 1, "", "alias"], [940, 0, 1, "", "all"], [941, 0, 1, "", "any"], [942, 0, 1, "", "append"], [943, 0, 1, "", "apply"], [944, 0, 1, "", "arccos"], [945, 0, 1, "", "arccosh"], [946, 0, 1, "", "arcsin"], [947, 0, 1, "", "arcsinh"], [948, 0, 1, "", "arctan"], [949, 0, 1, "", "arctanh"], [950, 0, 1, "", "arg_max"], [951, 0, 1, "", "arg_min"], [952, 0, 1, "", "arg_sort"], [953, 0, 1, "", "arg_true"], [954, 0, 1, "", "arg_unique"], [984, 0, 1, "", "bottom_k"], [985, 0, 1, "", "cast"], [991, 0, 1, "", "cbrt"], [992, 0, 1, "", "ceil"], [993, 0, 1, "", "chunk_lengths"], [994, 0, 1, "", "clear"], [995, 0, 1, "", "clip"], [996, 0, 1, "", "clip_max"], [997, 0, 1, "", "clip_min"], [998, 0, 1, "", "clone"], [999, 0, 1, "", "cos"], [1000, 0, 1, "", "cosh"], [1001, 0, 1, "", "cot"], [1002, 0, 1, "", "cum_count"], [1003, 0, 1, "", "cum_max"], [1004, 0, 1, "", "cum_min"], [1005, 0, 1, "", "cum_prod"], [1006, 0, 1, "", "cum_sum"], [1007, 0, 1, "", "cummax"], [1008, 0, 1, "", "cummin"], [1009, 0, 1, "", "cumprod"], [1010, 0, 1, "", "cumsum"], [1011, 0, 1, "", "cumulative_eval"], [1012, 0, 1, "", "cut"], [1013, 0, 1, "", "describe"], [1014, 0, 1, "", "diff"], [1015, 0, 1, "", "dot"], [1016, 0, 1, "", "drop_nans"], [1017, 0, 1, "", "drop_nulls"], [1073, 3, 1, "", "dtype"], [1074, 0, 1, "", "entropy"], [1075, 0, 1, "", "equals"], [1076, 0, 1, "", "estimated_size"], [1077, 0, 1, "", "ewm_mean"], [1078, 0, 1, "", "ewm_mean_by"], [1079, 0, 1, "", "ewm_std"], [1080, 0, 1, "", "ewm_var"], [1081, 0, 1, "", "exp"], [1082, 0, 1, "", "explode"], [1083, 0, 1, "", "extend"], [1084, 0, 1, "", "extend_constant"], [1085, 0, 1, "", "fill_nan"], [1086, 0, 1, "", "fill_null"], [1087, 0, 1, "", "filter"], [1088, 3, 1, "", "flags"], [1089, 0, 1, "", "floor"], [1090, 0, 1, "", "gather"], [1091, 0, 1, "", "gather_every"], [1092, 0, 1, "", "get_chunks"], [1093, 0, 1, "", "has_nulls"], [1094, 0, 1, "", "has_validity"], [1095, 0, 1, "", "hash"], [1096, 0, 1, "", "head"], [1097, 0, 1, "", "hist"], [1098, 0, 1, "", "implode"], [1099, 3, 1, "", "inner_dtype"], [1100, 0, 1, "", "interpolate"], [1101, 0, 1, "", "interpolate_by"], [1102, 0, 1, "", "is_between"], [1103, 0, 1, "", "is_boolean"], [1104, 0, 1, "", "is_duplicated"], [1105, 0, 1, "", "is_empty"], [1106, 0, 1, "", "is_finite"], [1107, 0, 1, "", "is_first"], [1108, 0, 1, "", "is_first_distinct"], [1109, 0, 1, "", "is_float"], [1110, 0, 1, "", "is_in"], [1111, 0, 1, "", "is_infinite"], [1112, 0, 1, "", "is_integer"], [1113, 0, 1, "", "is_last"], [1114, 0, 1, "", "is_last_distinct"], [1115, 0, 1, "", "is_nan"], [1116, 0, 1, "", "is_not_nan"], [1117, 0, 1, "", "is_not_null"], [1118, 0, 1, "", "is_null"], [1119, 0, 1, "", "is_numeric"], [1120, 0, 1, "", "is_sorted"], [1121, 0, 1, "", "is_temporal"], [1122, 0, 1, "", "is_unique"], [1123, 0, 1, "", "is_utf8"], [1124, 0, 1, "", "item"], [1125, 0, 1, "", "kurtosis"], [1126, 0, 1, "", "len"], [1127, 0, 1, "", "limit"], [1171, 0, 1, "", "log"], [1172, 0, 1, "", "log10"], [1173, 0, 1, "", "log1p"], [1174, 0, 1, "", "lower_bound"], [1175, 0, 1, "", "map_dict"], [1176, 0, 1, "", "map_elements"], [1177, 0, 1, "", "max"], [1178, 0, 1, "", "mean"], [1179, 0, 1, "", "median"], [1180, 0, 1, "", "min"], [1181, 0, 1, "", "mode"], [1182, 0, 1, "", "n_chunks"], [1183, 0, 1, "", "n_unique"], [1184, 3, 1, "", "name"], [1185, 0, 1, "", "nan_max"], [1186, 0, 1, "", "nan_min"], [1187, 0, 1, "", "new_from_index"], [1188, 0, 1, "", "not_"], [1189, 0, 1, "", "null_count"], [1190, 0, 1, "", "pct_change"], [1191, 0, 1, "", "peak_max"], [1192, 0, 1, "", "peak_min"], [1193, 0, 1, "", "product"], [1194, 0, 1, "", "qcut"], [1195, 0, 1, "", "quantile"], [1196, 0, 1, "", "rank"], [1197, 0, 1, "", "rechunk"], [1198, 0, 1, "", "reinterpret"], [1199, 0, 1, "", "rename"], [1200, 0, 1, "", "replace"], [1201, 0, 1, "", "reshape"], [1202, 0, 1, "", "reverse"], [1203, 0, 1, "", "rle"], [1204, 0, 1, "", "rle_id"], [1205, 0, 1, "", "rolling_apply"], [1206, 0, 1, "", "rolling_map"], [1207, 0, 1, "", "rolling_max"], [1208, 0, 1, "", "rolling_mean"], [1209, 0, 1, "", "rolling_median"], [1210, 0, 1, "", "rolling_min"], [1211, 0, 1, "", "rolling_quantile"], [1212, 0, 1, "", "rolling_skew"], [1213, 0, 1, "", "rolling_std"], [1214, 0, 1, "", "rolling_sum"], [1215, 0, 1, "", "rolling_var"], [1216, 0, 1, "", "round"], [1217, 0, 1, "", "round_sig_figs"], [1218, 0, 1, "", "sample"], [1219, 0, 1, "", "scatter"], [1220, 0, 1, "", "search_sorted"], [1221, 0, 1, "", "series_equal"], [1222, 0, 1, "", "set"], [1223, 0, 1, "", "set_at_idx"], [1224, 0, 1, "", "set_sorted"], [1225, 3, 1, "", "shape"], [1226, 0, 1, "", "shift"], [1227, 0, 1, "", "shift_and_fill"], [1228, 0, 1, "", "shrink_dtype"], [1229, 0, 1, "", "shrink_to_fit"], [1230, 0, 1, "", "shuffle"], [1231, 0, 1, "", "sign"], [1232, 0, 1, "", "sin"], [1233, 0, 1, "", "sinh"], [1234, 0, 1, "", "skew"], [1235, 0, 1, "", "slice"], [1236, 0, 1, "", "sort"], [1237, 0, 1, "", "sqrt"], [1238, 0, 1, "", "std"], [1299, 0, 1, "", "sum"], [1300, 0, 1, "", "tail"], [1301, 0, 1, "", "take"], [1302, 0, 1, "", "take_every"], [1303, 0, 1, "", "tan"], [1304, 0, 1, "", "tanh"], [1305, 0, 1, "", "to_arrow"], [1306, 0, 1, "", "to_dummies"], [1307, 0, 1, "", "to_frame"], [1308, 0, 1, "", "to_init_repr"], [1309, 0, 1, "", "to_jax"], [1310, 0, 1, "", "to_list"], [1311, 0, 1, "", "to_numpy"], [1312, 0, 1, "", "to_pandas"], [1313, 0, 1, "", "to_physical"], [1314, 0, 1, "", "to_torch"], [1315, 0, 1, "", "top_k"], [1316, 0, 1, "", "unique"], [1317, 0, 1, "", "unique_counts"], [1318, 0, 1, "", "upper_bound"], [1319, 0, 1, "", "value_counts"], [1320, 0, 1, "", "var"], [1321, 0, 1, "", "view"], [1322, 0, 1, "", "zip_with"]], "polars.Series.arr": [[955, 0, 1, "", "all"], [956, 0, 1, "", "any"], [957, 0, 1, "", "arg_max"], [958, 0, 1, "", "arg_min"], [959, 0, 1, "", "contains"], [960, 0, 1, "", "count_matches"], [961, 0, 1, "", "explode"], [962, 0, 1, "", "first"], [963, 0, 1, "", "get"], [964, 0, 1, "", "join"], [965, 0, 1, "", "last"], [966, 0, 1, "", "max"], [967, 0, 1, "", "median"], [968, 0, 1, "", "min"], [969, 0, 1, "", "n_unique"], [970, 0, 1, "", "reverse"], [971, 0, 1, "", "shift"], [972, 0, 1, "", "sort"], [973, 0, 1, "", "std"], [974, 0, 1, "", "sum"], [975, 0, 1, "", "to_list"], [976, 0, 1, "", "to_struct"], [977, 0, 1, "", "unique"], [978, 0, 1, "", "var"]], "polars.Series.bin": [[979, 0, 1, "", "contains"], [980, 0, 1, "", "decode"], [981, 0, 1, "", "encode"], [982, 0, 1, "", "ends_with"], [983, 0, 1, "", "starts_with"]], "polars.Series.cat": [[986, 0, 1, "", "get_categories"], [987, 0, 1, "", "is_local"], [988, 0, 1, "", "set_ordering"], [989, 0, 1, "", "to_local"], [990, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1018, 0, 1, "", "add_business_days"], [1019, 0, 1, "", "base_utc_offset"], [1020, 0, 1, "", "cast_time_unit"], [1021, 0, 1, "", "century"], [1022, 0, 1, "", "combine"], [1023, 0, 1, "", "convert_time_zone"], [1024, 0, 1, "", "date"], [1025, 0, 1, "", "datetime"], [1026, 0, 1, "", "day"], [1027, 0, 1, "", "days"], [1028, 0, 1, "", "dst_offset"], [1029, 0, 1, "", "epoch"], [1030, 0, 1, "", "hour"], [1031, 0, 1, "", "hours"], [1032, 0, 1, "", "is_leap_year"], [1033, 0, 1, "", "iso_year"], [1034, 0, 1, "", "max"], [1035, 0, 1, "", "mean"], [1036, 0, 1, "", "median"], [1037, 0, 1, "", "microsecond"], [1038, 0, 1, "", "microseconds"], [1039, 0, 1, "", "millennium"], [1040, 0, 1, "", "millisecond"], [1041, 0, 1, "", "milliseconds"], [1042, 0, 1, "", "min"], [1043, 0, 1, "", "minute"], [1044, 0, 1, "", "minutes"], [1045, 0, 1, "", "month"], [1046, 0, 1, "", "month_end"], [1047, 0, 1, "", "month_start"], [1048, 0, 1, "", "nanosecond"], [1049, 0, 1, "", "nanoseconds"], [1050, 0, 1, "", "offset_by"], [1051, 0, 1, "", "ordinal_day"], [1052, 0, 1, "", "quarter"], [1053, 0, 1, "", "replace_time_zone"], [1054, 0, 1, "", "round"], [1055, 0, 1, "", "second"], [1056, 0, 1, "", "seconds"], [1057, 0, 1, "", "strftime"], [1058, 0, 1, "", "time"], [1059, 0, 1, "", "timestamp"], [1060, 0, 1, "", "to_string"], [1061, 0, 1, "", "total_days"], [1062, 0, 1, "", "total_hours"], [1063, 0, 1, "", "total_microseconds"], [1064, 0, 1, "", "total_milliseconds"], [1065, 0, 1, "", "total_minutes"], [1066, 0, 1, "", "total_nanoseconds"], [1067, 0, 1, "", "total_seconds"], [1068, 0, 1, "", "truncate"], [1069, 0, 1, "", "week"], [1070, 0, 1, "", "weekday"], [1071, 0, 1, "", "with_time_unit"], [1072, 0, 1, "", "year"]], "polars.Series.list": [[1128, 0, 1, "", "all"], [1129, 0, 1, "", "any"], [1130, 0, 1, "", "arg_max"], [1131, 0, 1, "", "arg_min"], [1132, 0, 1, "", "concat"], [1133, 0, 1, "", "contains"], [1134, 0, 1, "", "count_match"], [1135, 0, 1, "", "count_matches"], [1136, 0, 1, "", "diff"], [1137, 0, 1, "", "drop_nulls"], [1138, 0, 1, "", "eval"], [1139, 0, 1, "", "explode"], [1140, 0, 1, "", "first"], [1141, 0, 1, "", "gather"], [1142, 0, 1, "", "gather_every"], [1143, 0, 1, "", "get"], [1144, 0, 1, "", "head"], [1145, 0, 1, "", "join"], [1146, 0, 1, "", "last"], [1147, 0, 1, "", "len"], [1148, 0, 1, "", "lengths"], [1149, 0, 1, "", "max"], [1150, 0, 1, "", "mean"], [1151, 0, 1, "", "median"], [1152, 0, 1, "", "min"], [1153, 0, 1, "", "n_unique"], [1154, 0, 1, "", "reverse"], [1155, 0, 1, "", "sample"], [1156, 0, 1, "", "set_difference"], [1157, 0, 1, "", "set_intersection"], [1158, 0, 1, "", "set_symmetric_difference"], [1159, 0, 1, "", "set_union"], [1160, 0, 1, "", "shift"], [1161, 0, 1, "", "slice"], [1162, 0, 1, "", "sort"], [1163, 0, 1, "", "std"], [1164, 0, 1, "", "sum"], [1165, 0, 1, "", "tail"], [1166, 0, 1, "", "take"], [1167, 0, 1, "", "to_array"], [1168, 0, 1, "", "to_struct"], [1169, 0, 1, "", "unique"], [1170, 0, 1, "", "var"]], "polars.Series.str": [[1239, 0, 1, "", "concat"], [1240, 0, 1, "", "contains"], [1241, 0, 1, "", "contains_any"], [1242, 0, 1, "", "count_match"], [1243, 0, 1, "", "count_matches"], [1244, 0, 1, "", "decode"], [1245, 0, 1, "", "encode"], [1246, 0, 1, "", "ends_with"], [1247, 0, 1, "", "explode"], [1248, 0, 1, "", "extract"], [1249, 0, 1, "", "extract_all"], [1250, 0, 1, "", "extract_groups"], [1251, 0, 1, "", "find"], [1252, 0, 1, "", "head"], [1253, 0, 1, "", "json_decode"], [1254, 0, 1, "", "json_extract"], [1255, 0, 1, "", "json_path_match"], [1256, 0, 1, "", "len_bytes"], [1257, 0, 1, "", "len_chars"], [1258, 0, 1, "", "lengths"], [1259, 0, 1, "", "ljust"], [1260, 0, 1, "", "lstrip"], [1261, 0, 1, "", "n_chars"], [1262, 0, 1, "", "pad_end"], [1263, 0, 1, "", "pad_start"], [1264, 0, 1, "", "parse_int"], [1265, 0, 1, "", "replace"], [1266, 0, 1, "", "replace_all"], [1267, 0, 1, "", "replace_many"], [1268, 0, 1, "", "reverse"], [1269, 0, 1, "", "rjust"], [1270, 0, 1, "", "rstrip"], [1271, 0, 1, "", "slice"], [1272, 0, 1, "", "split"], [1273, 0, 1, "", "split_exact"], [1274, 0, 1, "", "splitn"], [1275, 0, 1, "", "starts_with"], [1276, 0, 1, "", "strip"], [1277, 0, 1, "", "strip_chars"], [1278, 0, 1, "", "strip_chars_end"], [1279, 0, 1, "", "strip_chars_start"], [1280, 0, 1, "", "strip_prefix"], [1281, 0, 1, "", "strip_suffix"], [1282, 0, 1, "", "strptime"], [1283, 0, 1, "", "tail"], [1284, 0, 1, "", "to_date"], [1285, 0, 1, "", "to_datetime"], [1286, 0, 1, "", "to_decimal"], [1287, 0, 1, "", "to_integer"], [1288, 0, 1, "", "to_lowercase"], [1289, 0, 1, "", "to_time"], [1290, 0, 1, "", "to_titlecase"], [1291, 0, 1, "", "to_uppercase"], [1292, 0, 1, "", "zfill"]], "polars.Series.struct": [[1293, 0, 1, "", "field"], [1294, 3, 1, "", "fields"], [1295, 0, 1, "", "json_encode"], [1296, 0, 1, "", "rename_fields"], [1297, 3, 1, "", "schema"], [1298, 0, 1, "", "unnest"]], "polars.StringCache": [[53, 0, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[288, 0, 1, "", "__iter__"], [289, 0, 1, "", "agg"], [290, 0, 1, "", "all"], [291, 0, 1, "", "apply"], [292, 0, 1, "", "count"], [293, 0, 1, "", "first"], [294, 0, 1, "", "head"], [295, 0, 1, "", "last"], [296, 0, 1, "", "len"], [297, 0, 1, "", "map_groups"], [298, 0, 1, "", "max"], [299, 0, 1, "", "mean"], [300, 0, 1, "", "median"], [301, 0, 1, "", "min"], [302, 0, 1, "", "n_unique"], [303, 0, 1, "", "quantile"], [304, 0, 1, "", "sum"], [305, 0, 1, "", "tail"]], "polars.datatypes": [[63, 2, 1, "", "Array"], [64, 2, 1, "", "Binary"], [65, 2, 1, "", "Boolean"], [66, 2, 1, "", "Categorical"], [67, 2, 1, "", "DataType"], [68, 2, 1, "", "Date"], [69, 2, 1, "", "Datetime"], [70, 2, 1, "", "Decimal"], [71, 2, 1, "", "Duration"], [72, 2, 1, "", "Enum"], [73, 2, 1, "", "Float32"], [74, 2, 1, "", "Float64"], [75, 2, 1, "", "Int16"], [76, 2, 1, "", "Int32"], [77, 2, 1, "", "Int64"], [78, 2, 1, "", "Int8"], [79, 2, 1, "", "List"], [80, 2, 1, "", "Null"], [81, 2, 1, "", "Object"], [82, 2, 1, "", "String"], [83, 2, 1, "", "Struct"], [84, 2, 1, "", "Time"], [85, 2, 1, "", "UInt16"], [86, 2, 1, "", "UInt32"], [87, 2, 1, "", "UInt64"], [88, 2, 1, "", "UInt8"], [89, 2, 1, "", "Unknown"], [90, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[66, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[74, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[77, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[78, 0, 1, "", "__init__"]], "polars.datatypes.List": [[79, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[80, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[81, 0, 1, "", "__init__"]], "polars.datatypes.String": [[82, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[83, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[84, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[85, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[86, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[87, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[88, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[89, 0, 1, "", "__init__"]], "polars.exceptions": [[93, 5, 1, "", "ArrowError"], [94, 5, 1, "", "ColumnNotFoundError"], [95, 5, 1, "", "ComputeError"], [96, 5, 1, "", "DuplicateError"], [97, 5, 1, "", "InvalidOperationError"], [98, 5, 1, "", "NoDataError"], [99, 5, 1, "", "NoRowsReturnedError"], [100, 5, 1, "", "PolarsError"], [101, 5, 1, "", "PolarsPanicError"], [102, 5, 1, "", "RowsError"], [103, 5, 1, "", "SchemaError"], [104, 5, 1, "", "SchemaFieldNotFoundError"], [105, 5, 1, "", "ShapeError"], [106, 5, 1, "", "StructFieldNotFoundError"], [107, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[117, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[911, 0, 1, "", "agg"], [912, 0, 1, "", "all"], [913, 0, 1, "", "apply"], [914, 0, 1, "", "count"], [915, 0, 1, "", "first"], [916, 0, 1, "", "head"], [917, 0, 1, "", "last"], [918, 0, 1, "", "len"], [919, 0, 1, "", "map_groups"], [920, 0, 1, "", "max"], [921, 0, 1, "", "mean"], [922, 0, 1, "", "median"], [923, 0, 1, "", "min"], [924, 0, 1, "", "n_unique"], [925, 0, 1, "", "quantile"], [926, 0, 1, "", "sum"], [927, 0, 1, "", "tail"]], "polars.plugins": [[935, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[936, 4, 1, "", "all"], [936, 4, 1, "", "alpha"], [936, 4, 1, "", "alphanumeric"], [936, 4, 1, "", "binary"], [936, 4, 1, "", "boolean"], [936, 4, 1, "", "by_dtype"], [936, 4, 1, "", "by_index"], [936, 4, 1, "", "by_name"], [936, 4, 1, "", "categorical"], [936, 4, 1, "", "contains"], [936, 4, 1, "", "date"], [936, 4, 1, "", "datetime"], [936, 4, 1, "", "decimal"], [936, 4, 1, "", "digit"], [936, 4, 1, "", "duration"], [936, 4, 1, "", "ends_with"], [936, 4, 1, "", "exclude"], [936, 4, 1, "", "expand_selector"], [936, 4, 1, "", "first"], [936, 4, 1, "", "float"], [936, 4, 1, "", "integer"], [936, 4, 1, "", "is_selector"], [936, 4, 1, "", "last"], [936, 4, 1, "", "matches"], [936, 4, 1, "", "numeric"], [936, 4, 1, "", "signed_integer"], [936, 4, 1, "", "starts_with"], [936, 4, 1, "", "string"], [936, 4, 1, "", "temporal"], [936, 4, 1, "", "time"], [936, 4, 1, "", "unsigned_integer"]], "polars.testing": [[143, 4, 1, "", "assert_frame_equal"], [144, 4, 1, "", "assert_frame_not_equal"], [145, 4, 1, "", "assert_series_equal"], [146, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[147, 2, 1, "", "column"], [148, 4, 1, "", "columns"], [149, 4, 1, "", "create_list_strategy"], [150, 4, 1, "", "dataframes"], [151, 4, 1, "", "dtypes"], [152, 4, 1, "", "lists"], [153, 4, 1, "", "load_profile"], [154, 4, 1, "", "series"], [155, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[147, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 180, 1083], "api": [1, 55, 56, 57, 58, 830], "provid": 1, "new": 1, "function": [1, 817, 829, 936], "avail": 1, "registr": 1, "exampl": [1, 314, 936, 1335, 1340], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1340], "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 159], "activate_decim": 2, "load": [3, 159], "load_from_fil": 4, "restore_default": 5, "save": [6, 159], "save_to_fil": 7, "set_ascii_t": 8, "set_auto_structifi": 9, "set_decimal_separ": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_streaming_chunk_s": 15, "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_verbos": 30, "state": [31, 159], "datafram": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 150, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 311], "write_avro": 32, "write_clipboard": 33, "write_csv": 34, "write_databas": 35, "write_delta": 36, "write_excel": 37, "write_ipc": 38, "write_ipc_stream": 39, "write_json": [40, 573], "write_ndjson": 41, "write_parquet": 42, "lazyfram": [43, 44, 45, 46, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 931], "sink_csv": 43, "sink_ipc": 44, "sink_ndjson": 45, "sink_parquet": 46, "sqlcontext": [47, 48, 49, 50, 51, 52], "execut": 47, "regist": 48, "register_glob": 49, "register_mani": 50, "tabl": 51, "unregist": 52, "stringcach": [53, 829], "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "build_info": 59, "collect_al": 60, "collect_all_async": 61, "concat": [62, 510, 654, 1132, 1239], "datatyp": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 315], "arrai": [63, 810, 1323], "binari": [64, 811, 824, 1325], "boolean": [65, 812, 1326], "categor": 66, "date": [68, 407, 758, 1024], "datetim": [69, 408, 761, 1025], "decim": 70, "durat": [71, 764], "enum": 72, "float32": 73, "float64": 74, "int16": 75, "int32": 76, "int64": 77, "int8": 78, "list": [79, 152, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 819, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1332], "null": 80, "object": 81, "string": [82, 315, 825, 1336], "struct": [83, 708, 709, 710, 711, 800, 826, 1293, 1294, 1295, 1296, 1297, 1298, 1337], "time": [84, 437, 804, 1058], "uint16": 85, "uint32": 86, "uint64": 87, "uint8": 88, "unknown": 89, "utf8": 90, "disable_string_cach": 91, "enable_string_cach": 92, "except": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 316], "arrowerror": 93, "columnnotfounderror": 94, "computeerror": 95, "duplicateerror": 96, "invalidoperationerror": 97, "nodataerror": 98, "norowsreturnederror": 99, "polarserror": 100, "polarspanicerror": 101, "rowserror": 102, "schemaerror": 103, "schemafieldnotfounderror": 104, "shapeerror": 105, "structfieldnotfounderror": 106, "toomanyrowsreturnederror": 107, "from_arrow": 108, "from_datafram": 109, "from_dict": [110, 111], "from_numpi": 112, "from_panda": 113, "from_record": 114, "from_repr": 115, "get_index_typ": 116, "io": 117, "csv": [117, 831], "batched_read": 117, "batchedcsvread": 117, "next_batch": 117, "read_avro": 118, "read_clipboard": 119, "read_csv": 120, "read_csv_batch": 121, "read_databas": 122, "read_database_uri": 123, "read_delta": 124, "read_excel": 125, "read_ipc": 126, "read_ipc_schema": 127, "read_ipc_stream": 128, "read_json": 129, "read_ndjson": 130, "read_od": 131, "read_parquet": 132, "read_parquet_schema": 133, "scan_csv": 134, "scan_delta": 135, "scan_iceberg": 136, "scan_ipc": 137, "scan_ndjson": 138, "scan_parquet": 139, "scan_pyarrow_dataset": 140, "set_random_se": 141, "show_vers": 142, "test": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 1340], "assert_frame_equ": 143, "assert_frame_not_equ": 144, "assert_series_equ": 145, "assert_series_not_equ": 146, "parametr": [147, 148, 149, 150, 151, 152, 153, 154, 155, 1340], "column": [147, 148, 168, 815, 841], "create_list_strategi": 149, "dtype": [151, 176, 847, 1073], "load_profil": 153, "seri": [154, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1331], "set_profil": 155, "thread_pool_s": 156, "threadpool_s": 157, "using_string_cach": 158, "option": 159, "us": 159, "context": 159, "manag": 159, "decor": 159, "aggreg": [160, 317, 832, 937], "__dataframe__": 161, "appli": [162, 291, 326, 735, 913, 943], "approx_n_uniqu": [163, 327, 736, 833], "bottom_k": [164, 369, 834, 984], "cast": [165, 371, 836, 985], "clear": [166, 837, 994], "clone": [167, 838, 998], "corr": [169, 746], "count": [170, 292, 382, 747, 842, 914], "describ": [171, 843, 1013], "deseri": [172, 396, 844], "drop": [173, 845], "drop_in_plac": 174, "drop_nul": [175, 400, 515, 846, 1017, 1137], "equal": [177, 1075], "estimated_s": [178, 1076], "explod": [179, 345, 461, 517, 662, 849, 961, 1082, 1139, 1247], "fill_nan": [181, 463, 851, 1085], "fill_nul": [182, 464, 852, 1086], "filter": [183, 465, 853, 1087], "find_idx_by_nam": 184, "flag": [185, 1088], "fold": [186, 768], "frame_equ": 187, "gather_everi": [188, 473, 520, 855, 1091, 1142], "get_column": [189, 191], "get_column_index": 190, "glimps": 192, "group_bi": [193, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 856, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927], "group_by_dynam": [194, 857], "group_by_rol": [195, 858], "groupbi": [196, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 310, 859, 930], "groupby_dynam": [197, 860], "groupby_rol": [198, 861], "hash_row": 199, "head": [200, 294, 479, 522, 667, 772, 862, 916, 1096, 1144, 1252], "height": 201, "hstack": 202, "insert_at_idx": 203, "insert_column": 204, "interpol": [205, 483, 864, 1100], "is_dupl": [206, 486, 1104], "is_empti": [207, 1105], "is_uniqu": [208, 499, 1122], "item": [209, 1124], "iter_column": 210, "iter_row": 211, "iter_slic": 212, "join": [213, 348, 523, 865, 964, 1145], "join_asof": [214, 866], "lazi": [215, 868], "limit": [216, 505, 869, 1127], "map_row": 217, "max": [218, 298, 350, 527, 559, 782, 872, 920, 966, 1034, 1149, 1177], "max_horizont": [219, 783], "mean": [220, 299, 528, 560, 784, 873, 921, 1035, 1150, 1178], "mean_horizont": [221, 785], "median": [222, 300, 351, 529, 561, 786, 874, 922, 967, 1036, 1151, 1179], "melt": [223, 875], "merge_sort": [224, 876], "min": [225, 301, 352, 530, 574, 787, 877, 923, 968, 1042, 1152, 1180], "min_horizont": [226, 788], "n_chunk": [227, 1182], "n_uniqu": [228, 302, 353, 531, 578, 789, 924, 969, 1153, 1183], "null_count": [229, 594, 878, 1189], "partition_bi": 230, "pipe": [231, 600, 879], "pivot": 232, "product": [233, 603, 1193], "quantil": [234, 303, 605, 792, 881, 925, 1195], "rechunk": [235, 608, 1197], "renam": [236, 882, 1199], "replac": [237, 611, 680, 1200, 1265], "replace_at_idx": 238, "replace_column": 239, "revers": [240, 354, 532, 613, 683, 883, 970, 1154, 1202, 1268], "roll": [241, 616, 884], "row": [242, 243], "rows_by_kei": 244, "sampl": [245, 533, 638, 1155, 1218], "schema": [246, 885, 1297], "select": [247, 313, 797, 822, 886, 933, 1334], "select_seq": [248, 887], "serial": [249, 312, 570, 888, 932], "set_sort": [250, 640, 889, 1224], "shape": [251, 1225], "shift": [252, 355, 538, 641, 890, 971, 1160, 1226], "shift_and_fil": [253, 642, 891, 1227], "shrink_to_fit": [254, 1229], "slice": [255, 539, 649, 686, 893, 1161, 1235, 1271], "sort": [256, 356, 540, 650, 894, 972, 1162, 1236], "sql": [257, 895, 1339], "std": [258, 357, 541, 653, 799, 896, 973, 1163, 1238], "sum": [259, 304, 358, 542, 714, 801, 897, 926, 974, 1164, 1299], "sum_horizont": [260, 802], "tail": [261, 305, 543, 698, 715, 803, 898, 927, 1165, 1283, 1300], "take_everi": [262, 717, 899, 1302], "to_arrow": [263, 1305], "to_dict": [264, 265], "to_dummi": [266, 1306], "to_init_repr": [267, 1308], "to_jax": [268, 1309], "to_numpi": [269, 1311], "to_panda": [270, 1312], "to_seri": 271, "to_struct": [272, 360, 546, 976, 1168], "to_torch": [273, 1314], "top_k": [274, 721, 900, 1315], "transpos": 275, "uniqu": [276, 361, 547, 724, 901, 977, 1169, 1316], "unnest": [277, 902, 1298], "unstack": 278, "updat": [279, 903], "upsampl": 280, "var": [281, 362, 548, 728, 807, 904, 978, 1170, 1320], "vstack": 282, "width": [283, 905], "with_column": [284, 906], "with_columns_seq": [285, 907], "with_row_count": [286, 909], "with_row_index": [287, 910], "__iter__": 288, "agg": [289, 911], "all": [290, 322, 339, 506, 731, 912, 940, 955, 1128], "first": [293, 346, 466, 518, 767, 854, 915, 962, 1140], "last": [295, 349, 502, 524, 776, 867, 917, 965, 1146], "len": [296, 504, 525, 777, 918, 1126, 1147], "map_group": [297, 781, 919], "attribut": [306, 928, 1324], "comput": [307, 816, 1328], "descript": [308, 929, 1329], "export": [309, 1330], "miscellan": [312, 821, 829, 932, 1333], "manipul": [313, 822, 933, 1334], "plot": [314, 1335], "data": 315, "type": 315, "numer": [315, 824], "tempor": [315, 827, 1338], "nest": 315, "other": 315, "expr": [318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730], "ab": [318, 938], "add": 319, "agg_group": 320, "alia": [321, 939], "and_": 323, "ani": [324, 340, 507, 733, 941, 956, 1129], "append": [325, 942], "arcco": [328, 944], "arccosh": [329, 945], "arcsin": [330, 946], "arcsinh": [331, 947], "arctan": [332, 948], "arctanh": [333, 949], "arg_max": [334, 341, 508, 950, 957, 1130], "arg_min": [335, 342, 509, 951, 958, 1131], "arg_sort": [336, 952], "arg_tru": [337, 953], "arg_uniqu": [338, 954], "arr": [339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978], "contain": [343, 364, 511, 655, 959, 979, 1133, 1240], "count_match": [344, 512, 513, 657, 658, 960, 1134, 1135, 1242, 1243], "get": [347, 475, 521, 963, 1143], "to_list": [359, 975, 1310], "backward_fil": 363, "bin": [364, 365, 366, 367, 368, 979, 980, 981, 982, 983], "decod": [365, 659, 980, 1244], "encod": [366, 660, 981, 1245], "ends_with": [367, 661, 982, 1246], "starts_with": [368, 690, 983, 1275], "bottom_k_bi": 370, "cat": [372, 373, 986, 987, 988, 989, 990], "get_categori": [372, 986], "set_ord": [373, 988], "cbrt": [374, 991], "ceil": [375, 992], "clip": [376, 995], "clip_max": [377, 996], "clip_min": [378, 997], "co": [379, 999], "cosh": [380, 1000], "cot": [381, 1001], "cum_count": [383, 749, 1002], "cum_max": [384, 1003], "cum_min": [385, 1004], "cum_prod": [386, 1005], "cum_sum": [387, 752, 1006], "cumcount": 388, "cummax": [389, 1007], "cummin": [390, 1008], "cumprod": [391, 1009], "cumsum": [392, 756, 1010], "cumulative_ev": [393, 1011], "cut": [394, 1012], "degre": 395, "diff": [397, 514, 1014, 1136], "dot": [398, 1015], "drop_nan": [399, 1016], "dt": [401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072], "add_business_dai": [401, 1018], "base_utc_offset": [402, 1019], "cast_time_unit": [403, 1020], "centuri": [404, 1021], "combin": [405, 1022], "convert_time_zon": [406, 1023], "dai": [409, 410, 1026, 1027], "dst_offset": [411, 1028], "epoch": [412, 1029], "hour": [413, 414, 1030, 1031], "is_leap_year": [415, 1032], "iso_year": [416, 1033], "microsecond": [417, 418, 1037, 1038], "millennium": [419, 1039], "millisecond": [420, 421, 1040, 1041], "minut": [422, 423, 1043, 1044], "month": [424, 1045], "month_end": [425, 1046], "month_start": [426, 1047], "nanosecond": [427, 428, 1048, 1049], "offset_bi": [429, 1050], "ordinal_dai": [430, 1051], "quarter": [431, 1052], "replace_time_zon": [432, 1053], "round": [433, 636, 1054, 1216], "second": [434, 435, 1055, 1056], "strftime": [436, 1057], "timestamp": [438, 1059], "to_str": [439, 1060], "total_dai": [440, 1061], "total_hour": [441, 1062], "total_microsecond": [442, 1063], "total_millisecond": [443, 1064], "total_minut": [444, 1065], "total_nanosecond": [445, 1066], "total_second": [446, 1067], "truncat": [447, 1068], "week": [448, 1069], "weekdai": [449, 1070], "with_time_unit": [450, 1071], "year": [451, 1072], "entropi": [452, 1074], "eq": [453, 562], "eq_miss": 454, "ewm_mean": [455, 1077], "ewm_mean_bi": [456, 1078], "ewm_std": [457, 1079], "ewm_var": [458, 1080], "exclud": [459, 766], "exp": [460, 1081], "extend_const": [462, 1084], "flatten": 467, "floor": [468, 1089], "floordiv": 469, "forward_fil": 470, "from_json": 471, "gather": [472, 519, 1090, 1141], "ge": 474, "gt": 476, "has_nul": [477, 1093], "hash": [478, 1095], "hist": [480, 1097], "implod": [481, 773, 1098], "inspect": [482, 863], "interpolate_bi": [484, 1101], "is_between": [485, 1102], "is_finit": [487, 1106], "is_first": [488, 1107], "is_first_distinct": [489, 1108], "is_in": [490, 1110], "is_infinit": [491, 1111], "is_last": [492, 1113], "is_last_distinct": [493, 1114], "is_nan": [494, 1115], "is_not": 495, "is_not_nan": [496, 1116], "is_not_nul": [497, 1117], "is_nul": [498, 1118], "keep_nam": 500, "kurtosi": [501, 1125], "le": 503, "eval": [516, 1138], "length": [526, 673, 1148, 1258], "set_differ": [534, 1156], "set_intersect": [535, 1157], "set_symmetric_differ": [536, 1158], "set_union": [537, 1159], "take": [544, 716, 1166, 1301], "to_arrai": [545, 1167], "log": [549, 1171], "log10": [550, 1172], "log1p": [551, 1173], "lower_bound": [552, 1174], "lt": 553, "map": [554, 580, 779, 870], "map_alia": 555, "map_batch": [556, 780, 871], "map_dict": [557, 1175], "map_el": [558, 1176], "meta": [562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 820], "has_multiple_output": 563, "is_column_select": 564, "is_regex_project": 565, "ne": [566, 590], "output_nam": 567, "pop": 568, "root_nam": 569, "tree_format": 571, "undo_alias": 572, "mod": 575, "mode": [576, 1181], "mul": 577, "name": [579, 580, 581, 582, 583, 584, 585, 586, 587, 815, 823, 1184], "keep": 579, "map_field": 581, "prefix": [582, 602], "prefix_field": 583, "suffix": [584, 713], "suffix_field": 585, "to_lowercas": [586, 703, 1288], "to_uppercas": [587, 706, 1291], "nan_max": [588, 1185], "nan_min": [589, 1186], "ne_miss": 591, "neg": 592, "not_": [593, 1188], "or_": 595, "over": 596, "pct_chang": [597, 1190], "peak_max": [598, 1191], "peak_min": [599, 1192], "pow": 601, "qcut": [604, 1194], "radian": 606, "rank": [607, 1196], "reinterpret": [609, 1198], "repeat_bi": 610, "reshap": [612, 1201], "rle": [614, 1203], "rle_id": [615, 1204], "rolling_appli": [617, 1205], "rolling_map": [618, 1206], "rolling_max": [619, 1207], "rolling_max_bi": 620, "rolling_mean": [621, 1208], "rolling_mean_bi": 622, "rolling_median": [623, 1209], "rolling_median_bi": 624, "rolling_min": [625, 1210], "rolling_min_bi": 626, "rolling_quantil": [627, 1211], "rolling_quantile_bi": 628, "rolling_skew": [629, 1212], "rolling_std": [630, 1213], "rolling_std_bi": 631, "rolling_sum": [632, 1214], "rolling_sum_bi": 633, "rolling_var": [634, 1215], "rolling_var_bi": 635, "round_sig_fig": [637, 1217], "search_sort": [639, 1220], "shrink_dtyp": [643, 1228], "shuffl": [644, 1230], "sign": [645, 1231], "sin": [646, 1232], "sinh": [647, 1233], "skew": [648, 1234], "sort_bi": 651, "sqrt": [652, 1237], "str": [654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292], "contains_ani": [656, 1241], "extract": [663, 1248], "extract_al": [664, 1249], "extract_group": [665, 1250], "find": [666, 1251], "json_decod": [668, 1253], "json_extract": [669, 1254], "json_path_match": [670, 1255], "len_byt": [671, 1256], "len_char": [672, 1257], "ljust": [674, 1259], "lstrip": [675, 1260], "n_char": [676, 1261], "pad_end": [677, 1262], "pad_start": [678, 1263], "parse_int": [679, 1264], "replace_al": [681, 1266], "replace_mani": [682, 1267], "rjust": [684, 1269], "rstrip": [685, 1270], "split": [687, 1272], "split_exact": [688, 1273], "splitn": [689, 1274], "strip": [691, 1276], "strip_char": [692, 1277], "strip_chars_end": [693, 1278], "strip_chars_start": [694, 1279], "strip_prefix": [695, 1280], "strip_suffix": [696, 1281], "strptime": [697, 1282], "to_dat": [699, 1284], "to_datetim": [700, 1285], "to_decim": [701, 1286], "to_integ": [702, 1287], "to_tim": [704, 1289], "to_titlecas": [705, 1290], "zfill": [707, 1292], "field": [708, 1293, 1294], "json_encod": [709, 1295], "rename_field": [710, 1296], "with_field": 711, "sub": 712, "tan": [718, 1303], "tanh": [719, 1304], "to_phys": [720, 1313], "top_k_bi": 722, "truediv": 723, "unique_count": [725, 1317], "upper_bound": [726, 1318], "value_count": [727, 1319], "where": 729, "xor": 730, "all_horizont": 732, "any_horizont": 734, "arang": 737, "arctan2": 738, "arctan2d": 739, "arg_sort_bi": 740, "arg_wher": 741, "business_day_count": 742, "coalesc": 743, "concat_list": 744, "concat_str": 745, "cov": 748, "cum_fold": 750, "cum_reduc": 751, "cum_sum_horizont": 753, "cumfold": 754, "cumreduc": 755, "cumsum_horizont": 757, "date_rang": [759, 760], "datetime_rang": [762, 763], "element": 765, "format": 769, "from_epoch": 770, "group": 771, "int_rang": [774, 775], "lit": 778, "nth": 790, "ones": 791, "reduc": 793, "repeat": 794, "rolling_corr": 795, "rolling_cov": 796, "sql_expr": 798, "time_rang": [805, 806], "when": 808, "zero": 809, "categori": [813, 1327], "col": 814, "express": 818, "oper": [824, 936], "conjunct": 824, "comparison": 824, "window": 828, "convers": 829, "parallel": 829, "random": 829, "python": 830, "refer": 830, "input": 831, "output": 831, "avro": 831, "clipboard": 831, "databas": 831, "delta": 831, "lake": 831, "excel": 831, "od": 831, "feather": 831, "ipc": 831, "iceberg": 831, "json": 831, "parquet": 831, "pyarrow": 831, "dataset": 831, "cach": 835, "collect": 839, "collect_async": 840, "explain": 848, "fetch": 850, "profil": [880, 1340], "show_graph": 892, "with_context": 908, "lazygroupbi": [911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927], "metadata": 934, "plugin": 935, "selector": 936, "import": 936, "set": [936, 1222], "is_loc": 987, "to_loc": 989, "uses_lexical_ord": 990, "chunk_length": 993, "get_chunk": 1092, "has_valid": 1094, "inner_dtyp": 1099, "is_boolean": 1103, "is_float": 1109, "is_integ": 1112, "is_numer": 1119, "is_sort": 1120, "is_tempor": 1121, "is_utf8": 1123, "new_from_index": 1187, "scatter": 1219, "series_equ": 1221, "set_at_idx": 1223, "to_fram": 1307, "view": 1321, "zip_with": 1322, "interfac": 1339, "method": 1339, "assert": 1340, "strategi": 1340, "helper": 1340}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.groupby_rolling": [[198, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.n_chunks": [[227, "polars-dataframe-n-chunks"]], "polars.DataFrame.equals": [[177, "polars-dataframe-equals"]], "polars.DataFrame.drop_nulls": [[175, "polars-dataframe-drop-nulls"]], "polars.DataFrame.min_horizontal": [[226, "polars-dataframe-min-horizontal"]], "polars.DataFrame.fill_nan": [[181, "polars-dataframe-fill-nan"]], "polars.DataFrame.join_asof": [[214, "polars-dataframe-join-asof"]], "polars.DataFrame.merge_sorted": [[224, "polars-dataframe-merge-sorted"]], "polars.DataFrame.get_columns": [[191, "polars-dataframe-get-columns"]], "polars.DataFrame.insert_column": [[204, "polars-dataframe-insert-column"]], "polars.DataFrame.get_column": [[189, "polars-dataframe-get-column"]], "polars.DataFrame.explode": [[179, "polars-dataframe-explode"]], "polars.DataFrame.frame_equal": [[187, "polars-dataframe-frame-equal"]], "polars.DataFrame.iter_rows": [[211, "polars-dataframe-iter-rows"]], "polars.DataFrame.min": [[225, "polars-dataframe-min"]], "polars.DataFrame.group_by_dynamic": [[194, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.lazy": [[215, "polars-dataframe-lazy"]], "polars.DataFrame.glimpse": [[192, "polars-dataframe-glimpse"]], "polars.DataFrame.find_idx_by_name": [[184, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.groupby": [[196, "polars-dataframe-groupby"]], "polars.DataFrame.fill_null": [[182, "polars-dataframe-fill-null"]], "polars.DataFrame.get_column_index": [[190, "polars-dataframe-get-column-index"]], "polars.DataFrame.groupby_dynamic": [[197, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.dtypes": [[176, "polars-dataframe-dtypes"]], "polars.DataFrame.join": [[213, "polars-dataframe-join"]], "polars.DataFrame.fold": [[186, "polars-dataframe-fold"]], "polars.DataFrame.drop": [[173, "polars-dataframe-drop"]], "polars.DataFrame.item": [[209, "polars-dataframe-item"]], "polars.DataFrame.drop_in_place": [[174, "polars-dataframe-drop-in-place"]], "polars.DataFrame.estimated_size": [[178, "polars-dataframe-estimated-size"]], "polars.DataFrame.map_rows": [[217, "polars-dataframe-map-rows"]], "polars.DataFrame.height": [[201, "polars-dataframe-height"]], "polars.DataFrame.is_duplicated": [[206, "polars-dataframe-is-duplicated"]], "polars.DataFrame.extend": [[180, "polars-dataframe-extend"]], "polars.DataFrame.iter_slices": [[212, "polars-dataframe-iter-slices"]], "polars.DataFrame.filter": [[183, "polars-dataframe-filter"]], "polars.DataFrame.flags": [[185, "polars-dataframe-flags"]], "polars.DataFrame.is_empty": [[207, "polars-dataframe-is-empty"]], "polars.DataFrame.limit": [[216, "polars-dataframe-limit"]], "polars.DataFrame.max": [[218, "polars-dataframe-max"]], "polars.DataFrame.mean_horizontal": [[221, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.deserialize": [[172, "polars-dataframe-deserialize"]], "polars.DataFrame.gather_every": [[188, "polars-dataframe-gather-every"]], "polars.DataFrame.hstack": [[202, "polars-dataframe-hstack"]], "polars.DataFrame.describe": [[171, "polars-dataframe-describe"]], "polars.DataFrame.median": [[222, "polars-dataframe-median"]], "polars.DataFrame.mean": [[220, "polars-dataframe-mean"]], "polars.DataFrame.is_unique": [[208, "polars-dataframe-is-unique"]], "polars.DataFrame.group_by_rolling": [[195, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.iter_columns": [[210, "polars-dataframe-iter-columns"]], "polars.DataFrame.head": [[200, "polars-dataframe-head"]], "polars.DataFrame.max_horizontal": [[219, "polars-dataframe-max-horizontal"]], "polars.DataFrame.melt": [[223, "polars-dataframe-melt"]], "polars.DataFrame.insert_at_idx": [[203, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.interpolate": [[205, "polars-dataframe-interpolate"]], "polars.DataFrame.group_by": [[193, "polars-dataframe-group-by"]], "polars.DataFrame.hash_rows": [[199, "polars-dataframe-hash-rows"]], "polars.DataFrame.write_avro": [[32, "polars-dataframe-write-avro"]], "polars.Config.set_thousands_separator": [[28, "polars-config-set-thousands-separator"]], "polars.LazyFrame.sink_ipc": [[44, "polars-lazyframe-sink-ipc"]], "polars.Config.load": [[3, "polars-config-load"]], "polars.Config.set_verbose": [[30, "polars-config-set-verbose"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [936, "examples"], [1335, "examples"], [1340, "examples"], [314, "examples"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.SQLContext.register_globals": [[49, "polars-sqlcontext-register-globals"]], "polars.SQLContext.register_many": [[50, "polars-sqlcontext-register-many"]], "polars.DataFrame.write_excel": [[37, "polars-dataframe-write-excel"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.DataFrame.write_delta": [[36, "polars-dataframe-write-delta"]], "polars.Config.set_tbl_hide_column_names": [[23, "polars-config-set-tbl-hide-column-names"]], "polars.LazyFrame.sink_parquet": [[46, "polars-lazyframe-sink-parquet"]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_clipboard": [[33, "polars-dataframe-write-clipboard"]], "polars.SQLContext.unregister": [[52, "polars-sqlcontext-unregister"]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.DataFrame.write_ndjson": [[41, "polars-dataframe-write-ndjson"]], "polars.Config.save_to_file": [[7, "polars-config-save-to-file"]], "polars.StringCache": [[53, "polars-stringcache"]], "polars.Config.set_float_precision": [[11, "polars-config-set-float-precision"]], "polars.Config.set_tbl_formatting": [[21, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_ipc_stream": [[39, "polars-dataframe-write-ipc-stream"]], "polars.SQLContext.execute": [[47, "polars-sqlcontext-execute"]], "polars.SQLContext.register": [[48, "polars-sqlcontext-register"]], "polars.SQLContext.tables": [[51, "polars-sqlcontext-tables"]], "polars.Config.set_tbl_hide_dtype_separator": [[25, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_decimal_separator": [[10, "polars-config-set-decimal-separator"]], "polars.DataFrame.write_parquet": [[42, "polars-dataframe-write-parquet"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.Config.set_tbl_cols": [[18, "polars-config-set-tbl-cols"]], "polars.DataFrame.write_ipc": [[38, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_cell_alignment": [[16, "polars-config-set-tbl-cell-alignment"]], "polars.LazyFrame.sink_csv": [[43, "polars-lazyframe-sink-csv"]], "Index": [[0, "index"]], "polars.Config.set_auto_structify": [[9, "polars-config-set-auto-structify"]], "polars.Config.set_tbl_dataframe_shape_below": [[20, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.restore_defaults": [[5, "polars-config-restore-defaults"]], "polars.Config.save": [[6, "polars-config-save"]], "polars.Config.set_fmt_table_cell_list_len": [[14, "polars-config-set-fmt-table-cell-list-len"]], "polars.DataFrame.write_csv": [[34, "polars-dataframe-write-csv"]], "polars.Config.set_streaming_chunk_size": [[15, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_fmt_str_lengths": [[13, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_column_data_type_inline": [[19, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_width_chars": [[27, "polars-config-set-tbl-width-chars"]], "polars.Config.set_trim_decimal_zeros": [[29, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_tbl_rows": [[26, "polars-config-set-tbl-rows"]], "polars.Config.load_from_file": [[4, "polars-config-load-from-file"]], "polars.Config.state": [[31, "polars-config-state"]], "polars.DataFrame.write_database": [[35, "polars-dataframe-write-database"]], "polars.Config.set_tbl_hide_column_data_types": [[22, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_json": [[40, "polars-dataframe-write-json"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.LazyFrame.sink_ndjson": [[45, "polars-lazyframe-sink-ndjson"]], "polars.Config.set_fmt_float": [[12, "polars-config-set-fmt-float"]], "polars.Config.activate_decimals": [[2, "polars-config-activate-decimals"]], "polars.read_ndjson": [[130, "polars-read-ndjson"]], "polars.scan_csv": [[134, "polars-scan-csv"]], "polars.read_delta": [[124, "polars-read-delta"]], "polars.scan_ipc": [[137, "polars-scan-ipc"]], "polars.scan_pyarrow_dataset": [[140, "polars-scan-pyarrow-dataset"]], "polars.testing.assert_frame_not_equal": [[144, "polars-testing-assert-frame-not-equal"]], "polars.testing.parametric.load_profile": [[153, "polars-testing-parametric-load-profile"]], "polars.read_excel": [[125, "polars-read-excel"]], "polars.read_database_uri": [[123, "polars-read-database-uri"]], "polars.read_database": [[122, "polars-read-database"]], "polars.read_ods": [[131, "polars-read-ods"]], "polars.from_records": [[114, "polars-from-records"]], "polars.read_json": [[129, "polars-read-json"]], "polars.read_parquet_schema": [[133, "polars-read-parquet-schema"]], "polars.from_repr": [[115, "polars-from-repr"]], "polars.testing.assert_series_not_equal": [[146, "polars-testing-assert-series-not-equal"]], "polars.show_versions": [[142, "polars-show-versions"]], "polars.thread_pool_size": [[156, "polars-thread-pool-size"]], "polars.read_ipc": [[126, "polars-read-ipc"]], "polars.read_clipboard": [[119, "polars-read-clipboard"]], "polars.scan_iceberg": [[136, "polars-scan-iceberg"]], "polars.using_string_cache": [[158, "polars-using-string-cache"]], "polars.read_csv_batched": [[121, "polars-read-csv-batched"]], "polars.DataFrame.__dataframe__": [[161, "polars-dataframe-dataframe"]], "polars.DataFrame.cast": [[165, "polars-dataframe-cast"]], "polars.read_ipc_stream": [[128, "polars-read-ipc-stream"]], "polars.threadpool_size": [[157, "polars-threadpool-size"]], "polars.read_csv": [[120, "polars-read-csv"]], "polars.DataFrame.clear": [[166, "polars-dataframe-clear"]], "polars.testing.parametric.columns": [[148, "polars-testing-parametric-columns"]], "polars.get_index_type": [[116, "polars-get-index-type"]], "polars.testing.assert_frame_equal": [[143, "polars-testing-assert-frame-equal"]], "polars.testing.parametric.lists": [[152, "polars-testing-parametric-lists"]], "polars.testing.parametric.dataframes": [[150, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.set_profile": [[155, "polars-testing-parametric-set-profile"]], "polars.read_avro": [[118, "polars-read-avro"]], "polars.read_ipc_schema": [[127, "polars-read-ipc-schema"]], "polars.testing.assert_series_equal": [[145, "polars-testing-assert-series-equal"]], "Config": [[159, "config"]], "Config options": [[159, "config-options"]], "Config load, save, state": [[159, "config-load-save-state"]], "Use as a context manager": [[159, "use-as-a-context-manager"]], "Use as a decorator": [[159, "use-as-a-decorator"]], "polars.scan_delta": [[135, "polars-scan-delta"]], "polars.read_parquet": [[132, "polars-read-parquet"]], "polars.set_random_seed": [[141, "polars-set-random-seed"]], "polars.scan_parquet": [[139, "polars-scan-parquet"]], "polars.testing.parametric.column": [[147, "polars-testing-parametric-column"]], "polars.testing.parametric.series": [[154, "polars-testing-parametric-series"]], "polars.DataFrame.apply": [[162, "polars-dataframe-apply"]], "polars.DataFrame.approx_n_unique": [[163, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.count": [[170, "polars-dataframe-count"]], "Aggregation": [[160, "aggregation"], [937, "aggregation"], [832, "aggregation"], [317, "aggregation"]], "polars.testing.parametric.dtypes": [[151, "polars-testing-parametric-dtypes"]], "polars.DataFrame.corr": [[169, "polars-dataframe-corr"]], "polars.scan_ndjson": [[138, "polars-scan-ndjson"]], "polars.DataFrame.bottom_k": [[164, "polars-dataframe-bottom-k"]], "polars.testing.parametric.create_list_strategy": [[149, "polars-testing-parametric-create-list-strategy"]], "polars.DataFrame.columns": [[168, "polars-dataframe-columns"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[117, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.DataFrame.clone": [[167, "polars-dataframe-clone"]], "polars.Series.str.to_titlecase": [[1290, "polars-series-str-to-titlecase"]], "polars.Series.str.to_lowercase": [[1288, "polars-series-str-to-lowercase"]], "polars.Series.struct.fields": [[1294, "polars-series-struct-fields"]], "polars.Series.tan": [[1303, "polars-series-tan"]], "polars.Series.take_every": [[1302, "polars-series-take-every"]], "polars.Series.str.rjust": [[1269, "polars-series-str-rjust"]], "polars.Series.str.lengths": [[1258, "polars-series-str-lengths"]], "polars.Series.str.strip_chars": [[1277, "polars-series-str-strip-chars"]], "polars.Series.str.pad_end": [[1262, "polars-series-str-pad-end"]], "polars.Series.str.to_datetime": [[1285, "polars-series-str-to-datetime"]], "polars.Series.to_dummies": [[1306, "polars-series-to-dummies"]], "polars.Series.str.reverse": [[1268, "polars-series-str-reverse"]], "polars.Series.str.to_time": [[1289, "polars-series-str-to-time"]], "polars.Series.str.parse_int": [[1264, "polars-series-str-parse-int"]], "polars.Series.str.pad_start": [[1263, "polars-series-str-pad-start"]], "polars.Series.str.rstrip": [[1270, "polars-series-str-rstrip"]], "polars.Series.str.strip_chars_end": [[1278, "polars-series-str-strip-chars-end"]], "polars.Series.str.zfill": [[1292, "polars-series-str-zfill"]], "polars.Series.str.lstrip": [[1260, "polars-series-str-lstrip"]], "polars.Series.to_list": [[1310, "polars-series-to-list"]], "polars.Series.str.splitn": [[1274, "polars-series-str-splitn"]], "polars.Series.str.len_chars": [[1257, "polars-series-str-len-chars"]], "polars.Series.str.json_path_match": [[1255, "polars-series-str-json-path-match"]], "polars.Series.struct.field": [[1293, "polars-series-struct-field"]], "polars.Series.str.starts_with": [[1275, "polars-series-str-starts-with"]], "polars.Series.str.n_chars": [[1261, "polars-series-str-n-chars"]], "polars.Series.str.slice": [[1271, "polars-series-str-slice"]], "polars.Series.str.strip": [[1276, "polars-series-str-strip"]], "polars.Series.to_jax": [[1309, "polars-series-to-jax"]], "polars.Series.struct.unnest": [[1298, "polars-series-struct-unnest"]], "polars.Series.str.to_decimal": [[1286, "polars-series-str-to-decimal"]], "polars.Series.str.strip_suffix": [[1281, "polars-series-str-strip-suffix"]], "polars.Series.str.to_integer": [[1287, "polars-series-str-to-integer"]], "polars.Series.take": [[1301, "polars-series-take"]], "polars.Series.str.split": [[1272, "polars-series-str-split"]], "polars.Series.str.replace_all": [[1266, "polars-series-str-replace-all"]], "polars.Series.struct.schema": [[1297, "polars-series-struct-schema"]], "polars.Series.str.to_date": [[1284, "polars-series-str-to-date"]], "polars.Series.sum": [[1299, "polars-series-sum"]], "polars.Series.str.strip_prefix": [[1280, "polars-series-str-strip-prefix"]], "polars.Series.tanh": [[1304, "polars-series-tanh"]], "polars.Series.to_arrow": [[1305, "polars-series-to-arrow"]], "polars.Series.str.strptime": [[1282, "polars-series-str-strptime"]], "polars.Series.str.replace_many": [[1267, "polars-series-str-replace-many"]], "polars.Series.str.strip_chars_start": [[1279, "polars-series-str-strip-chars-start"]], "polars.Series.struct.rename_fields": [[1296, "polars-series-struct-rename-fields"]], "polars.Series.struct.json_encode": [[1295, "polars-series-struct-json-encode"]], "polars.Series.str.to_uppercase": [[1291, "polars-series-str-to-uppercase"]], "polars.Series.str.ljust": [[1259, "polars-series-str-ljust"]], "polars.Series.str.len_bytes": [[1256, "polars-series-str-len-bytes"]], "polars.Series.str.split_exact": [[1273, "polars-series-str-split-exact"]], "polars.Series.to_frame": [[1307, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1308, "polars-series-to-init-repr"]], "polars.Series.str.replace": [[1265, "polars-series-str-replace"]], "polars.Series.str.json_extract": [[1254, "polars-series-str-json-extract"]], "polars.Series.str.tail": [[1283, "polars-series-str-tail"]], "polars.Series.tail": [[1300, "polars-series-tail"]], "polars.Series.series_equal": [[1221, "polars-series-series-equal"]], "polars.Series.set": [[1222, "polars-series-set"]], "polars.Series.shuffle": [[1230, "polars-series-shuffle"]], "polars.Series.str.contains_any": [[1241, "polars-series-str-contains-any"]], "polars.Series.str.extract_all": [[1249, "polars-series-str-extract-all"]], "polars.Series.sqrt": [[1237, "polars-series-sqrt"]], "polars.Series.str.count_matches": [[1243, "polars-series-str-count-matches"]], "polars.Series.str.extract": [[1248, "polars-series-str-extract"]], "polars.Series.sign": [[1231, "polars-series-sign"]], "polars.Series.str.count_match": [[1242, "polars-series-str-count-match"]], "polars.Series.rolling_apply": [[1205, "polars-series-rolling-apply"]], "polars.Series.rolling_median": [[1209, "polars-series-rolling-median"]], "polars.Series.rolling_skew": [[1212, "polars-series-rolling-skew"]], "polars.Series.str.find": [[1251, "polars-series-str-find"]], "polars.Series.replace": [[1200, "polars-series-replace"]], "polars.Series.reshape": [[1201, "polars-series-reshape"]], "polars.Series.sinh": [[1233, "polars-series-sinh"]], "polars.Series.shift": [[1226, "polars-series-shift"]], "polars.Series.rolling_mean": [[1208, "polars-series-rolling-mean"]], "polars.Series.str.explode": [[1247, "polars-series-str-explode"]], "polars.Series.rolling_std": [[1213, "polars-series-rolling-std"]], "polars.Series.sin": [[1232, "polars-series-sin"]], "polars.Series.shape": [[1225, "polars-series-shape"]], "polars.Series.rolling_sum": [[1214, "polars-series-rolling-sum"]], "polars.Series.str.contains": [[1240, "polars-series-str-contains"]], "polars.Series.rolling_min": [[1210, "polars-series-rolling-min"]], "polars.Series.slice": [[1235, "polars-series-slice"]], "polars.Series.set_sorted": [[1224, "polars-series-set-sorted"]], "polars.Series.str.json_decode": [[1253, "polars-series-str-json-decode"]], "polars.Series.rename": [[1199, "polars-series-rename"]], "polars.Series.round_sig_figs": [[1217, "polars-series-round-sig-figs"]], "polars.Series.sample": [[1218, "polars-series-sample"]], "polars.Series.search_sorted": [[1220, "polars-series-search-sorted"]], "polars.Series.shift_and_fill": [[1227, "polars-series-shift-and-fill"]], "polars.Series.str.concat": [[1239, "polars-series-str-concat"]], "polars.Series.rolling_var": [[1215, "polars-series-rolling-var"]], "polars.Series.rolling_quantile": [[1211, "polars-series-rolling-quantile"]], "polars.Series.rolling_max": [[1207, "polars-series-rolling-max"]], "polars.Series.str.decode": [[1244, "polars-series-str-decode"]], "polars.Series.reverse": [[1202, "polars-series-reverse"]], "polars.Series.skew": [[1234, "polars-series-skew"]], "polars.Series.std": [[1238, "polars-series-std"]], "polars.Series.shrink_to_fit": [[1229, "polars-series-shrink-to-fit"]], "polars.Series.sort": [[1236, "polars-series-sort"]], "polars.Series.str.head": [[1252, "polars-series-str-head"]], "polars.Series.shrink_dtype": [[1228, "polars-series-shrink-dtype"]], "polars.Series.scatter": [[1219, "polars-series-scatter"]], "polars.Series.set_at_idx": [[1223, "polars-series-set-at-idx"]], "polars.Series.str.extract_groups": [[1250, "polars-series-str-extract-groups"]], "polars.Series.rolling_map": [[1206, "polars-series-rolling-map"]], "polars.Series.str.ends_with": [[1246, "polars-series-str-ends-with"]], "polars.Series.round": [[1216, "polars-series-round"]], "polars.Series.rechunk": [[1197, "polars-series-rechunk"]], "polars.Series.rle_id": [[1204, "polars-series-rle-id"]], "polars.Series.rle": [[1203, "polars-series-rle"]], "polars.Series.str.encode": [[1245, "polars-series-str-encode"]], "polars.Series.reinterpret": [[1198, "polars-series-reinterpret"]], "polars.Series.list.max": [[1149, "polars-series-list-max"]], "polars.Series.list.min": [[1152, "polars-series-list-min"]], "polars.Series.mean": [[1178, "polars-series-mean"]], "polars.Series.log": [[1171, "polars-series-log"]], "polars.Series.list.median": [[1151, "polars-series-list-median"]], "polars.Series.list.tail": [[1165, "polars-series-list-tail"]], "polars.Series.list.last": [[1146, "polars-series-list-last"]], "polars.Series.map_elements": [[1176, "polars-series-map-elements"]], "polars.Series.median": [[1179, "polars-series-median"]], "polars.Series.list.sort": [[1162, "polars-series-list-sort"]], "polars.Series.quantile": [[1195, "polars-series-quantile"]], "polars.Series.list.n_unique": [[1153, "polars-series-list-n-unique"]], "polars.Series.list.set_symmetric_difference": [[1158, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.first": [[1140, "polars-series-list-first"]], "polars.Series.list.take": [[1166, "polars-series-list-take"]], "polars.Series.name": [[1184, "polars-series-name"]], "polars.Series.product": [[1193, "polars-series-product"]], "polars.Series.mode": [[1181, "polars-series-mode"]], "polars.Series.list.unique": [[1169, "polars-series-list-unique"]], "polars.Series.list.shift": [[1160, "polars-series-list-shift"]], "polars.Series.n_unique": [[1183, "polars-series-n-unique"]], "polars.Series.not_": [[1188, "polars-series-not"]], "polars.Series.log1p": [[1173, "polars-series-log1p"]], "polars.Series.new_from_index": [[1187, "polars-series-new-from-index"]], "polars.Series.pct_change": [[1190, "polars-series-pct-change"]], "polars.Series.list.sample": [[1155, "polars-series-list-sample"]], "polars.Series.min": [[1180, "polars-series-min"]], "polars.Series.nan_max": [[1185, "polars-series-nan-max"]], "polars.Series.log10": [[1172, "polars-series-log10"]], "polars.Series.list.to_struct": [[1168, "polars-series-list-to-struct"]], "polars.Series.n_chunks": [[1182, "polars-series-n-chunks"]], "polars.Series.list.sum": [[1164, "polars-series-list-sum"]], "polars.Series.peak_max": [[1191, "polars-series-peak-max"]], "polars.Series.list.gather_every": [[1142, "polars-series-list-gather-every"]], "polars.Series.list.join": [[1145, "polars-series-list-join"]], "polars.Series.list.set_difference": [[1156, "polars-series-list-set-difference"]], "polars.Series.list.set_union": [[1159, "polars-series-list-set-union"]], "polars.Series.list.var": [[1170, "polars-series-list-var"]], "polars.Series.max": [[1177, "polars-series-max"]], "polars.Series.list.head": [[1144, "polars-series-list-head"]], "polars.Series.peak_min": [[1192, "polars-series-peak-min"]], "polars.Series.list.reverse": [[1154, "polars-series-list-reverse"]], "polars.Series.list.mean": [[1150, "polars-series-list-mean"]], "polars.Series.null_count": [[1189, "polars-series-null-count"]], "polars.Series.list.get": [[1143, "polars-series-list-get"]], "polars.Series.list.lengths": [[1148, "polars-series-list-lengths"]], "polars.Series.map_dict": [[1175, "polars-series-map-dict"]], "polars.Series.nan_min": [[1186, "polars-series-nan-min"]], "polars.Series.qcut": [[1194, "polars-series-qcut"]], "polars.Series.rank": [[1196, "polars-series-rank"]], "polars.Series.list.slice": [[1161, "polars-series-list-slice"]], "polars.Series.list.to_array": [[1167, "polars-series-list-to-array"]], "polars.Series.list.set_intersection": [[1157, "polars-series-list-set-intersection"]], "polars.Series.list.std": [[1163, "polars-series-list-std"]], "polars.Series.lower_bound": [[1174, "polars-series-lower-bound"]], "polars.Series.list.len": [[1147, "polars-series-list-len"]], "polars.Series.list.gather": [[1141, "polars-series-list-gather"]], "polars.Series.fill_nan": [[1085, "polars-series-fill-nan"]], "polars.Series.gather": [[1090, "polars-series-gather"]], "polars.Series.is_utf8": [[1123, "polars-series-is-utf8"]], "polars.Series.item": [[1124, "polars-series-item"]], "polars.Series.is_float": [[1109, "polars-series-is-float"]], "polars.Series.is_null": [[1118, "polars-series-is-null"]], "polars.Series.is_empty": [[1105, "polars-series-is-empty"]], "polars.Series.list.count_match": [[1134, "polars-series-list-count-match"]], "polars.Series.extend_constant": [[1084, "polars-series-extend-constant"]], "polars.Series.is_nan": [[1115, "polars-series-is-nan"]], "polars.Series.fill_null": [[1086, "polars-series-fill-null"]], "polars.Series.is_sorted": [[1120, "polars-series-is-sorted"]], "polars.Series.list.all": [[1128, "polars-series-list-all"]], "polars.Series.is_boolean": [[1103, "polars-series-is-boolean"]], "polars.Series.is_in": [[1110, "polars-series-is-in"]], "polars.Series.len": [[1126, "polars-series-len"]], "polars.Series.has_nulls": [[1093, "polars-series-has-nulls"]], "polars.Series.is_numeric": [[1119, "polars-series-is-numeric"]], "polars.Series.floor": [[1089, "polars-series-floor"]], "polars.Series.has_validity": [[1094, "polars-series-has-validity"]], "polars.Series.get_chunks": [[1092, "polars-series-get-chunks"]], "polars.Series.hash": [[1095, "polars-series-hash"]], "polars.Series.list.arg_min": [[1131, "polars-series-list-arg-min"]], "polars.Series.is_first_distinct": [[1108, "polars-series-is-first-distinct"]], "polars.Series.interpolate_by": [[1101, "polars-series-interpolate-by"]], "polars.Series.is_last_distinct": [[1114, "polars-series-is-last-distinct"]], "polars.Series.list.explode": [[1139, "polars-series-list-explode"]], "polars.Series.is_first": [[1107, "polars-series-is-first"]], "polars.Series.inner_dtype": [[1099, "polars-series-inner-dtype"]], "polars.Series.is_duplicated": [[1104, "polars-series-is-duplicated"]], "polars.Series.list.count_matches": [[1135, "polars-series-list-count-matches"]], "polars.Series.is_finite": [[1106, "polars-series-is-finite"]], "polars.Series.is_temporal": [[1121, "polars-series-is-temporal"]], "polars.Series.list.concat": [[1132, "polars-series-list-concat"]], "polars.Series.filter": [[1087, "polars-series-filter"]], "polars.Series.list.arg_max": [[1130, "polars-series-list-arg-max"]], "polars.Series.is_not_nan": [[1116, "polars-series-is-not-nan"]], "polars.Series.list.diff": [[1136, "polars-series-list-diff"]], "polars.Series.list.contains": [[1133, "polars-series-list-contains"]], "polars.Series.limit": [[1127, "polars-series-limit"]], "polars.Series.gather_every": [[1091, "polars-series-gather-every"]], "polars.Series.is_infinite": [[1111, "polars-series-is-infinite"]], "polars.Series.list.any": [[1129, "polars-series-list-any"]], "polars.Series.is_not_null": [[1117, "polars-series-is-not-null"]], "polars.Series.is_unique": [[1122, "polars-series-is-unique"]], "polars.Series.extend": [[1083, "polars-series-extend"]], "polars.Series.kurtosis": [[1125, "polars-series-kurtosis"]], "polars.Series.head": [[1096, "polars-series-head"]], "polars.Series.list.drop_nulls": [[1137, "polars-series-list-drop-nulls"]], "polars.Series.hist": [[1097, "polars-series-hist"]], "polars.Series.implode": [[1098, "polars-series-implode"]], "polars.Series.list.eval": [[1138, "polars-series-list-eval"]], "polars.Series.is_last": [[1113, "polars-series-is-last"]], "polars.Series.flags": [[1088, "polars-series-flags"]], "polars.Series.is_between": [[1102, "polars-series-is-between"]], "polars.Series.is_integer": [[1112, "polars-series-is-integer"]], "polars.Series.interpolate": [[1100, "polars-series-interpolate"]], "polars.Series.dt.replace_time_zone": [[1053, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.strftime": [[1057, "polars-series-dt-strftime"]], "polars.Series.dt.total_microseconds": [[1063, "polars-series-dt-total-microseconds"]], "polars.Series.dt.weekday": [[1070, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[1071, "polars-series-dt-with-time-unit"]], "polars.Series.dt.dst_offset": [[1028, "polars-series-dt-dst-offset"]], "polars.Series.dt.to_string": [[1060, "polars-series-dt-to-string"]], "polars.Series.dt.mean": [[1035, "polars-series-dt-mean"]], "polars.Series.dt.min": [[1042, "polars-series-dt-min"]], "polars.Series.dt.total_hours": [[1062, "polars-series-dt-total-hours"]], "polars.Series.dt.total_nanoseconds": [[1066, "polars-series-dt-total-nanoseconds"]], "polars.Series.entropy": [[1074, "polars-series-entropy"]], "polars.Series.dt.millennium": [[1039, "polars-series-dt-millennium"]], "polars.Series.dt.month_start": [[1047, "polars-series-dt-month-start"]], "polars.Series.dt.iso_year": [[1033, "polars-series-dt-iso-year"]], "polars.Series.dt.ordinal_day": [[1051, "polars-series-dt-ordinal-day"]], "polars.Series.dt.quarter": [[1052, "polars-series-dt-quarter"]], "polars.Series.ewm_mean_by": [[1078, "polars-series-ewm-mean-by"]], "polars.Series.estimated_size": [[1076, "polars-series-estimated-size"]], "polars.Series.dt.week": [[1069, "polars-series-dt-week"]], "polars.Series.dt.minute": [[1043, "polars-series-dt-minute"]], "polars.Series.dt.days": [[1027, "polars-series-dt-days"]], "polars.Series.dt.nanosecond": [[1048, "polars-series-dt-nanosecond"]], "polars.Series.dt.hour": [[1030, "polars-series-dt-hour"]], "polars.Series.dt.microseconds": [[1038, "polars-series-dt-microseconds"]], "polars.Series.dt.nanoseconds": [[1049, "polars-series-dt-nanoseconds"]], "polars.Series.ewm_mean": [[1077, "polars-series-ewm-mean"]], "polars.Series.dtype": [[1073, "polars-series-dtype"]], "polars.Series.dt.second": [[1055, "polars-series-dt-second"]], "polars.Series.exp": [[1081, "polars-series-exp"]], "polars.Series.dt.minutes": [[1044, "polars-series-dt-minutes"]], "polars.Series.dt.millisecond": [[1040, "polars-series-dt-millisecond"]], "polars.Series.dt.median": [[1036, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[1037, "polars-series-dt-microsecond"]], "polars.Series.dt.round": [[1054, "polars-series-dt-round"]], "polars.Series.dt.milliseconds": [[1041, "polars-series-dt-milliseconds"]], "polars.Series.dt.timestamp": [[1059, "polars-series-dt-timestamp"]], "polars.Series.ewm_var": [[1080, "polars-series-ewm-var"]], "polars.Series.explode": [[1082, "polars-series-explode"]], "polars.Series.dt.time": [[1058, "polars-series-dt-time"]], "polars.Series.ewm_std": [[1079, "polars-series-ewm-std"]], "polars.Series.dt.total_milliseconds": [[1064, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.seconds": [[1056, "polars-series-dt-seconds"]], "polars.Series.dt.year": [[1072, "polars-series-dt-year"]], "polars.Series.dt.max": [[1034, "polars-series-dt-max"]], "polars.Series.dt.month": [[1045, "polars-series-dt-month"]], "polars.Series.dt.day": [[1026, "polars-series-dt-day"]], "polars.Series.dt.hours": [[1031, "polars-series-dt-hours"]], "polars.Series.dt.month_end": [[1046, "polars-series-dt-month-end"]], "polars.Series.dt.total_seconds": [[1067, "polars-series-dt-total-seconds"]], "polars.Series.dt.is_leap_year": [[1032, "polars-series-dt-is-leap-year"]], "polars.Series.dt.total_minutes": [[1065, "polars-series-dt-total-minutes"]], "polars.Series.dt.truncate": [[1068, "polars-series-dt-truncate"]], "polars.Series.dt.offset_by": [[1050, "polars-series-dt-offset-by"]], "polars.Series.dt.total_days": [[1061, "polars-series-dt-total-days"]], "polars.Series.equals": [[1075, "polars-series-equals"]], "polars.Series.dt.epoch": [[1029, "polars-series-dt-epoch"]], "polars.exceptions.ColumnNotFoundError": [[94, "polars-exceptions-columnnotfounderror"]], "polars.from_numpy": [[112, "polars-from-numpy"]], "polars.build_info": [[59, "polars-build-info"]], "polars.exceptions.NoRowsReturnedError": [[99, "polars-exceptions-norowsreturnederror"]], "polars.datatypes.Decimal": [[70, "polars-datatypes-decimal"]], "polars.datatypes.String": [[82, "polars-datatypes-string"]], "polars.datatypes.Null": [[80, "polars-datatypes-null"]], "polars.exceptions.PolarsError": [[100, "polars-exceptions-polarserror"]], "polars.from_arrow": [[108, "polars-from-arrow"]], "polars.datatypes.Duration": [[71, "polars-datatypes-duration"]], "polars.datatypes.Array": [[63, "polars-datatypes-array"]], "polars.datatypes.Categorical": [[66, "polars-datatypes-categorical"]], "polars.from_dicts": [[111, "polars-from-dicts"]], "polars.exceptions.SchemaFieldNotFoundError": [[104, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.SchemaError": [[103, "polars-exceptions-schemaerror"]], "polars.collect_all_async": [[61, "polars-collect-all-async"]], "polars.datatypes.Object": [[81, "polars-datatypes-object"]], "polars.datatypes.Struct": [[83, "polars-datatypes-struct"]], "polars.concat": [[62, "polars-concat"]], "polars.datatypes.Int16": [[75, "polars-datatypes-int16"]], "polars.datatypes.Int8": [[78, "polars-datatypes-int8"]], "polars.exceptions.DuplicateError": [[96, "polars-exceptions-duplicateerror"]], "polars.exceptions.TooManyRowsReturnedError": [[107, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_pandas": [[113, "polars-from-pandas"]], "polars.enable_string_cache": [[92, "polars-enable-string-cache"]], "polars.exceptions.PolarsPanicError": [[101, "polars-exceptions-polarspanicerror"]], "polars.exceptions.ShapeError": [[105, "polars-exceptions-shapeerror"]], "polars.datatypes.Time": [[84, "polars-datatypes-time"]], "polars.exceptions.InvalidOperationError": [[97, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.RowsError": [[102, "polars-exceptions-rowserror"]], "polars.datatypes.UInt64": [[87, "polars-datatypes-uint64"]], "polars.datatypes.Date": [[68, "polars-datatypes-date"]], "polars.datatypes.Utf8": [[90, "polars-datatypes-utf8"]], "polars.datatypes.Float64": [[74, "polars-datatypes-float64"]], "polars.disable_string_cache": [[91, "polars-disable-string-cache"]], "polars.exceptions.StructFieldNotFoundError": [[106, "polars-exceptions-structfieldnotfounderror"]], "polars.datatypes.Boolean": [[65, "polars-datatypes-boolean"]], "polars.exceptions.ArrowError": [[93, "polars-exceptions-arrowerror"]], "polars.exceptions.ComputeError": [[95, "polars-exceptions-computeerror"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.datatypes.DataType": [[67, "polars-datatypes-datatype"]], "polars.datatypes.Datetime": [[69, "polars-datatypes-datetime"]], "polars.from_dataframe": [[109, "polars-from-dataframe"]], "polars.collect_all": [[60, "polars-collect-all"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.datatypes.UInt16": [[85, "polars-datatypes-uint16"]], "polars.exceptions.NoDataError": [[98, "polars-exceptions-nodataerror"]], "polars.from_dict": [[110, "polars-from-dict"]], "polars.datatypes.UInt8": [[88, "polars-datatypes-uint8"]], "polars.datatypes.List": [[79, "polars-datatypes-list"]], "polars.datatypes.Unknown": [[89, "polars-datatypes-unknown"]], "polars.datatypes.Int64": [[77, "polars-datatypes-int64"]], "polars.datatypes.UInt32": [[86, "polars-datatypes-uint32"]], "polars.datatypes.Int32": [[76, "polars-datatypes-int32"]], "polars.datatypes.Float32": [[73, "polars-datatypes-float32"]], "polars.datatypes.Binary": [[64, "polars-datatypes-binary"]], "polars.datatypes.Enum": [[72, "polars-datatypes-enum"]], "polars.Series.cast": [[985, "polars-series-cast"]], "polars.Series.arr.reverse": [[970, "polars-series-arr-reverse"]], "polars.Series.cat.get_categories": [[986, "polars-series-cat-get-categories"]], "polars.Series.cbrt": [[991, "polars-series-cbrt"]], "polars.Series.cat.is_local": [[987, "polars-series-cat-is-local"]], "polars.Series.cos": [[999, "polars-series-cos"]], "polars.Series.cummin": [[1008, "polars-series-cummin"]], "polars.Series.dt.date": [[1024, "polars-series-dt-date"]], "polars.Series.drop_nans": [[1016, "polars-series-drop-nans"]], "polars.Series.cum_max": [[1003, "polars-series-cum-max"]], "polars.Series.clone": [[998, "polars-series-clone"]], "polars.Series.cosh": [[1000, "polars-series-cosh"]], "polars.Series.dt.base_utc_offset": [[1019, "polars-series-dt-base-utc-offset"]], "polars.Series.arr.to_list": [[975, "polars-series-arr-to-list"]], "polars.Series.arr.shift": [[971, "polars-series-arr-shift"]], "polars.Series.dot": [[1015, "polars-series-dot"]], "polars.Series.cum_prod": [[1005, "polars-series-cum-prod"]], "polars.Series.cumsum": [[1010, "polars-series-cumsum"]], "polars.Series.dt.century": [[1021, "polars-series-dt-century"]], "polars.Series.bin.ends_with": [[982, "polars-series-bin-ends-with"]], "polars.Series.cumprod": [[1009, "polars-series-cumprod"]], "polars.Series.cummax": [[1007, "polars-series-cummax"]], "polars.Series.diff": [[1014, "polars-series-diff"]], "polars.Series.cum_count": [[1002, "polars-series-cum-count"]], "polars.Series.dt.combine": [[1022, "polars-series-dt-combine"]], "polars.Series.dt.datetime": [[1025, "polars-series-dt-datetime"]], "polars.Series.clip": [[995, "polars-series-clip"]], "polars.Series.clip_max": [[996, "polars-series-clip-max"]], "polars.Series.cat.uses_lexical_ordering": [[990, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cot": [[1001, "polars-series-cot"]], "polars.Series.arr.unique": [[977, "polars-series-arr-unique"]], "polars.Series.cat.set_ordering": [[988, "polars-series-cat-set-ordering"]], "polars.Series.arr.n_unique": [[969, "polars-series-arr-n-unique"]], "polars.Series.chunk_lengths": [[993, "polars-series-chunk-lengths"]], "polars.Series.clip_min": [[997, "polars-series-clip-min"]], "polars.Series.bin.contains": [[979, "polars-series-bin-contains"]], "polars.Series.arr.std": [[973, "polars-series-arr-std"]], "polars.Series.bin.starts_with": [[983, "polars-series-bin-starts-with"]], "polars.Series.arr.var": [[978, "polars-series-arr-var"]], "polars.Series.arr.to_struct": [[976, "polars-series-arr-to-struct"]], "polars.Series.clear": [[994, "polars-series-clear"]], "polars.Series.bin.encode": [[981, "polars-series-bin-encode"]], "polars.Series.cut": [[1012, "polars-series-cut"]], "polars.Series.arr.sum": [[974, "polars-series-arr-sum"]], "polars.Series.ceil": [[992, "polars-series-ceil"]], "polars.Series.dt.convert_time_zone": [[1023, "polars-series-dt-convert-time-zone"]], "polars.Series.describe": [[1013, "polars-series-describe"]], "polars.Series.cumulative_eval": [[1011, "polars-series-cumulative-eval"]], "polars.Series.dt.add_business_days": [[1018, "polars-series-dt-add-business-days"]], "polars.Series.cat.to_local": [[989, "polars-series-cat-to-local"]], "polars.Series.bottom_k": [[984, "polars-series-bottom-k"]], "polars.Series.dt.cast_time_unit": [[1020, "polars-series-dt-cast-time-unit"]], "polars.Series.drop_nulls": [[1017, "polars-series-drop-nulls"]], "polars.Series.cum_min": [[1004, "polars-series-cum-min"]], "polars.Series.bin.decode": [[980, "polars-series-bin-decode"]], "polars.Series.cum_sum": [[1006, "polars-series-cum-sum"]], "polars.Series.arr.sort": [[972, "polars-series-arr-sort"]], "polars.LazyFrame.show_graph": [[892, "polars-lazyframe-show-graph"]], "polars.LazyFrame.null_count": [[878, "polars-lazyframe-null-count"]], "polars.LazyFrame.group_by_rolling": [[858, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.join_asof": [[866, "polars-lazyframe-join-asof"]], "polars.LazyFrame.serialize": [[888, "polars-lazyframe-serialize"]], "polars.LazyFrame.sum": [[897, "polars-lazyframe-sum"]], "polars.LazyFrame.map_batches": [[871, "polars-lazyframe-map-batches"]], "polars.LazyFrame.groupby_dynamic": [[860, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.last": [[867, "polars-lazyframe-last"]], "polars.LazyFrame.top_k": [[900, "polars-lazyframe-top-k"]], "polars.LazyFrame.group_by_dynamic": [[857, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.set_sorted": [[889, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.take_every": [[899, "polars-lazyframe-take-every"]], "polars.LazyFrame.groupby": [[859, "polars-lazyframe-groupby"]], "polars.LazyFrame.std": [[896, "polars-lazyframe-std"]], "polars.LazyFrame.rename": [[882, "polars-lazyframe-rename"]], "polars.LazyFrame.melt": [[875, "polars-lazyframe-melt"]], "polars.LazyFrame.schema": [[885, "polars-lazyframe-schema"]], "polars.LazyFrame.var": [[904, "polars-lazyframe-var"]], "polars.LazyFrame.update": [[903, "polars-lazyframe-update"]], "polars.LazyFrame.with_columns_seq": [[907, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.reverse": [[883, "polars-lazyframe-reverse"]], "polars.LazyFrame.select_seq": [[887, "polars-lazyframe-select-seq"]], "polars.LazyFrame.groupby_rolling": [[861, "polars-lazyframe-groupby-rolling"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[911, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.LazyFrame.tail": [[898, "polars-lazyframe-tail"]], "polars.LazyFrame.profile": [[880, "polars-lazyframe-profile"]], "polars.LazyFrame.interpolate": [[864, "polars-lazyframe-interpolate"]], "polars.LazyFrame.with_row_count": [[909, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.group_by": [[856, "polars-lazyframe-group-by"]], "polars.LazyFrame.median": [[874, "polars-lazyframe-median"]], "polars.LazyFrame.sort": [[894, "polars-lazyframe-sort"]], "polars.LazyFrame.gather_every": [[855, "polars-lazyframe-gather-every"]], "polars.LazyFrame.mean": [[873, "polars-lazyframe-mean"]], "polars.LazyFrame.width": [[905, "polars-lazyframe-width"]], "polars.LazyFrame.rolling": [[884, "polars-lazyframe-rolling"]], "polars.LazyFrame.lazy": [[868, "polars-lazyframe-lazy"]], "polars.LazyFrame.select": [[886, "polars-lazyframe-select"]], "polars.LazyFrame.with_context": [[908, "polars-lazyframe-with-context"]], "polars.LazyFrame.limit": [[869, "polars-lazyframe-limit"]], "polars.LazyFrame.pipe": [[879, "polars-lazyframe-pipe"]], "polars.LazyFrame.unnest": [[902, "polars-lazyframe-unnest"]], "polars.LazyFrame.with_row_index": [[910, "polars-lazyframe-with-row-index"]], "polars.LazyFrame.map": [[870, "polars-lazyframe-map"]], "polars.LazyFrame.shift": [[890, "polars-lazyframe-shift"]], "polars.LazyFrame.sql": [[895, "polars-lazyframe-sql"]], "polars.LazyFrame.max": [[872, "polars-lazyframe-max"]], "polars.LazyFrame.merge_sorted": [[876, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.unique": [[901, "polars-lazyframe-unique"]], "polars.LazyFrame.slice": [[893, "polars-lazyframe-slice"]], "polars.LazyFrame.inspect": [[863, "polars-lazyframe-inspect"]], "polars.LazyFrame.join": [[865, "polars-lazyframe-join"]], "polars.LazyFrame.with_columns": [[906, "polars-lazyframe-with-columns"]], "polars.LazyFrame.shift_and_fill": [[891, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.head": [[862, "polars-lazyframe-head"]], "polars.LazyFrame.quantile": [[881, "polars-lazyframe-quantile"]], "polars.LazyFrame.min": [[877, "polars-lazyframe-min"]], "polars.cumreduce": [[755, "polars-cumreduce"]], "polars.rolling_cov": [[796, "polars-rolling-cov"]], "polars.select": [[797, "polars-select"]], "polars.from_epoch": [[770, "polars-from-epoch"]], "polars.cum_reduce": [[751, "polars-cum-reduce"]], "polars.cum_sum": [[752, "polars-cum-sum"]], "polars.date_range": [[759, "polars-date-range"]], "polars.cumsum": [[756, "polars-cumsum"]], "polars.coalesce": [[743, "polars-coalesce"]], "polars.concat_str": [[745, "polars-concat-str"]], "polars.min": [[787, "polars-min"]], "polars.mean_horizontal": [[785, "polars-mean-horizontal"]], "polars.datetime_range": [[762, "polars-datetime-range"]], "polars.len": [[777, "polars-len"]], "polars.cum_sum_horizontal": [[753, "polars-cum-sum-horizontal"]], "polars.max": [[782, "polars-max"]], "polars.head": [[772, "polars-head"]], "polars.last": [[776, "polars-last"]], "polars.cumfold": [[754, "polars-cumfold"]], "polars.n_unique": [[789, "polars-n-unique"]], "polars.exclude": [[766, "polars-exclude"]], "polars.max_horizontal": [[783, "polars-max-horizontal"]], "polars.map": [[779, "polars-map"]], "polars.cumsum_horizontal": [[757, "polars-cumsum-horizontal"]], "polars.map_batches": [[780, "polars-map-batches"]], "polars.nth": [[790, "polars-nth"]], "polars.count": [[747, "polars-count"]], "polars.implode": [[773, "polars-implode"]], "polars.int_range": [[774, "polars-int-range"]], "polars.date_ranges": [[760, "polars-date-ranges"]], "polars.reduce": [[793, "polars-reduce"]], "polars.ones": [[791, "polars-ones"]], "polars.element": [[765, "polars-element"]], "polars.concat_list": [[744, "polars-concat-list"]], "polars.datetime": [[761, "polars-datetime"]], "polars.map_groups": [[781, "polars-map-groups"]], "polars.int_ranges": [[775, "polars-int-ranges"]], "polars.fold": [[768, "polars-fold"]], "polars.min_horizontal": [[788, "polars-min-horizontal"]], "polars.corr": [[746, "polars-corr"]], "polars.quantile": [[792, "polars-quantile"]], "polars.median": [[786, "polars-median"]], "polars.repeat": [[794, "polars-repeat"]], "polars.mean": [[784, "polars-mean"]], "polars.cov": [[748, "polars-cov"]], "polars.cum_count": [[749, "polars-cum-count"]], "polars.datetime_ranges": [[763, "polars-datetime-ranges"]], "polars.rolling_corr": [[795, "polars-rolling-corr"]], "polars.first": [[767, "polars-first"]], "polars.lit": [[778, "polars-lit"]], "polars.business_day_count": [[742, "polars-business-day-count"]], "polars.arg_where": [[741, "polars-arg-where"]], "polars.cum_fold": [[750, "polars-cum-fold"]], "polars.date": [[758, "polars-date"]], "polars.duration": [[764, "polars-duration"]], "polars.groups": [[771, "polars-groups"]], "polars.format": [[769, "polars-format"]], "polars.Expr.str.tail": [[698, "polars-expr-str-tail"]], "polars.Expr.str.strip": [[691, "polars-expr-str-strip"]], "polars.Expr.str.to_titlecase": [[705, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_decimal": [[701, "polars-expr-str-to-decimal"]], "polars.Expr.tail": [[715, "polars-expr-tail"]], "polars.Expr.str.to_time": [[704, "polars-expr-str-to-time"]], "polars.Expr.top_k": [[721, "polars-expr-top-k"]], "polars.Expr.struct.field": [[708, "polars-expr-struct-field"]], "polars.Expr.var": [[728, "polars-expr-var"]], "polars.Expr.where": [[729, "polars-expr-where"]], "polars.Expr.str.to_lowercase": [[703, "polars-expr-str-to-lowercase"]], "polars.Expr.top_k_by": [[722, "polars-expr-top-k-by"]], "polars.Expr.upper_bound": [[726, "polars-expr-upper-bound"]], "polars.Expr.str.strip_chars": [[692, "polars-expr-str-strip-chars"]], "polars.all": [[731, "polars-all"]], "polars.Expr.str.strptime": [[697, "polars-expr-str-strptime"]], "polars.Expr.str.to_integer": [[702, "polars-expr-str-to-integer"]], "polars.Expr.take": [[716, "polars-expr-take"]], "polars.Expr.value_counts": [[727, "polars-expr-value-counts"]], "polars.Expr.str.strip_chars_end": [[693, "polars-expr-str-strip-chars-end"]], "polars.arctan2": [[738, "polars-arctan2"]], "polars.Expr.str.strip_chars_start": [[694, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.strip_suffix": [[696, "polars-expr-str-strip-suffix"]], "polars.Expr.str.zfill": [[707, "polars-expr-str-zfill"]], "polars.Expr.str.split_exact": [[688, "polars-expr-str-split-exact"]], "polars.all_horizontal": [[732, "polars-all-horizontal"]], "polars.Expr.truediv": [[723, "polars-expr-truediv"]], "polars.Expr.take_every": [[717, "polars-expr-take-every"]], "polars.Expr.str.to_uppercase": [[706, "polars-expr-str-to-uppercase"]], "polars.approx_n_unique": [[736, "polars-approx-n-unique"]], "polars.Expr.str.splitn": [[689, "polars-expr-str-splitn"]], "polars.arg_sort_by": [[740, "polars-arg-sort-by"]], "polars.Expr.struct.with_fields": [[711, "polars-expr-struct-with-fields"]], "polars.Expr.str.starts_with": [[690, "polars-expr-str-starts-with"]], "polars.Expr.str.rjust": [[684, "polars-expr-str-rjust"]], "polars.Expr.str.rstrip": [[685, "polars-expr-str-rstrip"]], "polars.Expr.str.slice": [[686, "polars-expr-str-slice"]], "polars.Expr.str.to_datetime": [[700, "polars-expr-str-to-datetime"]], "polars.Expr.sum": [[714, "polars-expr-sum"]], "polars.Expr.unique": [[724, "polars-expr-unique"]], "polars.Expr.str.split": [[687, "polars-expr-str-split"]], "polars.Expr.unique_counts": [[725, "polars-expr-unique-counts"]], "polars.arange": [[737, "polars-arange"]], "polars.Expr.struct.json_encode": [[709, "polars-expr-struct-json-encode"]], "polars.Expr.to_physical": [[720, "polars-expr-to-physical"]], "polars.Expr.sub": [[712, "polars-expr-sub"]], "polars.Expr.suffix": [[713, "polars-expr-suffix"]], "polars.apply": [[735, "polars-apply"]], "polars.Expr.xor": [[730, "polars-expr-xor"]], "polars.Expr.str.strip_prefix": [[695, "polars-expr-str-strip-prefix"]], "polars.Expr.str.to_date": [[699, "polars-expr-str-to-date"]], "polars.any": [[733, "polars-any"]], "polars.Expr.tan": [[718, "polars-expr-tan"]], "polars.arctan2d": [[739, "polars-arctan2d"]], "polars.Expr.struct.rename_fields": [[710, "polars-expr-struct-rename-fields"]], "polars.Expr.tanh": [[719, "polars-expr-tanh"]], "polars.any_horizontal": [[734, "polars-any-horizontal"]], "polars.Series.arr.arg_min": [[958, "polars-series-arr-arg-min"]], "polars.Series.arccos": [[944, "polars-series-arccos"]], "polars.Series.arctanh": [[949, "polars-series-arctanh"]], "Descriptive": [[929, "descriptive"], [1329, "descriptive"], [308, "descriptive"]], "polars.Series.any": [[941, "polars-series-any"]], "polars.Series.arr.all": [[955, "polars-series-arr-all"]], "polars.Series.arr.join": [[964, "polars-series-arr-join"]], "polars.Series.arg_min": [[951, "polars-series-arg-min"]], "polars.Series.abs": [[938, "polars-series-abs"]], "Metadata": [[934, "metadata"]], "polars.Series.arctan": [[948, "polars-series-arctan"]], "polars.Series.arr.max": [[966, "polars-series-arr-max"]], "polars.Series.alias": [[939, "polars-series-alias"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[920, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[912, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.Series.arg_max": [[950, "polars-series-arg-max"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[916, "polars-lazyframe-group-by-lazygroupby-head"]], "LazyFrame": [[931, "lazyframe"]], "Attributes": [[928, "attributes"], [1324, "attributes"], [306, "attributes"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[918, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.Series.arg_sort": [[952, "polars-series-arg-sort"]], "polars.Series.arg_true": [[953, "polars-series-arg-true"]], "Selectors": [[936, "selectors"]], "Importing": [[936, "importing"]], "Set operations": [[936, "set-operations"]], "Functions": [[936, "functions"], [817, "functions"], [829, "functions"]], "polars.Series.arr.arg_max": [[957, "polars-series-arr-arg-max"]], "polars.Series.arr.first": [[962, "polars-series-arr-first"]], "Manipulation/selection": [[933, "manipulation-selection"], [1334, "manipulation-selection"], [822, "manipulation-selection"], [313, "manipulation-selection"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[927, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.Series.all": [[940, "polars-series-all"]], "polars.Series.append": [[942, "polars-series-append"]], "polars.Series.arcsin": [[946, "polars-series-arcsin"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[923, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[922, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[926, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[913, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.Series.arr.min": [[968, "polars-series-arr-min"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[917, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.arr.any": [[956, "polars-series-arr-any"]], "polars.Series.apply": [[943, "polars-series-apply"]], "GroupBy": [[930, "groupby"], [310, "groupby"]], "polars.Series.arr.count_matches": [[960, "polars-series-arr-count-matches"]], "Miscellaneous": [[932, "miscellaneous"], [1333, "miscellaneous"], [821, "miscellaneous"], [829, "miscellaneous"], [312, "miscellaneous"]], "Serialization": [[932, "serialization"], [312, "serialization"]], "polars.Series.arccosh": [[945, "polars-series-arccosh"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[921, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.Series.arr.explode": [[961, "polars-series-arr-explode"]], "polars.Series.arr.get": [[963, "polars-series-arr-get"]], "polars.Series.arr.last": [[965, "polars-series-arr-last"]], "polars.Series.arcsinh": [[947, "polars-series-arcsinh"]], "polars.Series.arg_unique": [[954, "polars-series-arg-unique"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[924, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[915, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.Series.arr.contains": [[959, "polars-series-arr-contains"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[914, "polars-lazyframe-group-by-lazygroupby-count"]], "Plugins": [[935, "plugins"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[925, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[919, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.arr.median": [[967, "polars-series-arr-median"]], "polars.Series.top_k": [[1315, "polars-series-top-k"]], "Series": [[1331, "series"]], "Array": [[1323, "array"], [810, "array"]], "Plot": [[1335, "plot"], [314, "plot"]], "Struct": [[1337, "struct"], [826, "struct"]], "polars.Series.view": [[1321, "polars-series-view"]], "polars.Series.unique": [[1316, "polars-series-unique"]], "Boolean": [[1326, "boolean"], [812, "boolean"]], "polars.Series.value_counts": [[1319, "polars-series-value-counts"]], "polars.Series.unique_counts": [[1317, "polars-series-unique-counts"]], "SQL Interface": [[1339, "sql-interface"]], "Methods": [[1339, "methods"]], "Computation": [[1328, "computation"], [816, "computation"], [307, "computation"]], "Testing": [[1340, "testing"]], "Asserts": [[1340, "asserts"]], "Parametric testing": [[1340, "parametric-testing"]], "Polars strategies": [[1340, "polars-strategies"]], "Strategy helpers": [[1340, "strategy-helpers"]], "Profiles": [[1340, "profiles"]], "Categories": [[1327, "categories"], [813, "categories"]], "polars.Series.to_numpy": [[1311, "polars-series-to-numpy"]], "polars.Series.to_physical": [[1313, "polars-series-to-physical"]], "polars.Series.var": [[1320, "polars-series-var"]], "List": [[1332, "list"], [819, "list"]], "Export": [[1330, "export"], [309, "export"]], "String": [[1336, "string"], [825, "string"], [315, "string"]], "Binary": [[1325, "binary"], [824, "binary"], [811, "binary"]], "Temporal": [[1338, "temporal"], [827, "temporal"], [315, "temporal"]], "polars.Series.to_pandas": [[1312, "polars-series-to-pandas"]], "polars.Series.zip_with": [[1322, "polars-series-zip-with"]], "polars.Series.upper_bound": [[1318, "polars-series-upper-bound"]], "polars.Series.to_torch": [[1314, "polars-series-to-torch"]], "polars.Expr.rolling_std_by": [[631, "polars-expr-rolling-std-by"]], "polars.Expr.sinh": [[647, "polars-expr-sinh"]], "polars.Expr.str.contains": [[655, "polars-expr-str-contains"]], "polars.Expr.sort": [[650, "polars-expr-sort"]], "polars.Expr.set_sorted": [[640, "polars-expr-set-sorted"]], "polars.Expr.rolling_sum": [[632, "polars-expr-rolling-sum"]], "polars.Expr.str.ends_with": [[661, "polars-expr-str-ends-with"]], "polars.Expr.str.count_match": [[657, "polars-expr-str-count-match"]], "polars.Expr.rolling_quantile_by": [[628, "polars-expr-rolling-quantile-by"]], "polars.Expr.sort_by": [[651, "polars-expr-sort-by"]], "polars.Expr.str.json_decode": [[668, "polars-expr-str-json-decode"]], "polars.Expr.sqrt": [[652, "polars-expr-sqrt"]], "polars.Expr.rolling_quantile": [[627, "polars-expr-rolling-quantile"]], "polars.Expr.str.count_matches": [[658, "polars-expr-str-count-matches"]], "polars.Expr.std": [[653, "polars-expr-std"]], "polars.Expr.str.extract_groups": [[665, "polars-expr-str-extract-groups"]], "polars.Expr.str.head": [[667, "polars-expr-str-head"]], "polars.Expr.str.lstrip": [[675, "polars-expr-str-lstrip"]], "polars.Expr.sample": [[638, "polars-expr-sample"]], "polars.Expr.sign": [[645, "polars-expr-sign"]], "polars.Expr.str.contains_any": [[656, "polars-expr-str-contains-any"]], "polars.Expr.str.extract_all": [[664, "polars-expr-str-extract-all"]], "polars.Expr.str.replace": [[680, "polars-expr-str-replace"]], "polars.Expr.str.replace_many": [[682, "polars-expr-str-replace-many"]], "polars.Expr.shift_and_fill": [[642, "polars-expr-shift-and-fill"]], "polars.Expr.str.json_path_match": [[670, "polars-expr-str-json-path-match"]], "polars.Expr.search_sorted": [[639, "polars-expr-search-sorted"]], "polars.Expr.rolling_skew": [[629, "polars-expr-rolling-skew"]], "polars.Expr.str.len_bytes": [[671, "polars-expr-str-len-bytes"]], "polars.Expr.str.encode": [[660, "polars-expr-str-encode"]], "polars.Expr.rolling_sum_by": [[633, "polars-expr-rolling-sum-by"]], "polars.Expr.shuffle": [[644, "polars-expr-shuffle"]], "polars.Expr.str.explode": [[662, "polars-expr-str-explode"]], "polars.Expr.str.reverse": [[683, "polars-expr-str-reverse"]], "polars.Expr.str.replace_all": [[681, "polars-expr-str-replace-all"]], "polars.Expr.rolling_std": [[630, "polars-expr-rolling-std"]], "polars.Expr.round_sig_figs": [[637, "polars-expr-round-sig-figs"]], "polars.Expr.str.extract": [[663, "polars-expr-str-extract"]], "polars.Expr.str.find": [[666, "polars-expr-str-find"]], "polars.Expr.str.pad_end": [[677, "polars-expr-str-pad-end"]], "polars.Expr.str.parse_int": [[679, "polars-expr-str-parse-int"]], "polars.Expr.slice": [[649, "polars-expr-slice"]], "polars.Expr.sin": [[646, "polars-expr-sin"]], "polars.Expr.shift": [[641, "polars-expr-shift"]], "polars.Expr.rolling_var": [[634, "polars-expr-rolling-var"]], "polars.Expr.str.decode": [[659, "polars-expr-str-decode"]], "polars.Expr.str.ljust": [[674, "polars-expr-str-ljust"]], "polars.Expr.str.concat": [[654, "polars-expr-str-concat"]], "polars.Expr.str.json_extract": [[669, "polars-expr-str-json-extract"]], "polars.Expr.str.n_chars": [[676, "polars-expr-str-n-chars"]], "polars.Expr.shrink_dtype": [[643, "polars-expr-shrink-dtype"]], "polars.Expr.str.len_chars": [[672, "polars-expr-str-len-chars"]], "polars.Expr.round": [[636, "polars-expr-round"]], "polars.Expr.str.lengths": [[673, "polars-expr-str-lengths"]], "polars.Expr.skew": [[648, "polars-expr-skew"]], "polars.Expr.rolling_var_by": [[635, "polars-expr-rolling-var-by"]], "polars.Expr.str.pad_start": [[678, "polars-expr-str-pad-start"]], "polars.Expr.mode": [[576, "polars-expr-mode"]], "polars.Expr.not_": [[593, "polars-expr-not"]], "polars.Expr.mul": [[577, "polars-expr-mul"]], "polars.Expr.rolling_min": [[625, "polars-expr-rolling-min"]], "polars.Expr.pow": [[601, "polars-expr-pow"]], "polars.Expr.null_count": [[594, "polars-expr-null-count"]], "polars.Expr.rolling_apply": [[617, "polars-expr-rolling-apply"]], "polars.Expr.name.map": [[580, "polars-expr-name-map"]], "polars.Expr.ne": [[590, "polars-expr-ne"]], "polars.Expr.reshape": [[612, "polars-expr-reshape"]], "polars.Expr.over": [[596, "polars-expr-over"]], "polars.Expr.rle_id": [[615, "polars-expr-rle-id"]], "polars.Expr.rolling_median_by": [[624, "polars-expr-rolling-median-by"]], "polars.Expr.radians": [[606, "polars-expr-radians"]], "polars.Expr.rolling": [[616, "polars-expr-rolling"]], "polars.Expr.reverse": [[613, "polars-expr-reverse"]], "polars.Expr.meta.write_json": [[573, "polars-expr-meta-write-json"]], "polars.Expr.rolling_max": [[619, "polars-expr-rolling-max"]], "polars.Expr.name.suffix_fields": [[585, "polars-expr-name-suffix-fields"]], "polars.Expr.neg": [[592, "polars-expr-neg"]], "polars.Expr.rolling_map": [[618, "polars-expr-rolling-map"]], "polars.Expr.nan_min": [[589, "polars-expr-nan-min"]], "polars.Expr.rolling_median": [[623, "polars-expr-rolling-median"]], "polars.Expr.pipe": [[600, "polars-expr-pipe"]], "polars.Expr.name.prefix_fields": [[583, "polars-expr-name-prefix-fields"]], "polars.Expr.name.suffix": [[584, "polars-expr-name-suffix"]], "polars.Expr.ne_missing": [[591, "polars-expr-ne-missing"]], "polars.Expr.product": [[603, "polars-expr-product"]], "polars.Expr.meta.undo_aliases": [[572, "polars-expr-meta-undo-aliases"]], "polars.Expr.peak_max": [[598, "polars-expr-peak-max"]], "polars.Expr.peak_min": [[599, "polars-expr-peak-min"]], "polars.Expr.quantile": [[605, "polars-expr-quantile"]], "polars.Expr.meta.tree_format": [[571, "polars-expr-meta-tree-format"]], "polars.Expr.nan_max": [[588, "polars-expr-nan-max"]], "polars.Expr.rechunk": [[608, "polars-expr-rechunk"]], "polars.Expr.mod": [[575, "polars-expr-mod"]], "polars.Expr.qcut": [[604, "polars-expr-qcut"]], "polars.Expr.repeat_by": [[610, "polars-expr-repeat-by"]], "polars.Expr.n_unique": [[578, "polars-expr-n-unique"]], "polars.Expr.or_": [[595, "polars-expr-or"]], "polars.Expr.meta.serialize": [[570, "polars-expr-meta-serialize"]], "polars.Expr.name.keep": [[579, "polars-expr-name-keep"]], "polars.Expr.reinterpret": [[609, "polars-expr-reinterpret"]], "polars.Expr.pct_change": [[597, "polars-expr-pct-change"]], "polars.Expr.rolling_mean": [[621, "polars-expr-rolling-mean"]], "polars.Expr.name.to_lowercase": [[586, "polars-expr-name-to-lowercase"]], "polars.Expr.rolling_mean_by": [[622, "polars-expr-rolling-mean-by"]], "polars.Expr.prefix": [[602, "polars-expr-prefix"]], "polars.Expr.replace": [[611, "polars-expr-replace"]], "polars.Expr.rle": [[614, "polars-expr-rle"]], "polars.Expr.name.prefix": [[582, "polars-expr-name-prefix"]], "polars.Expr.rank": [[607, "polars-expr-rank"]], "polars.Expr.name.map_fields": [[581, "polars-expr-name-map-fields"]], "polars.Expr.name.to_uppercase": [[587, "polars-expr-name-to-uppercase"]], "polars.Expr.rolling_min_by": [[626, "polars-expr-rolling-min-by"]], "polars.Expr.min": [[574, "polars-expr-min"]], "polars.Expr.rolling_max_by": [[620, "polars-expr-rolling-max-by"]], "polars.Expr.meta.has_multiple_outputs": [[563, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.root_names": [[569, "polars-expr-meta-root-names"]], "polars.Expr.log1p": [[551, "polars-expr-log1p"]], "polars.Expr.list.len": [[525, "polars-expr-list-len"]], "polars.Expr.list.diff": [[514, "polars-expr-list-diff"]], "polars.Expr.list.tail": [[543, "polars-expr-list-tail"]], "polars.Expr.list.head": [[522, "polars-expr-list-head"]], "polars.Expr.list.set_union": [[537, "polars-expr-list-set-union"]], "polars.Expr.list.slice": [[539, "polars-expr-list-slice"]], "polars.Expr.meta.pop": [[568, "polars-expr-meta-pop"]], "polars.Expr.list.join": [[523, "polars-expr-list-join"]], "polars.Expr.meta.output_name": [[567, "polars-expr-meta-output-name"]], "polars.Expr.list.set_symmetric_difference": [[536, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.log10": [[550, "polars-expr-log10"]], "polars.Expr.list.last": [[524, "polars-expr-list-last"]], "polars.Expr.list.set_intersection": [[535, "polars-expr-list-set-intersection"]], "polars.Expr.list.min": [[530, "polars-expr-list-min"]], "polars.Expr.list.median": [[529, "polars-expr-list-median"]], "polars.Expr.list.std": [[541, "polars-expr-list-std"]], "polars.Expr.median": [[561, "polars-expr-median"]], "polars.Expr.lt": [[553, "polars-expr-lt"]], "polars.Expr.list.first": [[518, "polars-expr-list-first"]], "polars.Expr.list.get": [[521, "polars-expr-list-get"]], "polars.Expr.list.shift": [[538, "polars-expr-list-shift"]], "polars.Expr.meta.ne": [[566, "polars-expr-meta-ne"]], "polars.Expr.list.sum": [[542, "polars-expr-list-sum"]], "polars.Expr.meta.is_column_selection": [[564, "polars-expr-meta-is-column-selection"]], "polars.Expr.map_dict": [[557, "polars-expr-map-dict"]], "polars.Expr.list.reverse": [[532, "polars-expr-list-reverse"]], "polars.Expr.list.count_matches": [[513, "polars-expr-list-count-matches"]], "polars.Expr.list.explode": [[517, "polars-expr-list-explode"]], "polars.Expr.list.sample": [[533, "polars-expr-list-sample"]], "polars.Expr.list.gather_every": [[520, "polars-expr-list-gather-every"]], "polars.Expr.log": [[549, "polars-expr-log"]], "polars.Expr.max": [[559, "polars-expr-max"]], "polars.Expr.list.set_difference": [[534, "polars-expr-list-set-difference"]], "polars.Expr.list.unique": [[547, "polars-expr-list-unique"]], "polars.Expr.lower_bound": [[552, "polars-expr-lower-bound"]], "polars.Expr.map_batches": [[556, "polars-expr-map-batches"]], "polars.Expr.mean": [[560, "polars-expr-mean"]], "polars.Expr.meta.is_regex_projection": [[565, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.take": [[544, "polars-expr-list-take"]], "polars.Expr.list.sort": [[540, "polars-expr-list-sort"]], "polars.Expr.list.eval": [[516, "polars-expr-list-eval"]], "polars.Expr.meta.eq": [[562, "polars-expr-meta-eq"]], "polars.Expr.map_alias": [[555, "polars-expr-map-alias"]], "polars.Expr.list.to_array": [[545, "polars-expr-list-to-array"]], "polars.Expr.list.to_struct": [[546, "polars-expr-list-to-struct"]], "polars.Expr.map": [[554, "polars-expr-map"]], "polars.Expr.list.gather": [[519, "polars-expr-list-gather"]], "polars.Expr.list.mean": [[528, "polars-expr-list-mean"]], "polars.Expr.map_elements": [[558, "polars-expr-map-elements"]], "polars.Expr.list.var": [[548, "polars-expr-list-var"]], "polars.Expr.list.drop_nulls": [[515, "polars-expr-list-drop-nulls"]], "polars.Expr.list.n_unique": [[531, "polars-expr-list-n-unique"]], "polars.Expr.list.lengths": [[526, "polars-expr-list-lengths"]], "polars.Expr.list.max": [[527, "polars-expr-list-max"]], "polars.Expr.ge": [[474, "polars-expr-ge"]], "polars.Expr.is_duplicated": [[486, "polars-expr-is-duplicated"]], "polars.Expr.is_nan": [[494, "polars-expr-is-nan"]], "polars.Expr.gather_every": [[473, "polars-expr-gather-every"]], "polars.Expr.from_json": [[471, "polars-expr-from-json"]], "polars.Expr.is_infinite": [[491, "polars-expr-is-infinite"]], "polars.Expr.ewm_var": [[458, "polars-expr-ewm-var"]], "polars.Expr.list.any": [[507, "polars-expr-list-any"]], "polars.Expr.list.arg_max": [[508, "polars-expr-list-arg-max"]], "polars.Expr.exclude": [[459, "polars-expr-exclude"]], "polars.Expr.is_null": [[498, "polars-expr-is-null"]], "polars.Expr.hist": [[480, "polars-expr-hist"]], "polars.Expr.gt": [[476, "polars-expr-gt"]], "polars.Expr.is_last_distinct": [[493, "polars-expr-is-last-distinct"]], "polars.Expr.implode": [[481, "polars-expr-implode"]], "polars.Expr.floor": [[468, "polars-expr-floor"]], "polars.Expr.list.count_match": [[512, "polars-expr-list-count-match"]], "polars.Expr.is_first": [[488, "polars-expr-is-first"]], "polars.Expr.is_not": [[495, "polars-expr-is-not"]], "polars.Expr.fill_null": [[464, "polars-expr-fill-null"]], "polars.Expr.limit": [[505, "polars-expr-limit"]], "polars.Expr.has_nulls": [[477, "polars-expr-has-nulls"]], "polars.Expr.is_last": [[492, "polars-expr-is-last"]], "polars.Expr.extend_constant": [[462, "polars-expr-extend-constant"]], "polars.Expr.first": [[466, "polars-expr-first"]], "polars.Expr.explode": [[461, "polars-expr-explode"]], "polars.Expr.last": [[502, "polars-expr-last"]], "polars.Expr.le": [[503, "polars-expr-le"]], "polars.Expr.list.concat": [[510, "polars-expr-list-concat"]], "polars.Expr.is_unique": [[499, "polars-expr-is-unique"]], "polars.Expr.is_finite": [[487, "polars-expr-is-finite"]], "polars.Expr.ewm_std": [[457, "polars-expr-ewm-std"]], "polars.Expr.is_first_distinct": [[489, "polars-expr-is-first-distinct"]], "polars.Expr.floordiv": [[469, "polars-expr-floordiv"]], "polars.Expr.is_between": [[485, "polars-expr-is-between"]], "polars.Expr.list.contains": [[511, "polars-expr-list-contains"]], "polars.Expr.interpolate_by": [[484, "polars-expr-interpolate-by"]], "polars.Expr.is_not_nan": [[496, "polars-expr-is-not-nan"]], "polars.Expr.head": [[479, "polars-expr-head"]], "polars.Expr.list.arg_min": [[509, "polars-expr-list-arg-min"]], "polars.Expr.forward_fill": [[470, "polars-expr-forward-fill"]], "polars.Expr.keep_name": [[500, "polars-expr-keep-name"]], "polars.Expr.interpolate": [[483, "polars-expr-interpolate"]], "polars.Expr.ewm_mean_by": [[456, "polars-expr-ewm-mean-by"]], "polars.Expr.hash": [[478, "polars-expr-hash"]], "polars.Expr.fill_nan": [[463, "polars-expr-fill-nan"]], "polars.Expr.exp": [[460, "polars-expr-exp"]], "polars.Expr.flatten": [[467, "polars-expr-flatten"]], "polars.Expr.filter": [[465, "polars-expr-filter"]], "polars.Expr.list.all": [[506, "polars-expr-list-all"]], "polars.Expr.is_in": [[490, "polars-expr-is-in"]], "polars.Expr.get": [[475, "polars-expr-get"]], "polars.Expr.inspect": [[482, "polars-expr-inspect"]], "polars.Expr.len": [[504, "polars-expr-len"]], "polars.Expr.kurtosis": [[501, "polars-expr-kurtosis"]], "polars.Expr.is_not_null": [[497, "polars-expr-is-not-null"]], "polars.Expr.gather": [[472, "polars-expr-gather"]], "polars.Expr.dt.month": [[424, "polars-expr-dt-month"]], "polars.Expr.dt.days": [[410, "polars-expr-dt-days"]], "polars.Expr.dt.milliseconds": [[421, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.month_start": [[426, "polars-expr-dt-month-start"]], "polars.Expr.dt.ordinal_day": [[430, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.second": [[434, "polars-expr-dt-second"]], "polars.Expr.dt.is_leap_year": [[415, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.round": [[433, "polars-expr-dt-round"]], "polars.Expr.dt.total_hours": [[441, "polars-expr-dt-total-hours"]], "polars.Expr.entropy": [[452, "polars-expr-entropy"]], "polars.Expr.dt.cast_time_unit": [[403, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.epoch": [[412, "polars-expr-dt-epoch"]], "polars.Expr.dt.offset_by": [[429, "polars-expr-dt-offset-by"]], "polars.Expr.dt.timestamp": [[438, "polars-expr-dt-timestamp"]], "polars.Expr.dt.iso_year": [[416, "polars-expr-dt-iso-year"]], "polars.Expr.dt.year": [[451, "polars-expr-dt-year"]], "polars.Expr.dt.add_business_days": [[401, "polars-expr-dt-add-business-days"]], "polars.Expr.eq_missing": [[454, "polars-expr-eq-missing"]], "polars.Expr.dt.microsecond": [[417, "polars-expr-dt-microsecond"]], "polars.Expr.dt.quarter": [[431, "polars-expr-dt-quarter"]], "polars.Expr.dt.weekday": [[449, "polars-expr-dt-weekday"]], "polars.Expr.dt.dst_offset": [[411, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.total_nanoseconds": [[445, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.with_time_unit": [[450, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.replace_time_zone": [[432, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.minutes": [[423, "polars-expr-dt-minutes"]], "polars.Expr.dt.month_end": [[425, "polars-expr-dt-month-end"]], "polars.Expr.dt.millennium": [[419, "polars-expr-dt-millennium"]], "polars.Expr.dt.millisecond": [[420, "polars-expr-dt-millisecond"]], "polars.Expr.dt.base_utc_offset": [[402, "polars-expr-dt-base-utc-offset"]], "polars.Expr.drop_nans": [[399, "polars-expr-drop-nans"]], "polars.Expr.dt.total_microseconds": [[442, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_seconds": [[446, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.microseconds": [[418, "polars-expr-dt-microseconds"]], "polars.Expr.dt.total_minutes": [[444, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.week": [[448, "polars-expr-dt-week"]], "polars.Expr.dt.strftime": [[436, "polars-expr-dt-strftime"]], "polars.Expr.dt.total_days": [[440, "polars-expr-dt-total-days"]], "polars.Expr.eq": [[453, "polars-expr-eq"]], "polars.Expr.dt.convert_time_zone": [[406, "polars-expr-dt-convert-time-zone"]], "polars.Expr.drop_nulls": [[400, "polars-expr-drop-nulls"]], "polars.Expr.dt.combine": [[405, "polars-expr-dt-combine"]], "polars.Expr.dt.date": [[407, "polars-expr-dt-date"]], "polars.Expr.dt.to_string": [[439, "polars-expr-dt-to-string"]], "polars.Expr.dt.minute": [[422, "polars-expr-dt-minute"]], "polars.Expr.dt.nanoseconds": [[428, "polars-expr-dt-nanoseconds"]], "polars.Expr.ewm_mean": [[455, "polars-expr-ewm-mean"]], "polars.Expr.dt.time": [[437, "polars-expr-dt-time"]], "polars.Expr.dt.day": [[409, "polars-expr-dt-day"]], "polars.Expr.dt.truncate": [[447, "polars-expr-dt-truncate"]], "polars.Expr.dt.nanosecond": [[427, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.hour": [[413, "polars-expr-dt-hour"]], "polars.Expr.dt.total_milliseconds": [[443, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.seconds": [[435, "polars-expr-dt-seconds"]], "polars.Expr.dt.datetime": [[408, "polars-expr-dt-datetime"]], "polars.Expr.dt.century": [[404, "polars-expr-dt-century"]], "polars.Expr.dt.hours": [[414, "polars-expr-dt-hours"]], "polars.Expr.bin.ends_with": [[367, "polars-expr-bin-ends-with"]], "polars.Expr.arr.contains": [[343, "polars-expr-arr-contains"]], "polars.Expr.bottom_k_by": [[370, "polars-expr-bottom-k-by"]], "polars.Expr.dot": [[398, "polars-expr-dot"]], "polars.Expr.cumsum": [[392, "polars-expr-cumsum"]], "polars.Expr.arr.first": [[346, "polars-expr-arr-first"]], "polars.Expr.cosh": [[380, "polars-expr-cosh"]], "polars.Expr.bin.encode": [[366, "polars-expr-bin-encode"]], "polars.Expr.cat.set_ordering": [[373, "polars-expr-cat-set-ordering"]], "polars.Expr.cot": [[381, "polars-expr-cot"]], "polars.Expr.ceil": [[375, "polars-expr-ceil"]], "polars.Expr.bottom_k": [[369, "polars-expr-bottom-k"]], "polars.Expr.cummax": [[389, "polars-expr-cummax"]], "polars.Expr.cos": [[379, "polars-expr-cos"]], "polars.Expr.arr.unique": [[361, "polars-expr-arr-unique"]], "polars.Expr.cum_prod": [[386, "polars-expr-cum-prod"]], "polars.Expr.degrees": [[395, "polars-expr-degrees"]], "polars.Expr.arr.std": [[357, "polars-expr-arr-std"]], "polars.Expr.arr.var": [[362, "polars-expr-arr-var"]], "polars.Expr.arr.median": [[351, "polars-expr-arr-median"]], "polars.Expr.cum_min": [[385, "polars-expr-cum-min"]], "polars.Expr.cumprod": [[391, "polars-expr-cumprod"]], "polars.Expr.cumcount": [[388, "polars-expr-cumcount"]], "polars.Expr.cummin": [[390, "polars-expr-cummin"]], "polars.Expr.arr.n_unique": [[353, "polars-expr-arr-n-unique"]], "polars.Expr.arr.explode": [[345, "polars-expr-arr-explode"]], "polars.Expr.arr.sum": [[358, "polars-expr-arr-sum"]], "polars.Expr.arr.to_struct": [[360, "polars-expr-arr-to-struct"]], "polars.Expr.clip_max": [[377, "polars-expr-clip-max"]], "polars.Expr.backward_fill": [[363, "polars-expr-backward-fill"]], "polars.Expr.count": [[382, "polars-expr-count"]], "polars.Expr.bin.starts_with": [[368, "polars-expr-bin-starts-with"]], "polars.Expr.cum_sum": [[387, "polars-expr-cum-sum"]], "polars.Expr.cum_max": [[384, "polars-expr-cum-max"]], "polars.Expr.arr.arg_min": [[342, "polars-expr-arr-arg-min"]], "polars.Expr.arr.sort": [[356, "polars-expr-arr-sort"]], "polars.Expr.cat.get_categories": [[372, "polars-expr-cat-get-categories"]], "polars.Expr.clip": [[376, "polars-expr-clip"]], "polars.Expr.cast": [[371, "polars-expr-cast"]], "polars.Expr.arr.reverse": [[354, "polars-expr-arr-reverse"]], "polars.Expr.arr.count_matches": [[344, "polars-expr-arr-count-matches"]], "polars.Expr.arr.min": [[352, "polars-expr-arr-min"]], "polars.Expr.cbrt": [[374, "polars-expr-cbrt"]], "polars.Expr.clip_min": [[378, "polars-expr-clip-min"]], "polars.Expr.bin.contains": [[364, "polars-expr-bin-contains"]], "polars.Expr.bin.decode": [[365, "polars-expr-bin-decode"]], "polars.Expr.cum_count": [[383, "polars-expr-cum-count"]], "polars.Expr.cumulative_eval": [[393, "polars-expr-cumulative-eval"]], "polars.Expr.diff": [[397, "polars-expr-diff"]], "polars.Expr.arr.max": [[350, "polars-expr-arr-max"]], "polars.Expr.arr.shift": [[355, "polars-expr-arr-shift"]], "polars.Expr.arr.get": [[347, "polars-expr-arr-get"]], "polars.Expr.arr.last": [[349, "polars-expr-arr-last"]], "polars.Expr.cut": [[394, "polars-expr-cut"]], "polars.Expr.deserialize": [[396, "polars-expr-deserialize"]], "polars.Expr.arr.to_list": [[359, "polars-expr-arr-to-list"]], "polars.Expr.arr.join": [[348, "polars-expr-arr-join"]], "polars.DataFrame.rename": [[236, "polars-dataframe-rename"]], "polars.DataFrame.row": [[242, "polars-dataframe-row"]], "polars.DataFrame.unnest": [[277, "polars-dataframe-unnest"]], "polars.DataFrame.rolling": [[241, "polars-dataframe-rolling"]], "polars.DataFrame.rows": [[243, "polars-dataframe-rows"]], "polars.DataFrame.width": [[283, "polars-dataframe-width"]], "polars.DataFrame.transpose": [[275, "polars-dataframe-transpose"]], "polars.DataFrame.product": [[233, "polars-dataframe-product"]], "polars.DataFrame.update": [[279, "polars-dataframe-update"]], "polars.DataFrame.top_k": [[274, "polars-dataframe-top-k"]], "polars.DataFrame.to_dict": [[264, "polars-dataframe-to-dict"]], "polars.DataFrame.shrink_to_fit": [[254, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.take_every": [[262, "polars-dataframe-take-every"]], "polars.DataFrame.to_init_repr": [[267, "polars-dataframe-to-init-repr"]], "polars.DataFrame.with_columns": [[284, "polars-dataframe-with-columns"]], "polars.DataFrame.set_sorted": [[250, "polars-dataframe-set-sorted"]], "polars.DataFrame.unstack": [[278, "polars-dataframe-unstack"]], "polars.DataFrame.std": [[258, "polars-dataframe-std"]], "polars.DataFrame.to_dicts": [[265, "polars-dataframe-to-dicts"]], "polars.DataFrame.unique": [[276, "polars-dataframe-unique"]], "polars.DataFrame.upsample": [[280, "polars-dataframe-upsample"]], "polars.DataFrame.var": [[281, "polars-dataframe-var"]], "polars.DataFrame.pipe": [[231, "polars-dataframe-pipe"]], "polars.DataFrame.null_count": [[229, "polars-dataframe-null-count"]], "polars.DataFrame.sql": [[257, "polars-dataframe-sql"]], "polars.DataFrame.to_series": [[271, "polars-dataframe-to-series"]], "polars.DataFrame.partition_by": [[230, "polars-dataframe-partition-by"]], "polars.DataFrame.sum_horizontal": [[260, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.vstack": [[282, "polars-dataframe-vstack"]], "polars.DataFrame.rows_by_key": [[244, "polars-dataframe-rows-by-key"]], "polars.DataFrame.quantile": [[234, "polars-dataframe-quantile"]], "polars.DataFrame.to_struct": [[272, "polars-dataframe-to-struct"]], "polars.DataFrame.sort": [[256, "polars-dataframe-sort"]], "polars.DataFrame.to_torch": [[273, "polars-dataframe-to-torch"]], "polars.DataFrame.serialize": [[249, "polars-dataframe-serialize"]], "polars.DataFrame.to_pandas": [[270, "polars-dataframe-to-pandas"]], "polars.DataFrame.select": [[247, "polars-dataframe-select"]], "polars.DataFrame.to_dummies": [[266, "polars-dataframe-to-dummies"]], "polars.DataFrame.shift_and_fill": [[253, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.replace_column": [[239, "polars-dataframe-replace-column"]], "polars.DataFrame.shift": [[252, "polars-dataframe-shift"]], "polars.DataFrame.tail": [[261, "polars-dataframe-tail"]], "polars.DataFrame.to_jax": [[268, "polars-dataframe-to-jax"]], "polars.DataFrame.slice": [[255, "polars-dataframe-slice"]], "polars.DataFrame.pivot": [[232, "polars-dataframe-pivot"]], "polars.DataFrame.n_unique": [[228, "polars-dataframe-n-unique"]], "polars.DataFrame.rechunk": [[235, "polars-dataframe-rechunk"]], "polars.DataFrame.reverse": [[240, "polars-dataframe-reverse"]], "polars.DataFrame.replace": [[237, "polars-dataframe-replace"]], "polars.DataFrame.to_arrow": [[263, "polars-dataframe-to-arrow"]], "polars.DataFrame.sum": [[259, "polars-dataframe-sum"]], "polars.DataFrame.schema": [[246, "polars-dataframe-schema"]], "polars.DataFrame.shape": [[251, "polars-dataframe-shape"]], "polars.DataFrame.to_numpy": [[269, "polars-dataframe-to-numpy"]], "polars.DataFrame.select_seq": [[248, "polars-dataframe-select-seq"]], "polars.DataFrame.sample": [[245, "polars-dataframe-sample"]], "polars.DataFrame.replace_at_idx": [[238, "polars-dataframe-replace-at-idx"]], "polars.LazyFrame.filter": [[853, "polars-lazyframe-filter"]], "polars.LazyFrame.collect_async": [[840, "polars-lazyframe-collect-async"]], "polars.LazyFrame.fill_nan": [[851, "polars-lazyframe-fill-nan"]], "Expressions": [[818, "expressions"]], "polars.LazyFrame.approx_n_unique": [[833, "polars-lazyframe-approx-n-unique"]], "polars.var": [[807, "polars-var"]], "polars.time_ranges": [[806, "polars-time-ranges"]], "polars.LazyFrame.collect": [[839, "polars-lazyframe-collect"]], "polars.LazyFrame.deserialize": [[844, "polars-lazyframe-deserialize"]], "polars.LazyFrame.cache": [[835, "polars-lazyframe-cache"]], "polars.struct": [[800, "polars-struct"]], "Operators": [[824, "operators"]], "Conjunction": [[824, "conjunction"]], "Comparison": [[824, "comparison"]], "Numeric": [[824, "numeric"], [315, "numeric"]], "polars.LazyFrame.describe": [[843, "polars-lazyframe-describe"]], "polars.LazyFrame.fetch": [[850, "polars-lazyframe-fetch"]], "polars.LazyFrame.dtypes": [[847, "polars-lazyframe-dtypes"]], "Python API reference": [[830, "python-api-reference"]], "polars.LazyFrame.drop_nulls": [[846, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.cast": [[836, "polars-lazyframe-cast"]], "polars.LazyFrame.explain": [[848, "polars-lazyframe-explain"]], "polars.time": [[804, "polars-time"]], "polars.time_range": [[805, "polars-time-range"]], "Columns / names": [[815, "columns-names"]], "Meta": [[820, "meta"]], "Window": [[828, "window"]], "polars.sum": [[801, "polars-sum"]], "polars.tail": [[803, "polars-tail"]], "Name": [[823, "name"]], "Input/output": [[831, "input-output"]], "Avro": [[831, "avro"]], "Clipboard": [[831, "clipboard"]], "CSV": [[831, "csv"]], "Database": [[831, "database"]], "Delta Lake": [[831, "delta-lake"]], "Excel / ODS": [[831, "excel-ods"]], "Feather / IPC": [[831, "feather-ipc"]], "Iceberg": [[831, "iceberg"]], "JSON": [[831, "json"]], "Parquet": [[831, "parquet"]], "PyArrow Datasets": [[831, "pyarrow-datasets"]], "polars.sum_horizontal": [[802, "polars-sum-horizontal"]], "polars.LazyFrame.fill_null": [[852, "polars-lazyframe-fill-null"]], "polars.sql_expr": [[798, "polars-sql-expr"]], "polars.LazyFrame.bottom_k": [[834, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.count": [[842, "polars-lazyframe-count"]], "polars.LazyFrame.columns": [[841, "polars-lazyframe-columns"]], "polars.col": [[814, "polars-col"]], "polars.LazyFrame.drop": [[845, "polars-lazyframe-drop"]], "polars.zeros": [[809, "polars-zeros"]], "polars.LazyFrame.explode": [[849, "polars-lazyframe-explode"]], "polars.LazyFrame.clone": [[838, "polars-lazyframe-clone"]], "polars.std": [[799, "polars-std"]], "polars.when": [[808, "polars-when"]], "polars.LazyFrame.first": [[854, "polars-lazyframe-first"]], "polars.LazyFrame.clear": [[837, "polars-lazyframe-clear"]], "Conversion": [[829, "conversion"]], "Parallelization": [[829, "parallelization"]], "Random": [[829, "random"]], "StringCache": [[829, "stringcache"]], "polars.dataframe.group_by.GroupBy.n_unique": [[302, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.arg_max": [[334, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.quantile": [[303, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.median": [[300, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.min": [[301, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.any": [[324, "polars-expr-any"]], "polars.Expr.arg_min": [[335, "polars-expr-arg-min"]], "polars.dataframe.group_by.GroupBy.agg": [[289, "polars-dataframe-group-by-groupby-agg"]], "polars.dataframe.group_by.GroupBy.map_groups": [[297, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.max": [[298, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.all": [[290, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.tail": [[305, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.arr.arg_max": [[341, "polars-expr-arr-arg-max"]], "polars.Expr.apply": [[326, "polars-expr-apply"]], "polars.dataframe.group_by.GroupBy.count": [[292, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.abs": [[318, "polars-expr-abs"]], "polars.Expr.add": [[319, "polars-expr-add"]], "polars.Expr.arcsinh": [[331, "polars-expr-arcsinh"]], "polars.dataframe.group_by.GroupBy.len": [[296, "polars-dataframe-group-by-groupby-len"]], "polars.DataFrame.with_row_index": [[287, "polars-dataframe-with-row-index"]], "polars.Expr.arcsin": [[330, "polars-expr-arcsin"]], "Data types": [[315, "data-types"]], "DataType": [[315, "datatype"]], "Nested": [[315, "nested"]], "Other": [[315, "other"]], "polars.Expr.arccosh": [[329, "polars-expr-arccosh"]], "polars.Expr.arg_true": [[337, "polars-expr-arg-true"]], "polars.Expr.alias": [[321, "polars-expr-alias"]], "polars.dataframe.group_by.GroupBy.apply": [[291, "polars-dataframe-group-by-groupby-apply"]], "polars.dataframe.group_by.GroupBy.mean": [[299, "polars-dataframe-group-by-groupby-mean"]], "DataFrame": [[311, "dataframe"]], "polars.DataFrame.with_columns_seq": [[285, "polars-dataframe-with-columns-seq"]], "polars.Expr.all": [[322, "polars-expr-all"]], "polars.Expr.arr.any": [[340, "polars-expr-arr-any"]], "polars.dataframe.group_by.GroupBy.sum": [[304, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arccos": [[328, "polars-expr-arccos"]], "polars.Expr.append": [[325, "polars-expr-append"]], "polars.Expr.arg_sort": [[336, "polars-expr-arg-sort"]], "polars.Expr.arctanh": [[333, "polars-expr-arctanh"]], "polars.Expr.arr.all": [[339, "polars-expr-arr-all"]], "polars.Expr.and_": [[323, "polars-expr-and"]], "polars.DataFrame.with_row_count": [[286, "polars-dataframe-with-row-count"]], "polars.dataframe.group_by.GroupBy.first": [[293, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.last": [[295, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.agg_groups": [[320, "polars-expr-agg-groups"]], "polars.Expr.approx_n_unique": [[327, "polars-expr-approx-n-unique"]], "polars.dataframe.group_by.GroupBy.head": [[294, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.__iter__": [[288, "polars-dataframe-group-by-groupby-iter"]], "polars.Expr.arctan": [[332, "polars-expr-arctan"]], "polars.Expr.arg_unique": [[338, "polars-expr-arg-unique"]], "Exceptions": [[316, "exceptions"]]}, "indexentries": {"activate_decimals() (polars.config class method)": [[2, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[3, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[4, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[5, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[6, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[7, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[9, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[10, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[31, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[32, "polars.DataFrame.write_avro"]], "write_clipboard() (polars.dataframe method)": [[33, "polars.DataFrame.write_clipboard"]], "write_csv() (polars.dataframe method)": [[34, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[35, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[36, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[37, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[39, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[40, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[41, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[42, "polars.DataFrame.write_parquet"]], "sink_csv() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_parquet"]], "execute() (polars.sqlcontext method)": [[47, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[48, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[49, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[50, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[51, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[52, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[53, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[53, "polars.StringCache.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[59, "polars.build_info"]], "collect_all() (in module polars)": [[60, "polars.collect_all"]], "collect_all_async() (in module polars)": [[61, "polars.collect_all_async"]], "concat() (in module polars)": [[62, "polars.concat"]], "array (class in polars.datatypes)": [[63, "polars.datatypes.Array"]], "__init__() (polars.datatypes.array method)": [[63, "polars.datatypes.Array.__init__"]], "binary (class in polars.datatypes)": [[64, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[64, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[65, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[65, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[66, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[66, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[67, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[67, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[68, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[68, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[69, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[69, "polars.datatypes.Datetime.__init__"]], "decimal (class in polars.datatypes)": [[70, "polars.datatypes.Decimal"]], "__init__() (polars.datatypes.decimal method)": [[70, "polars.datatypes.Decimal.__init__"]], "duration (class in polars.datatypes)": [[71, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[71, "polars.datatypes.Duration.__init__"]], "enum (class in polars.datatypes)": [[72, "polars.datatypes.Enum"]], "__init__() (polars.datatypes.enum method)": [[72, "polars.datatypes.Enum.__init__"]], "float32 (class in polars.datatypes)": [[73, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[73, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[74, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[74, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[75, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[75, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[76, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[76, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[77, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[77, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[78, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[78, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[79, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[79, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[80, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[80, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[81, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[81, "polars.datatypes.Object.__init__"]], "string (class in polars.datatypes)": [[82, "polars.datatypes.String"]], "__init__() (polars.datatypes.string method)": [[82, "polars.datatypes.String.__init__"]], "struct (class in polars.datatypes)": [[83, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[83, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[84, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[84, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[85, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[85, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[86, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[86, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[87, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[87, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[88, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[88, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[89, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[89, "polars.datatypes.Unknown.__init__"]], "utf8 (in module polars.datatypes)": [[90, "polars.datatypes.Utf8"]], "disable_string_cache() (in module polars)": [[91, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[92, "polars.enable_string_cache"]], "arrowerror": [[93, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[94, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[95, "polars.exceptions.ComputeError"]], "duplicateerror": [[96, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[97, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[98, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[99, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[100, "polars.exceptions.PolarsError"]], "polarspanicerror": [[101, "polars.exceptions.PolarsPanicError"]], "rowserror": [[102, "polars.exceptions.RowsError"]], "schemaerror": [[103, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[104, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[105, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[106, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[107, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[108, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[109, "polars.from_dataframe"]], "from_dict() (in module polars)": [[110, "polars.from_dict"]], "from_dicts() (in module polars)": [[111, "polars.from_dicts"]], "from_numpy() (in module polars)": [[112, "polars.from_numpy"]], "from_pandas() (in module polars)": [[113, "polars.from_pandas"]], "from_records() (in module polars)": [[114, "polars.from_records"]], "from_repr() (in module polars)": [[115, "polars.from_repr"]], "get_index_type() (in module polars)": [[116, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[117, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[118, "polars.read_avro"]], "read_clipboard() (in module polars)": [[119, "polars.read_clipboard"]], "read_csv() (in module polars)": [[120, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[121, "polars.read_csv_batched"]], "read_database() (in module polars)": [[122, "polars.read_database"]], "read_database_uri() (in module polars)": [[123, "polars.read_database_uri"]], "read_delta() (in module polars)": [[124, "polars.read_delta"]], "read_excel() (in module polars)": [[125, "polars.read_excel"]], "read_ipc() (in module polars)": [[126, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[127, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[128, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[129, "polars.read_json"]], "read_ndjson() (in module polars)": [[130, "polars.read_ndjson"]], "read_ods() (in module polars)": [[131, "polars.read_ods"]], "read_parquet() (in module polars)": [[132, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[133, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[134, "polars.scan_csv"]], "scan_delta() (in module polars)": [[135, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[136, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[137, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[138, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[139, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[140, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[141, "polars.set_random_seed"]], "show_versions() (in module polars)": [[142, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[143, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[144, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[145, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[146, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[147, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[147, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[150, "polars.testing.parametric.dataframes"]], "dtypes() (in module polars.testing.parametric)": [[151, "polars.testing.parametric.dtypes"]], "lists() (in module polars.testing.parametric)": [[152, "polars.testing.parametric.lists"]], "load_profile() (in module polars.testing.parametric)": [[153, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[154, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[155, "polars.testing.parametric.set_profile"]], "thread_pool_size() (in module polars)": [[156, "polars.thread_pool_size"]], "threadpool_size() (in module polars)": [[157, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[158, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[161, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[162, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[163, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[164, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[165, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[166, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[167, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[168, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[169, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[170, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[171, "polars.DataFrame.describe"]], "deserialize() (polars.dataframe class method)": [[172, "polars.DataFrame.deserialize"]], "drop() (polars.dataframe method)": [[173, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[174, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[175, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[176, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[177, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[178, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[179, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[180, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[181, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[182, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[183, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[184, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[185, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[186, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[187, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[188, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[189, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[190, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[191, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[192, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[193, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[194, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[195, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[196, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[197, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[198, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[199, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[200, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[201, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[202, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[203, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[204, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[205, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[206, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[207, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[208, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[209, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[210, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[211, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[212, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[213, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[214, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[215, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[216, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[217, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[218, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[219, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[220, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[221, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[222, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[223, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[224, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[225, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[226, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[227, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[228, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[229, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[230, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[231, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[232, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[233, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[234, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[235, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[236, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[237, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[238, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[239, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[240, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[241, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[242, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[243, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[244, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[245, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[246, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[247, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[248, "polars.DataFrame.select_seq"]], "serialize() (polars.dataframe method)": [[249, "polars.DataFrame.serialize"]], "set_sorted() (polars.dataframe method)": [[250, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[251, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[252, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[253, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[254, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[255, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[256, "polars.DataFrame.sort"]], "sql() (polars.dataframe method)": [[257, "polars.DataFrame.sql"]], "std() (polars.dataframe method)": [[258, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[259, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[260, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[261, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[262, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[263, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[264, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[265, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[266, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[267, "polars.DataFrame.to_init_repr"]], "to_jax() (polars.dataframe method)": [[268, "polars.DataFrame.to_jax"]], "to_numpy() (polars.dataframe method)": [[269, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[270, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[271, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[272, "polars.DataFrame.to_struct"]], "to_torch() (polars.dataframe method)": [[273, "polars.DataFrame.to_torch"]], "top_k() (polars.dataframe method)": [[274, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[275, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[276, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[277, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[278, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[279, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[280, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[281, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[282, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[283, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[284, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[285, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[286, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[287, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[318, "polars.Expr.abs"]], "add() (polars.expr method)": [[319, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[320, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[321, "polars.Expr.alias"]], "all() (polars.expr method)": [[322, "polars.Expr.all"]], "and_() (polars.expr method)": [[323, "polars.Expr.and_"]], "any() (polars.expr method)": [[324, "polars.Expr.any"]], "append() (polars.expr method)": [[325, "polars.Expr.append"]], "apply() (polars.expr method)": [[326, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[327, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[328, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[329, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[330, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[331, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[332, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[333, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[334, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[335, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[336, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[337, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[338, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[339, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[340, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[341, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[342, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[343, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[344, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[345, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[346, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[347, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[348, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[349, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[350, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[351, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[352, "polars.Expr.arr.min"]], "n_unique() (polars.expr.arr method)": [[353, "polars.Expr.arr.n_unique"]], "reverse() (polars.expr.arr method)": [[354, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[355, "polars.Expr.arr.shift"]], "sort() (polars.expr.arr method)": [[356, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[357, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[358, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[359, "polars.Expr.arr.to_list"]], "to_struct() (polars.expr.arr method)": [[360, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[361, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[362, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[363, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[364, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[365, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[366, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[367, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[368, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[369, "polars.Expr.bottom_k"]], "bottom_k_by() (polars.expr method)": [[370, "polars.Expr.bottom_k_by"]], "cast() (polars.expr method)": [[371, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[372, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[373, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[374, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[375, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[376, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[377, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[378, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[379, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[380, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[381, "polars.Expr.cot"]], "count() (polars.expr method)": [[382, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[383, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[384, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[385, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[386, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[387, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[388, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[389, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[390, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[391, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[392, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[393, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[394, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[395, "polars.Expr.degrees"]], "deserialize() (polars.expr class method)": [[396, "polars.Expr.deserialize"]], "diff() (polars.expr method)": [[397, "polars.Expr.diff"]], "dot() (polars.expr method)": [[398, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[399, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[400, "polars.Expr.drop_nulls"]], "add_business_days() (polars.expr.dt method)": [[401, "polars.Expr.dt.add_business_days"]], "base_utc_offset() (polars.expr.dt method)": [[402, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[403, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[404, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[405, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[406, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[407, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[408, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[409, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[410, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[411, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[412, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[413, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[414, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[415, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[416, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[417, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[418, "polars.Expr.dt.microseconds"]], "millennium() (polars.expr.dt method)": [[419, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[420, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[421, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[422, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[423, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[424, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[425, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[426, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[427, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[428, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[429, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[430, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[431, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[432, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[433, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[434, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[435, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[436, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[437, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[438, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[439, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[440, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[441, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[442, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[443, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[444, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[445, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[446, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[447, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[448, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[449, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[450, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[451, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[452, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[453, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[454, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[455, "polars.Expr.ewm_mean"]], "ewm_mean_by() (polars.expr method)": [[456, "polars.Expr.ewm_mean_by"]], "ewm_std() (polars.expr method)": [[457, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[458, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[459, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[460, "polars.Expr.exp"]], "explode() (polars.expr method)": [[461, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[462, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[463, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[464, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[465, "polars.Expr.filter"]], "first() (polars.expr method)": [[466, "polars.Expr.first"]], "flatten() (polars.expr method)": [[467, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[468, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[469, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[470, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[471, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[472, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[473, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[474, "polars.Expr.ge"]], "get() (polars.expr method)": [[475, "polars.Expr.get"]], "gt() (polars.expr method)": [[476, "polars.Expr.gt"]], "has_nulls() (polars.expr method)": [[477, "polars.Expr.has_nulls"]], "hash() (polars.expr method)": [[478, "polars.Expr.hash"]], "head() (polars.expr method)": [[479, "polars.Expr.head"]], "hist() (polars.expr method)": [[480, "polars.Expr.hist"]], "implode() (polars.expr method)": [[481, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[482, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[483, "polars.Expr.interpolate"]], "interpolate_by() (polars.expr method)": [[484, "polars.Expr.interpolate_by"]], "is_between() (polars.expr method)": [[485, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[486, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[487, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[488, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[489, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[490, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[491, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[492, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[493, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[494, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[495, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[496, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[497, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[498, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[499, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[500, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[501, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[502, "polars.Expr.last"]], "le() (polars.expr method)": [[503, "polars.Expr.le"]], "len() (polars.expr method)": [[504, "polars.Expr.len"]], "limit() (polars.expr method)": [[505, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[506, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[507, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[508, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[509, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[510, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[511, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[512, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[513, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[514, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[515, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[516, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[517, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[518, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[519, "polars.Expr.list.gather"]], "gather_every() (polars.expr.list method)": [[520, "polars.Expr.list.gather_every"]], "get() (polars.expr.list method)": [[521, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[522, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[523, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[524, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[525, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[526, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[527, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[528, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[529, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[530, "polars.Expr.list.min"]], "n_unique() (polars.expr.list method)": [[531, "polars.Expr.list.n_unique"]], "reverse() (polars.expr.list method)": [[532, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[533, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[534, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[535, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[536, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[537, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[538, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[539, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[540, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[541, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[542, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[543, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[544, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[545, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[546, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[547, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[548, "polars.Expr.list.var"]], "log() (polars.expr method)": [[549, "polars.Expr.log"]], "log10() (polars.expr method)": [[550, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[551, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[552, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[553, "polars.Expr.lt"]], "map() (polars.expr method)": [[554, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[555, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[556, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[557, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[558, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[559, "polars.Expr.max"]], "mean() (polars.expr method)": [[560, "polars.Expr.mean"]], "median() (polars.expr method)": [[561, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[562, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[563, "polars.Expr.meta.has_multiple_outputs"]], "is_column_selection() (polars.expr.meta method)": [[564, "polars.Expr.meta.is_column_selection"]], "is_regex_projection() (polars.expr.meta method)": [[565, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[566, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[567, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[568, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[569, "polars.Expr.meta.root_names"]], "serialize() (polars.expr.meta method)": [[570, "polars.Expr.meta.serialize"]], "tree_format() (polars.expr.meta method)": [[571, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[572, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[573, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[574, "polars.Expr.min"]], "mod() (polars.expr method)": [[575, "polars.Expr.mod"]], "mode() (polars.expr method)": [[576, "polars.Expr.mode"]], "mul() (polars.expr method)": [[577, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[578, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[579, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[580, "polars.Expr.name.map"]], "map_fields() (polars.expr.name method)": [[581, "polars.Expr.name.map_fields"]], "prefix() (polars.expr.name method)": [[582, "polars.Expr.name.prefix"]], "prefix_fields() (polars.expr.name method)": [[583, "polars.Expr.name.prefix_fields"]], "suffix() (polars.expr.name method)": [[584, "polars.Expr.name.suffix"]], "suffix_fields() (polars.expr.name method)": [[585, "polars.Expr.name.suffix_fields"]], "to_lowercase() (polars.expr.name method)": [[586, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[587, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[588, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[589, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[590, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[591, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[592, "polars.Expr.neg"]], "not_() (polars.expr method)": [[593, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[594, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[595, "polars.Expr.or_"]], "over() (polars.expr method)": [[596, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[597, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[598, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[599, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[600, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[601, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[602, "polars.Expr.prefix"]], "product() (polars.expr method)": [[603, "polars.Expr.product"]], "qcut() (polars.expr method)": [[604, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[605, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[606, "polars.Expr.radians"]], "rank() (polars.expr method)": [[607, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[608, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[609, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[610, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[611, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[612, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[613, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[614, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[615, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[616, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[617, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[618, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[619, "polars.Expr.rolling_max"]], "rolling_max_by() (polars.expr method)": [[620, "polars.Expr.rolling_max_by"]], "rolling_mean() (polars.expr method)": [[621, "polars.Expr.rolling_mean"]], "rolling_mean_by() (polars.expr method)": [[622, "polars.Expr.rolling_mean_by"]], "rolling_median() (polars.expr method)": [[623, "polars.Expr.rolling_median"]], "rolling_median_by() (polars.expr method)": [[624, "polars.Expr.rolling_median_by"]], "rolling_min() (polars.expr method)": [[625, "polars.Expr.rolling_min"]], "rolling_min_by() (polars.expr method)": [[626, "polars.Expr.rolling_min_by"]], "rolling_quantile() (polars.expr method)": [[627, "polars.Expr.rolling_quantile"]], "rolling_quantile_by() (polars.expr method)": [[628, "polars.Expr.rolling_quantile_by"]], "rolling_skew() (polars.expr method)": [[629, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[630, "polars.Expr.rolling_std"]], "rolling_std_by() (polars.expr method)": [[631, "polars.Expr.rolling_std_by"]], "rolling_sum() (polars.expr method)": [[632, "polars.Expr.rolling_sum"]], "rolling_sum_by() (polars.expr method)": [[633, "polars.Expr.rolling_sum_by"]], "rolling_var() (polars.expr method)": [[634, "polars.Expr.rolling_var"]], "rolling_var_by() (polars.expr method)": [[635, "polars.Expr.rolling_var_by"]], "round() (polars.expr method)": [[636, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[637, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[638, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[639, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[640, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[641, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[642, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[643, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[644, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[645, "polars.Expr.sign"]], "sin() (polars.expr method)": [[646, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[647, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[648, "polars.Expr.skew"]], "slice() (polars.expr method)": [[649, "polars.Expr.slice"]], "sort() (polars.expr method)": [[650, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[651, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[652, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[653, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[654, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[655, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[656, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[657, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[658, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[659, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[660, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[661, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[662, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[663, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[664, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[665, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[666, "polars.Expr.str.find"]], "head() (polars.expr.str method)": [[667, "polars.Expr.str.head"]], "json_decode() (polars.expr.str method)": [[668, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[669, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[670, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[671, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[672, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[673, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[674, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[675, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[676, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[677, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[678, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[679, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[680, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[681, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[682, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[683, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[684, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[685, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[686, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[687, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[688, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[689, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[690, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[691, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[692, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[693, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[694, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[695, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[696, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[697, "polars.Expr.str.strptime"]], "tail() (polars.expr.str method)": [[698, "polars.Expr.str.tail"]], "to_date() (polars.expr.str method)": [[699, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[700, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[701, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[702, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[703, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[704, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[705, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[706, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[707, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[708, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[709, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[710, "polars.Expr.struct.rename_fields"]], "with_fields() (polars.expr.struct method)": [[711, "polars.Expr.struct.with_fields"]], "sub() (polars.expr method)": [[712, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[713, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[714, "polars.Expr.sum"]], "tail() (polars.expr method)": [[715, "polars.Expr.tail"]], "take() (polars.expr method)": [[716, "polars.Expr.take"]], "take_every() (polars.expr method)": [[717, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[718, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[719, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[720, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[721, "polars.Expr.top_k"]], "top_k_by() (polars.expr method)": [[722, "polars.Expr.top_k_by"]], "truediv() (polars.expr method)": [[723, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[724, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[725, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[726, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[727, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[728, "polars.Expr.var"]], "where() (polars.expr method)": [[729, "polars.Expr.where"]], "xor() (polars.expr method)": [[730, "polars.Expr.xor"]], "all() (in module polars)": [[731, "polars.all"]], "all_horizontal() (in module polars)": [[732, "polars.all_horizontal"]], "any() (in module polars)": [[733, "polars.any"]], "any_horizontal() (in module polars)": [[734, "polars.any_horizontal"]], "apply() (in module polars)": [[735, "polars.apply"]], "approx_n_unique() (in module polars)": [[736, "polars.approx_n_unique"]], "arange() (in module polars)": [[737, "polars.arange"]], "arctan2() (in module polars)": [[738, "polars.arctan2"]], "arctan2d() (in module polars)": [[739, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[740, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[741, "polars.arg_where"]], "business_day_count() (in module polars)": [[742, "polars.business_day_count"]], "coalesce() (in module polars)": [[743, "polars.coalesce"]], "concat_list() (in module polars)": [[744, "polars.concat_list"]], "concat_str() (in module polars)": [[745, "polars.concat_str"]], "corr() (in module polars)": [[746, "polars.corr"]], "count() (in module polars)": [[747, "polars.count"]], "cov() (in module polars)": [[748, "polars.cov"]], "cum_count() (in module polars)": [[749, "polars.cum_count"]], "cum_fold() (in module polars)": [[750, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[751, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[752, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[753, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[754, "polars.cumfold"]], "cumreduce() (in module polars)": [[755, "polars.cumreduce"]], "cumsum() (in module polars)": [[756, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[757, "polars.cumsum_horizontal"]], "date() (in module polars)": [[758, "polars.date"]], "date_range() (in module polars)": [[759, "polars.date_range"]], "date_ranges() (in module polars)": [[760, "polars.date_ranges"]], "datetime() (in module polars)": [[761, "polars.datetime"]], "datetime_range() (in module polars)": [[762, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[763, "polars.datetime_ranges"]], "duration() (in module polars)": [[764, "polars.duration"]], "element() (in module polars)": [[765, "polars.element"]], "exclude() (in module polars)": [[766, "polars.exclude"]], "first() (in module polars)": [[767, "polars.first"]], "fold() (in module polars)": [[768, "polars.fold"]], "format() (in module polars)": [[769, "polars.format"]], "from_epoch() (in module polars)": [[770, "polars.from_epoch"]], "groups() (in module polars)": [[771, "polars.groups"]], "head() (in module polars)": [[772, "polars.head"]], "implode() (in module polars)": [[773, "polars.implode"]], "int_range() (in module polars)": [[774, "polars.int_range"]], "int_ranges() (in module polars)": [[775, "polars.int_ranges"]], "last() (in module polars)": [[776, "polars.last"]], "len() (in module polars)": [[777, "polars.len"]], "lit() (in module polars)": [[778, "polars.lit"]], "map() (in module polars)": [[779, "polars.map"]], "map_batches() (in module polars)": [[780, "polars.map_batches"]], "map_groups() (in module polars)": [[781, "polars.map_groups"]], "max() (in module polars)": [[782, "polars.max"]], "max_horizontal() (in module polars)": [[783, "polars.max_horizontal"]], "mean() (in module polars)": [[784, "polars.mean"]], "mean_horizontal() (in module polars)": [[785, "polars.mean_horizontal"]], "median() (in module polars)": [[786, "polars.median"]], "min() (in module polars)": [[787, "polars.min"]], "min_horizontal() (in module polars)": [[788, "polars.min_horizontal"]], "n_unique() (in module polars)": [[789, "polars.n_unique"]], "nth() (in module polars)": [[790, "polars.nth"]], "ones() (in module polars)": [[791, "polars.ones"]], "quantile() (in module polars)": [[792, "polars.quantile"]], "reduce() (in module polars)": [[793, "polars.reduce"]], "repeat() (in module polars)": [[794, "polars.repeat"]], "rolling_corr() (in module polars)": [[795, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[796, "polars.rolling_cov"]], "select() (in module polars)": [[797, "polars.select"]], "sql_expr() (in module polars)": [[798, "polars.sql_expr"]], "std() (in module polars)": [[799, "polars.std"]], "struct() (in module polars)": [[800, "polars.struct"]], "sum() (in module polars)": [[801, "polars.sum"]], "sum_horizontal() (in module polars)": [[802, "polars.sum_horizontal"]], "tail() (in module polars)": [[803, "polars.tail"]], "time() (in module polars)": [[804, "polars.time"]], "time_range() (in module polars)": [[805, "polars.time_range"]], "time_ranges() (in module polars)": [[806, "polars.time_ranges"]], "var() (in module polars)": [[807, "polars.var"]], "when() (in module polars)": [[808, "polars.when"]], "zeros() (in module polars)": [[809, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[833, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[834, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[835, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[836, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[837, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[838, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[839, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[840, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[841, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[842, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[843, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[844, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[845, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[846, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[847, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[848, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[849, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[850, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[851, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[852, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[853, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[854, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[855, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[856, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[857, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[858, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[859, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[860, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[861, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[862, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[863, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[864, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[865, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[866, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[867, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[868, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[869, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[870, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[871, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[872, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[873, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[874, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[875, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[876, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[877, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[878, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[879, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[880, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[881, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[882, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[883, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[884, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[885, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[886, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[887, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[888, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[889, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[890, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[891, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[892, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[893, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[894, "polars.LazyFrame.sort"]], "sql() (polars.lazyframe method)": [[895, "polars.LazyFrame.sql"]], "std() (polars.lazyframe method)": [[896, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[897, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[898, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[899, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[900, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[901, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[902, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[903, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[904, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[905, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[906, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[907, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[908, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[909, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[910, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[911, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[912, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[913, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[914, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[915, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[916, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[917, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[918, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[919, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[920, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[921, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[922, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[923, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[924, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[925, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[926, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[927, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "module": [[935, "module-polars.plugins"], [936, "module-polars.selectors"]], "polars.plugins": [[935, "module-polars.plugins"]], "register_plugin_function() (in module polars.plugins)": [[935, "polars.plugins.register_plugin_function"]], "all() (in module polars.selectors)": [[936, "polars.selectors.all"]], "alpha() (in module polars.selectors)": [[936, "polars.selectors.alpha"]], "alphanumeric() (in module polars.selectors)": [[936, "polars.selectors.alphanumeric"]], "binary() (in module polars.selectors)": [[936, "polars.selectors.binary"]], "boolean() (in module polars.selectors)": [[936, "polars.selectors.boolean"]], "by_dtype() (in module polars.selectors)": [[936, "polars.selectors.by_dtype"]], "by_index() (in module polars.selectors)": [[936, "polars.selectors.by_index"]], "by_name() (in module polars.selectors)": [[936, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[936, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[936, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[936, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[936, "polars.selectors.datetime"]], "decimal() (in module polars.selectors)": [[936, "polars.selectors.decimal"]], "digit() (in module polars.selectors)": [[936, "polars.selectors.digit"]], "duration() (in module polars.selectors)": [[936, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[936, "polars.selectors.ends_with"]], "exclude() (in module polars.selectors)": [[936, "polars.selectors.exclude"]], "expand_selector() (in module polars.selectors)": [[936, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[936, "polars.selectors.first"]], "float() (in module polars.selectors)": [[936, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[936, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[936, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[936, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[936, "polars.selectors.matches"]], "numeric() (in module polars.selectors)": [[936, "polars.selectors.numeric"]], "polars.selectors": [[936, "module-polars.selectors"]], "signed_integer() (in module polars.selectors)": [[936, "polars.selectors.signed_integer"]], "starts_with() (in module polars.selectors)": [[936, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[936, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[936, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[936, "polars.selectors.time"]], "unsigned_integer() (in module polars.selectors)": [[936, "polars.selectors.unsigned_integer"]], "abs() (polars.series method)": [[938, "polars.Series.abs"]], "alias() (polars.series method)": [[939, "polars.Series.alias"]], "all() (polars.series method)": [[940, "polars.Series.all"]], "any() (polars.series method)": [[941, "polars.Series.any"]], "append() (polars.series method)": [[942, "polars.Series.append"]], "apply() (polars.series method)": [[943, "polars.Series.apply"]], "arccos() (polars.series method)": [[944, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[945, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[946, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[947, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[948, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[949, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[950, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[951, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[952, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[953, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[954, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[955, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[956, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[957, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[958, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[959, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[960, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[961, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[962, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[963, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[964, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[965, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[966, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[967, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[968, "polars.Series.arr.min"]], "n_unique() (polars.series.arr method)": [[969, "polars.Series.arr.n_unique"]], "reverse() (polars.series.arr method)": [[970, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[971, "polars.Series.arr.shift"]], "sort() (polars.series.arr method)": [[972, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[973, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[974, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[975, "polars.Series.arr.to_list"]], "to_struct() (polars.series.arr method)": [[976, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[977, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[978, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[979, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[980, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[981, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[982, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[983, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[984, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[985, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[986, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[987, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[988, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[989, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[990, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[991, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[992, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[993, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[994, "polars.Series.clear"]], "clip() (polars.series method)": [[995, "polars.Series.clip"]], "clip_max() (polars.series method)": [[996, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[997, "polars.Series.clip_min"]], "clone() (polars.series method)": [[998, "polars.Series.clone"]], "cos() (polars.series method)": [[999, "polars.Series.cos"]], "cosh() (polars.series method)": [[1000, "polars.Series.cosh"]], "cot() (polars.series method)": [[1001, "polars.Series.cot"]], "cum_count() (polars.series method)": [[1002, "polars.Series.cum_count"]], "cum_max() (polars.series method)": [[1003, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[1004, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[1005, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[1006, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[1007, "polars.Series.cummax"]], "cummin() (polars.series method)": [[1008, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[1009, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[1010, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[1011, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[1012, "polars.Series.cut"]], "describe() (polars.series method)": [[1013, "polars.Series.describe"]], "diff() (polars.series method)": [[1014, "polars.Series.diff"]], "dot() (polars.series method)": [[1015, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[1016, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[1017, "polars.Series.drop_nulls"]], "add_business_days() (polars.series.dt method)": [[1018, "polars.Series.dt.add_business_days"]], "base_utc_offset() (polars.series.dt method)": [[1019, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[1020, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[1021, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[1022, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[1023, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[1024, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[1025, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[1026, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[1027, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[1028, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[1029, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[1030, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[1031, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[1032, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[1033, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[1034, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[1035, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[1036, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[1037, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[1038, "polars.Series.dt.microseconds"]], "millennium() (polars.series.dt method)": [[1039, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[1040, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[1041, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[1042, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[1043, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[1044, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[1045, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[1046, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[1047, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[1048, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[1049, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[1050, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[1051, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[1052, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[1053, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[1054, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[1055, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[1056, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[1057, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[1058, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[1059, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[1060, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[1061, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[1062, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[1063, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[1064, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[1065, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[1066, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[1067, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[1068, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1069, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1070, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1071, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1072, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1073, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1074, "polars.Series.entropy"]], "equals() (polars.series method)": [[1075, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1076, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1077, "polars.Series.ewm_mean"]], "ewm_mean_by() (polars.series method)": [[1078, "polars.Series.ewm_mean_by"]], "ewm_std() (polars.series method)": [[1079, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1080, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1081, "polars.Series.exp"]], "explode() (polars.series method)": [[1082, "polars.Series.explode"]], "extend() (polars.series method)": [[1083, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1084, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1085, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1086, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1087, "polars.Series.filter"]], "flags (polars.series attribute)": [[1088, "polars.Series.flags"]], "floor() (polars.series method)": [[1089, "polars.Series.floor"]], "gather() (polars.series method)": [[1090, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1091, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1092, "polars.Series.get_chunks"]], "has_nulls() (polars.series method)": [[1093, "polars.Series.has_nulls"]], "has_validity() (polars.series method)": [[1094, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1095, "polars.Series.hash"]], "head() (polars.series method)": [[1096, "polars.Series.head"]], "hist() (polars.series method)": [[1097, "polars.Series.hist"]], "implode() (polars.series method)": [[1098, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1099, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1100, "polars.Series.interpolate"]], "interpolate_by() (polars.series method)": [[1101, "polars.Series.interpolate_by"]], "is_between() (polars.series method)": [[1102, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1103, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1104, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1105, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1106, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1107, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1108, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1109, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1110, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1111, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1112, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1113, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1114, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1115, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1116, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1117, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1118, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1119, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1120, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1121, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1122, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1123, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1124, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1125, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1126, "polars.Series.len"]], "limit() (polars.series method)": [[1127, "polars.Series.limit"]], "all() (polars.series.list method)": [[1128, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1129, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1130, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1131, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1132, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1133, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1134, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1135, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1136, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1137, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1138, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1139, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1140, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1141, "polars.Series.list.gather"]], "gather_every() (polars.series.list method)": [[1142, "polars.Series.list.gather_every"]], "get() (polars.series.list method)": [[1143, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1144, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1145, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1146, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1147, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1148, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1149, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1150, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1151, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1152, "polars.Series.list.min"]], "n_unique() (polars.series.list method)": [[1153, "polars.Series.list.n_unique"]], "reverse() (polars.series.list method)": [[1154, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1155, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1156, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1157, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1158, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1159, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1160, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1161, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1162, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1163, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1164, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1165, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1166, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1167, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1168, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1169, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1170, "polars.Series.list.var"]], "log() (polars.series method)": [[1171, "polars.Series.log"]], "log10() (polars.series method)": [[1172, "polars.Series.log10"]], "log1p() (polars.series method)": [[1173, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1174, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1175, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1176, "polars.Series.map_elements"]], "max() (polars.series method)": [[1177, "polars.Series.max"]], "mean() (polars.series method)": [[1178, "polars.Series.mean"]], "median() (polars.series method)": [[1179, "polars.Series.median"]], "min() (polars.series method)": [[1180, "polars.Series.min"]], "mode() (polars.series method)": [[1181, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1182, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1183, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1184, "polars.Series.name"]], "nan_max() (polars.series method)": [[1185, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1186, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1187, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1188, "polars.Series.not_"]], "null_count() (polars.series method)": [[1189, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1190, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1191, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1192, "polars.Series.peak_min"]], "product() (polars.series method)": [[1193, "polars.Series.product"]], "qcut() (polars.series method)": [[1194, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1195, "polars.Series.quantile"]], "rank() (polars.series method)": [[1196, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1197, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1198, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1199, "polars.Series.rename"]], "replace() (polars.series method)": [[1200, "polars.Series.replace"]], "reshape() (polars.series method)": [[1201, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1202, "polars.Series.reverse"]], "rle() (polars.series method)": [[1203, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1204, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1205, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1206, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1207, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1208, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1209, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1210, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1211, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1212, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1213, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1214, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1215, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1216, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1217, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1218, "polars.Series.sample"]], "scatter() (polars.series method)": [[1219, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1220, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1221, "polars.Series.series_equal"]], "set() (polars.series method)": [[1222, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1223, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1224, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1225, "polars.Series.shape"]], "shift() (polars.series method)": [[1226, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1227, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1228, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1229, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1230, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1231, "polars.Series.sign"]], "sin() (polars.series method)": [[1232, "polars.Series.sin"]], "sinh() (polars.series method)": [[1233, "polars.Series.sinh"]], "skew() (polars.series method)": [[1234, "polars.Series.skew"]], "slice() (polars.series method)": [[1235, "polars.Series.slice"]], "sort() (polars.series method)": [[1236, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1237, "polars.Series.sqrt"]], "std() (polars.series method)": [[1238, "polars.Series.std"]], "concat() (polars.series.str method)": [[1239, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1240, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1241, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1242, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1243, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1244, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1245, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1246, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1247, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1248, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1249, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1250, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1251, "polars.Series.str.find"]], "head() (polars.series.str method)": [[1252, "polars.Series.str.head"]], "json_decode() (polars.series.str method)": [[1253, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1254, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1255, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1256, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1257, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1258, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1259, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1260, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1261, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1262, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1263, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1264, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1265, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1266, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1267, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1268, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1269, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1270, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1271, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1272, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1273, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1274, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1275, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1276, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1277, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1278, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1279, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1280, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1281, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1282, "polars.Series.str.strptime"]], "tail() (polars.series.str method)": [[1283, "polars.Series.str.tail"]], "to_date() (polars.series.str method)": [[1284, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1285, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1286, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1287, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1288, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1289, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1290, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1291, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1292, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1293, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1294, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1295, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1296, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1297, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1298, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1299, "polars.Series.sum"]], "tail() (polars.series method)": [[1300, "polars.Series.tail"]], "take() (polars.series method)": [[1301, "polars.Series.take"]], "take_every() (polars.series method)": [[1302, "polars.Series.take_every"]], "tan() (polars.series method)": [[1303, "polars.Series.tan"]], "tanh() (polars.series method)": [[1304, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1305, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1306, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1307, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1308, "polars.Series.to_init_repr"]], "to_jax() (polars.series method)": [[1309, "polars.Series.to_jax"]], "to_list() (polars.series method)": [[1310, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1311, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1312, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1313, "polars.Series.to_physical"]], "to_torch() (polars.series method)": [[1314, "polars.Series.to_torch"]], "top_k() (polars.series method)": [[1315, "polars.Series.top_k"]], "unique() (polars.series method)": [[1316, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1317, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1318, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1319, "polars.Series.value_counts"]], "var() (polars.series method)": [[1320, "polars.Series.var"]], "view() (polars.series method)": [[1321, "polars.Series.view"]], "zip_with() (polars.series method)": [[1322, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1339, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1339, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1339, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1339, "polars.SQLContext.__init__"]]}})